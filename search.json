{"type":"Source","title":"base/index.js","docs":[{"kind":"source","code":"\"use strict\";\r\n/**\r\n * @fileOverview This is base definition for all composed classes defined by the system\r\n * @module base\r\n * @requires base/chains\r\n * @requires dcl\r\n */\r\n\r\nvar dcl = require( \"dcl\" );\r\nvar chains = require( \"./chains\" );\r\n\r\n/**\r\n * @classdesc The base of all classes in the system, this is one of the few pure \"classes\" in core the of the system. It is a\r\n * pretty clean little class whose primary purpose is to surface the composition chains and a basis for storing\r\n * options on mixin and subclass instances. Options are handled at the instance rather than the prototype level\r\n * so that multiple instances don't compete for default values.\r\n *\r\n * @exports base\r\n * @constructor\r\n * @extends base/chains\r\n */\r\nvar Base = dcl( [chains], /** @lends base# */{\r\n\tdeclaredClass     : \"Base\",\r\n\t/**\r\n\t * Add an option to a class. If any members of the hash already exist in `this.options`, they will be overwritten.\r\n\t * @param {hash} options A hash of options you want to set\r\n\t * @see {base#addDefaultOptions}\r\n\t */\r\n\taddOptions        : function ( options ) {\r\n\t\toptions = options || {};\r\n\t\tif ( this.options ) {options = sys.extend( {}, sys.result( this, 'options' ), options );}\r\n\t\tthis.options = options;\r\n\t},\r\n\t/**\r\n\t * Add a default option to a class. The default options are only set if there is not already a\r\n\t * value for the option.\r\n\t * @param {hash} options A hash of options you want to set\r\n\t * @see {base#addOptions}\r\n\t */\r\n\taddDefaultOptions : function ( options ) {\r\n\t\toptions = options || {};\r\n\t\tif ( this.options ) {options = sys.defaults( {}, sys.result( this, 'options' ), options );}\r\n\t\tthis.options = options;\r\n\t},\r\n\r\n\t/**\r\n\t * Call this to close your object and dispose of all maintained resources. You can define this method on your\r\n\t * own classes without having to call the superclass instance, however it is reccomended that you put\r\n\t * all disposal code in `destroy()`. You must be disciplined about calling this on your instances.\r\n\t * @see {base/chains#end}\r\n\t * @see {base/chains#destroy}\r\n\t */\r\n\tend : function () {\r\n\t\tthis.destroy()\r\n\t},\r\n\r\n\t/**\r\n\t * Called when it is time to get rid of all of your instance level references and objects and events. You can\r\n\t * define this method on your own classes without having to call the superclass instance. It is called by\r\n\t * `instance.end()` automatically\r\n\t * @see {base/chains#end}\r\n\t * @see {base/chains#destroy}\r\n\t */\r\n\tdestroy : function () {\r\n\r\n\t}\r\n\r\n\r\n} );\r\n\r\nBase.compose = dcl;\r\nBase.mixin = dcl.mix;\r\nmodule.exports = Base;\r\n"}],"content":"\r\n\r\n\r\n\r\n    \r\n    <section>\r\n        <article>\r\n            <pre class=\"prettyprint source linenums\"><code>\"use strict\";\r\n/**\r\n * @fileOverview This is base definition for all composed classes defined by the system\r\n * @module base\r\n * @requires base/chains\r\n * @requires dcl\r\n */\r\n\r\nvar dcl = require( \"dcl\" );\r\nvar chains = require( \"./chains\" );\r\n\r\n/**\r\n * @classdesc The base of all classes in the system, this is one of the few pure \"classes\" in core the of the system. It is a\r\n * pretty clean little class whose primary purpose is to surface the composition chains and a basis for storing\r\n * options on mixin and subclass instances. Options are handled at the instance rather than the prototype level\r\n * so that multiple instances don't compete for default values.\r\n *\r\n * @exports base\r\n * @constructor\r\n * @extends base/chains\r\n */\r\nvar Base = dcl( [chains], /** @lends base# */{\r\n\tdeclaredClass     : \"Base\",\r\n\t/**\r\n\t * Add an option to a class. If any members of the hash already exist in `this.options`, they will be overwritten.\r\n\t * @param {hash} options A hash of options you want to set\r\n\t * @see {base#addDefaultOptions}\r\n\t */\r\n\taddOptions        : function ( options ) {\r\n\t\toptions = options || {};\r\n\t\tif ( this.options ) {options = sys.extend( {}, sys.result( this, 'options' ), options );}\r\n\t\tthis.options = options;\r\n\t},\r\n\t/**\r\n\t * Add a default option to a class. The default options are only set if there is not already a\r\n\t * value for the option.\r\n\t * @param {hash} options A hash of options you want to set\r\n\t * @see {base#addOptions}\r\n\t */\r\n\taddDefaultOptions : function ( options ) {\r\n\t\toptions = options || {};\r\n\t\tif ( this.options ) {options = sys.defaults( {}, sys.result( this, 'options' ), options );}\r\n\t\tthis.options = options;\r\n\t},\r\n\r\n\t/**\r\n\t * Call this to close your object and dispose of all maintained resources. You can define this method on your\r\n\t * own classes without having to call the superclass instance, however it is reccomended that you put\r\n\t * all disposal code in `destroy()`. You must be disciplined about calling this on your instances.\r\n\t * @see {base/chains#end}\r\n\t * @see {base/chains#destroy}\r\n\t */\r\n\tend : function () {\r\n\t\tthis.destroy()\r\n\t},\r\n\r\n\t/**\r\n\t * Called when it is time to get rid of all of your instance level references and objects and events. You can\r\n\t * define this method on your own classes without having to call the superclass instance. It is called by\r\n\t * `instance.end()` automatically\r\n\t * @see {base/chains#end}\r\n\t * @see {base/chains#destroy}\r\n\t */\r\n\tdestroy : function () {\r\n\r\n\t}\r\n\r\n\r\n} );\r\n\r\nBase.compose = dcl;\r\nBase.mixin = dcl.mix;\r\nmodule.exports = Base;\r\n</code></pre>\r\n        </article>\r\n    </section>\r\n\r\n\r\n\r\n"}{"type":"Source","title":"base/chains.js","docs":[{"kind":"source","code":"\"use strict\";\r\n/**\r\n * @fileOverview The chains define the primary composition elements (functions) that determine the order of execution.\r\n *\r\n * @module base/chains\r\n * @requires dcl\r\n */\r\nvar dcl = require( \"dcl\" );\r\n/**\r\n * @classDesc Chains define the primary composition elements (functions) that determine the order of execution.\r\n * @exports base/chains\r\n * @constructor\r\n */\r\nvar Chains = dcl( null, {declaredClass : \"base/chains\"} );\r\n/**\r\n * The `close` method asks an object to shut itself down in a way that will allow it to be reopened, unlike the\r\n * [end method]{@link base/chains#end} which will call the destroy method which should make the object unusable, but also\r\n * devoid of all resources whereas `close` may still keep some resources open.\r\n *\r\n * | Heading 1 | Heading 2 | Heading 3       |\r\n * |-----------|-----------|-----------------|\r\n * | Bar       | Food      | This is a table |\r\n *\r\n * This uses the `before` chain which means the last one defined in the first one destroyed\r\n * @memberOf base/chains#\r\n * @name close\r\n * @see base/chains#open\r\n */\r\ndcl.chainBefore( Chains, \"close\" );\r\n/**\r\n * The `end` method will call the destroy method which should make the object unusable and\r\n * devoid of all resources, unlike the\r\n * [close method]{@link base/chains#close} asks an object to shut itself down in a way that will allow it to be reopened.\r\n *\r\n * This uses the `before` chain which means the last one defined in the first one destroyed\r\n * @memberOf base/chains#\r\n * @name end\r\n *\r\n * @example  &lt;caption>Add *this* to your application.properties.&lt;/caption>\r\n * {@lang bash}\r\n * foo=bar\r\n *\r\n */\r\ndcl.chainBefore( Chains, \"end\" );\r\n/**\r\n * Destroy is called by the end method and it is here that you should clean up after yourself. The difference between\r\n * `destroy` and [end]{@link base/chains#end} is the `end` is the verb that you raise on an object to ask it to go away\r\n * and `destroy` is where you actually do the work to clean up. Think of this as the counterpart of `constructor` yet\r\n * not called automatically.\r\n *\r\n * This uses the `before` chain which means the last one defined is the first one destroyed\r\n * @private\r\n * @memberOf base/chains#\r\n * @name destroy\r\n */\r\ndcl.chainBefore( Chains, \"destroy\" );\r\n\r\n/**\r\n * If you are using the open/close paradigm for an object that can kind of go dormant on {@link base/chains#close} and can be \"reopened\"\r\n * again later, here is where the \"open\" code will go.\r\n *\r\n * This used the `after` chain which means that the first one defined is the first one destroyed.\r\n *\r\n * @memberOf base/chains#\r\n * @name open\r\n * @see base/chains#close\r\n */\r\ndcl.chainAfter( Chains, \"open\" );\r\n\r\nmodule.exports = Chains;\r\n"}],"content":"\r\n\r\n\r\n\r\n    \r\n    <section>\r\n        <article>\r\n            <pre class=\"prettyprint source linenums\"><code>\"use strict\";\r\n/**\r\n * @fileOverview The chains define the primary composition elements (functions) that determine the order of execution.\r\n *\r\n * @module base/chains\r\n * @requires dcl\r\n */\r\nvar dcl = require( \"dcl\" );\r\n/**\r\n * @classDesc Chains define the primary composition elements (functions) that determine the order of execution.\r\n * @exports base/chains\r\n * @constructor\r\n */\r\nvar Chains = dcl( null, {declaredClass : \"base/chains\"} );\r\n/**\r\n * The `close` method asks an object to shut itself down in a way that will allow it to be reopened, unlike the\r\n * [end method]{@link base/chains#end} which will call the destroy method which should make the object unusable, but also\r\n * devoid of all resources whereas `close` may still keep some resources open.\r\n *\r\n * | Heading 1 | Heading 2 | Heading 3       |\r\n * |-----------|-----------|-----------------|\r\n * | Bar       | Food      | This is a table |\r\n *\r\n * This uses the `before` chain which means the last one defined in the first one destroyed\r\n * @memberOf base/chains#\r\n * @name close\r\n * @see base/chains#open\r\n */\r\ndcl.chainBefore( Chains, \"close\" );\r\n/**\r\n * The `end` method will call the destroy method which should make the object unusable and\r\n * devoid of all resources, unlike the\r\n * [close method]{@link base/chains#close} asks an object to shut itself down in a way that will allow it to be reopened.\r\n *\r\n * This uses the `before` chain which means the last one defined in the first one destroyed\r\n * @memberOf base/chains#\r\n * @name end\r\n *\r\n * @example  &lt;caption>Add *this* to your application.properties.&lt;/caption>\r\n * {@lang bash}\r\n * foo=bar\r\n *\r\n */\r\ndcl.chainBefore( Chains, \"end\" );\r\n/**\r\n * Destroy is called by the end method and it is here that you should clean up after yourself. The difference between\r\n * `destroy` and [end]{@link base/chains#end} is the `end` is the verb that you raise on an object to ask it to go away\r\n * and `destroy` is where you actually do the work to clean up. Think of this as the counterpart of `constructor` yet\r\n * not called automatically.\r\n *\r\n * This uses the `before` chain which means the last one defined is the first one destroyed\r\n * @private\r\n * @memberOf base/chains#\r\n * @name destroy\r\n */\r\ndcl.chainBefore( Chains, \"destroy\" );\r\n\r\n/**\r\n * If you are using the open/close paradigm for an object that can kind of go dormant on {@link base/chains#close} and can be \"reopened\"\r\n * again later, here is where the \"open\" code will go.\r\n *\r\n * This used the `after` chain which means that the first one defined is the first one destroyed.\r\n *\r\n * @memberOf base/chains#\r\n * @name open\r\n * @see base/chains#close\r\n */\r\ndcl.chainAfter( Chains, \"open\" );\r\n\r\nmodule.exports = Chains;\r\n</code></pre>\r\n        </article>\r\n    </section>\r\n\r\n\r\n\r\n"}{"type":"Source","title":"documents/model.js","docs":[{"kind":"source","code":"\"use strict\";\r\n/**\r\n * @fileOverview A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like\r\n * that, it is a pure, in memory data container\r\n * @module documents/model\r\n * @require base\r\n * @require documents/probe\r\n * @require lodash\r\n */\r\n\r\nvar Base = require( \"../base\" );\r\nvar probe = require( \"./probe\" );\r\nvar sys = require( \"lodash\" );\r\n/**\r\n * A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like\r\n * that, it is a pure, in memory data container\r\n * @exports documents/model\r\n * @constructor\r\n * @borrows module:documents/probe.get as get\r\n * @borrows module:documents/probe.set as set\r\n * @borrows module:documents/probe.any as any\r\n * @borrows module:documents/probe.all as all\r\n * @borrows module:documents/probe.remove as remove\r\n * @borrows module:documents/probe.seekKey as seekKey\r\n * @borrows module:documents/probe.seek as seek\r\n * @borrows module:documents/probe.findOne as findOne\r\n * @borrows module:documents/probe.findOneKey as findOneKey\r\n * @borrows module:documents/probe.findKeys as findKeys\r\n * @borrows module:documents/probe.find as find\r\n * @borrows module:documents/probe.update as update\r\n * @borrows module:documents/probe.some as some\r\n * @borrows module:documents/probe.every as every\r\n */\r\nvar Model = Base.compose( [Base], /** @lends documents/model# */{\r\n\tconstructor : function () {\r\n\t\tvar that = this;\r\n\t\tprobe.mixin( this );\r\n\r\n\t\tvar idField = \"_id\";\r\n\t\t/**\r\n\t\t * The name of the field that uniquely identifies a record. When provided, some operations will take advantage of it\r\n\t\t *\r\n\t\t * @name _idField\r\n\t\t * @memberOf  documents/model#\r\n\t\t * @type {string}\r\n\t\t * @private\r\n\t\t */\r\n\t\tObject.defineProperty( this, \"_idField\", {\r\n\t\t\tget          : function () {\r\n\t\t\t\treturn idField;\r\n\t\t\t},\r\n\t\t\tset          : function ( val ) {\r\n\t\t\t\tidField = val;\r\n\t\t\t},\r\n\t\t\tconfigurable : false,\r\n\t\t\tenumerable   : true,\r\n\t\t\twritable     : true\r\n\t\t} );\r\n\r\n\t\t/**\r\n\t\t * The value of the primary key if {@link documents/model#_idField} is filled in. It will be null if none found\r\n\t\t *\r\n\t\t * @name _pkey\r\n\t\t * @memberOf  documents/model#\r\n\t\t * @type {*}\r\n\t\t * @private\r\n\t\t */\r\n\t\tObject.defineProperty( this, \"_pkey\", {\r\n\t\t\tget          : function () {\r\n\t\t\t\tvar val;\r\n\t\t\t\tif ( !sys.isEmpty( that._idField ) ) {\r\n\t\t\t\t\tval = that[that._idField];\r\n\t\t\t\t}\r\n\t\t\t\treturn val;\r\n\t\t\t},\r\n\t\t\tset          : function ( val ) {\r\n\t\t\t\tif ( !sys.isEmpty( that._idField ) ) {\r\n\t\t\t\t\tthat[that._idField] = val;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tconfigurable : false,\r\n\t\t\tenumerable   : true,\r\n\t\t\twritable     : true\r\n\t\t} );\r\n\r\n\t\t/**\r\n\t\t * If {@link documents/model#_idField} is filled in and it's value is empty this will be true.\r\n\t\t * @type {boolean}\r\n\t\t * @name isNew\r\n\t\t * @memberOf  documents/model#\r\n\t\t */\r\n\t\tObject.defineProperty( this, \"isNew\", {\r\n\t\t\tget          : function () {\r\n\t\t\t\treturn !sys.isEmpty( that._idField ) &amp;&amp; !sys.isEmpty( that[that._idField] )\r\n\t\t\t},\r\n\t\t\tconfigurable : false,\r\n\t\t\tenumerable   : true,\r\n\t\t\twritable     : false\r\n\t\t} );\r\n\r\n\t\t/**\r\n\t\t * Returns true if this instance is empty\r\n\t\t * @type {boolean}\r\n\t\t * @name isEmpty\r\n\t\t * @memberOf  documents/model#\r\n\t\t */\r\n\t\tObject.defineProperty( this, \"isEmpty\", {\r\n\t\t\tget          : function () {\r\n\t\t\t\treturn sys.isEmpty( that );\r\n\t\t\t},\r\n\t\t\tconfigurable : false,\r\n\t\t\tenumerable   : true,\r\n\t\t\twritable     : false\r\n\t\t} );\r\n\t}\r\n} );\r\nmodule.exports = Model;\r\n"}],"content":"\r\n\r\n\r\n\r\n    \r\n    <section>\r\n        <article>\r\n            <pre class=\"prettyprint source linenums\"><code>\"use strict\";\r\n/**\r\n * @fileOverview A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like\r\n * that, it is a pure, in memory data container\r\n * @module documents/model\r\n * @require base\r\n * @require documents/probe\r\n * @require lodash\r\n */\r\n\r\nvar Base = require( \"../base\" );\r\nvar probe = require( \"./probe\" );\r\nvar sys = require( \"lodash\" );\r\n/**\r\n * A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like\r\n * that, it is a pure, in memory data container\r\n * @exports documents/model\r\n * @constructor\r\n * @borrows module:documents/probe.get as get\r\n * @borrows module:documents/probe.set as set\r\n * @borrows module:documents/probe.any as any\r\n * @borrows module:documents/probe.all as all\r\n * @borrows module:documents/probe.remove as remove\r\n * @borrows module:documents/probe.seekKey as seekKey\r\n * @borrows module:documents/probe.seek as seek\r\n * @borrows module:documents/probe.findOne as findOne\r\n * @borrows module:documents/probe.findOneKey as findOneKey\r\n * @borrows module:documents/probe.findKeys as findKeys\r\n * @borrows module:documents/probe.find as find\r\n * @borrows module:documents/probe.update as update\r\n * @borrows module:documents/probe.some as some\r\n * @borrows module:documents/probe.every as every\r\n */\r\nvar Model = Base.compose( [Base], /** @lends documents/model# */{\r\n\tconstructor : function () {\r\n\t\tvar that = this;\r\n\t\tprobe.mixin( this );\r\n\r\n\t\tvar idField = \"_id\";\r\n\t\t/**\r\n\t\t * The name of the field that uniquely identifies a record. When provided, some operations will take advantage of it\r\n\t\t *\r\n\t\t * @name _idField\r\n\t\t * @memberOf  documents/model#\r\n\t\t * @type {string}\r\n\t\t * @private\r\n\t\t */\r\n\t\tObject.defineProperty( this, \"_idField\", {\r\n\t\t\tget          : function () {\r\n\t\t\t\treturn idField;\r\n\t\t\t},\r\n\t\t\tset          : function ( val ) {\r\n\t\t\t\tidField = val;\r\n\t\t\t},\r\n\t\t\tconfigurable : false,\r\n\t\t\tenumerable   : true,\r\n\t\t\twritable     : true\r\n\t\t} );\r\n\r\n\t\t/**\r\n\t\t * The value of the primary key if {@link documents/model#_idField} is filled in. It will be null if none found\r\n\t\t *\r\n\t\t * @name _pkey\r\n\t\t * @memberOf  documents/model#\r\n\t\t * @type {*}\r\n\t\t * @private\r\n\t\t */\r\n\t\tObject.defineProperty( this, \"_pkey\", {\r\n\t\t\tget          : function () {\r\n\t\t\t\tvar val;\r\n\t\t\t\tif ( !sys.isEmpty( that._idField ) ) {\r\n\t\t\t\t\tval = that[that._idField];\r\n\t\t\t\t}\r\n\t\t\t\treturn val;\r\n\t\t\t},\r\n\t\t\tset          : function ( val ) {\r\n\t\t\t\tif ( !sys.isEmpty( that._idField ) ) {\r\n\t\t\t\t\tthat[that._idField] = val;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tconfigurable : false,\r\n\t\t\tenumerable   : true,\r\n\t\t\twritable     : true\r\n\t\t} );\r\n\r\n\t\t/**\r\n\t\t * If {@link documents/model#_idField} is filled in and it's value is empty this will be true.\r\n\t\t * @type {boolean}\r\n\t\t * @name isNew\r\n\t\t * @memberOf  documents/model#\r\n\t\t */\r\n\t\tObject.defineProperty( this, \"isNew\", {\r\n\t\t\tget          : function () {\r\n\t\t\t\treturn !sys.isEmpty( that._idField ) &amp;&amp; !sys.isEmpty( that[that._idField] )\r\n\t\t\t},\r\n\t\t\tconfigurable : false,\r\n\t\t\tenumerable   : true,\r\n\t\t\twritable     : false\r\n\t\t} );\r\n\r\n\t\t/**\r\n\t\t * Returns true if this instance is empty\r\n\t\t * @type {boolean}\r\n\t\t * @name isEmpty\r\n\t\t * @memberOf  documents/model#\r\n\t\t */\r\n\t\tObject.defineProperty( this, \"isEmpty\", {\r\n\t\t\tget          : function () {\r\n\t\t\t\treturn sys.isEmpty( that );\r\n\t\t\t},\r\n\t\t\tconfigurable : false,\r\n\t\t\tenumerable   : true,\r\n\t\t\twritable     : false\r\n\t\t} );\r\n\t}\r\n} );\r\nmodule.exports = Model;\r\n</code></pre>\r\n        </article>\r\n    </section>\r\n\r\n\r\n\r\n"}{"type":"Source","title":"documents/probe.js","docs":[{"kind":"source","code":"\"use strict\";\r\n/**\r\n @fileOverview Queries objects in memory using a mongo-like notation for reaching into objects and filtering for records\r\n\r\n @module documents/probe\r\n @author Terry Weiss\r\n @license MIT\r\n @requires lodash\r\n */\r\n\r\nvar sys = require( \"lodash\" );\r\n/**\r\n The list of operators that are nested within the expression object. These take the form &lt;code>{path:{operator:operand}}&lt;/code>\r\n @private\r\n @type {array.&lt;string>}\r\n **/\r\nvar nestedOps = [\"$eq\", \"$gt\", \"$gte\", \"$in\", \"$lt\", \"$lte\", \"$ne\", \"$nin\", \"$exists\", \"$mod\", \"$size\", \"$all\"];\r\n\r\n/**\r\n The list of operators that prefix the expression object. These take the form &lt;code>{operator:{operands}}&lt;/code> or &lt;code>{operator: [operands]}&lt;/code>\r\n @private\r\n @type {array.&lt;string>}\r\n **/\r\nvar prefixOps = [\"$and\", \"$or\", \"$nor\", \"$not\"];\r\n\r\n/**\r\n Processes a nested operator by picking the operator out of the expression object. Returns a formatted object that can be used for querying\r\n @private\r\n @param {string} path The path to element to work with\r\n @param {object} operand The operands to use for the query\r\n @return {object} A formatted operation definition\r\n **/\r\nfunction processNestedOperator( path, operand ) {\r\n\tvar opKeys = Object.keys( operand );\r\n\treturn {\r\n\t\toperation : opKeys[ 0 ],\r\n\t\toperands  : [operand[ opKeys[ 0 ] ]],\r\n\t\tpath      : path\r\n\t};\r\n}\r\n\r\n/**\r\n Interrogates a single query expression object and calls the appropriate handler for its contents\r\n @private\r\n @param {object} val The expression\r\n @param {object} key The prefix\r\n @returns {object} A formatted operation definition\r\n **/\r\nfunction processExpressionObject( val, key ) {\r\n\tvar operator;\r\n\tif ( sys.isObject( val ) ) {\r\n\t\tvar opKeys = Object.keys( val );\r\n\t\tvar op = opKeys[ 0 ];\r\n\r\n\t\tif ( sys.indexOf( nestedOps, op ) > -1 ) {\r\n\t\t\toperator = processNestedOperator( key, val );\r\n\t\t} else if ( sys.indexOf( prefixOps, key ) > -1 ) {\r\n\t\t\toperator = processPrefixOperator( key, val );\r\n\t\t} else if ( op === \"$regex\" ) {\r\n\t\t\t// special handling for regex options\r\n\t\t\toperator = processNestedOperator( key, val );\r\n\t\t} else if ( op === \"$elemMatch\" ) {\r\n\t\t\t// elemMatch is just a weird duck\r\n\t\t\toperator = {\r\n\t\t\t\tpath      : key,\r\n\t\t\t\toperation : op,\r\n\t\t\t\toperands  : []\r\n\t\t\t};\r\n\t\t\tsys.each( val[ op ], function ( entry ) {\r\n\t\t\t\toperator.operands = parseQueryExpression( entry );\r\n\t\t\t} );\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow new Error( \"Unrecognized operator\" );\r\n\t\t}\r\n\t} else {\r\n\t\toperator = processNestedOperator( key, { $eq : val } );\r\n\t}\r\n\treturn operator;\r\n}\r\n\r\n/**\r\n Processes a prefixed operator and then passes control to the nested operator method to pick out the contained values\r\n @private\r\n @param {string} operation The operation prefix\r\n @param {object} operand The operands to use for the query\r\n @return {object} A formatted operation definition\r\n **/\r\nfunction processPrefixOperator( operation, operand ) {\r\n\tvar component = {\r\n\t\toperation : operation,\r\n\t\tpath      : null,\r\n\t\toperands  : []\r\n\t};\r\n\r\n\tif ( sys.isArray( operand ) ) {\r\n\t\t//if it is an array we need to loop through the array and parse each operand\r\n\t\t//if it is an array we need to loop through the array and parse each operand\r\n\t\tsys.each( operand, function ( obj ) {\r\n\t\t\tsys.each( obj, function ( val, key ) {\r\n\t\t\t\tcomponent.operands.push( processExpressionObject( val, key ) );\r\n\t\t\t} );\r\n\t\t} );\r\n\t} else {\r\n\t\t//otherwise it is an object and we can parse it directly\r\n\t\tsys.each( operand, function ( val, key ) {\r\n\t\t\tcomponent.operands.push( processExpressionObject( val, key ) );\r\n\t\t} );\r\n\t}\r\n\treturn component;\r\n\r\n}\r\n\r\n/**\r\n Parses a query request and builds an object that can used to process a query target\r\n @private\r\n @param {object} obj The expression object\r\n @returns {object} All components of the expression in a kind of execution tree\r\n **/\r\n\r\nfunction parseQueryExpression( obj ) {\r\n\tif ( sys.size( obj ) > 1 ) {\r\n\t\tvar arr = sys.map( obj, function ( v, k ) {\r\n\t\t\tvar entry = {};\r\n\t\t\tentry[k] = v;\r\n\t\t\treturn entry;\r\n\t\t} );\r\n\t\tobj = {\r\n\t\t\t$and : arr\r\n\t\t};\r\n\t}\r\n\tvar payload = [];\r\n\tsys.each( obj, function ( val, key ) {\r\n\r\n\t\tvar exprObj = processExpressionObject( val, key );\r\n\r\n\t\tif ( exprObj.operation === \"$regex\" ) {\r\n\t\t\texprObj.options = val.$options;\r\n\t\t}\r\n\r\n\t\tpayload.push( exprObj );\r\n\t} );\r\n\r\n\treturn payload;\r\n}\r\n\r\n/**\r\n The delimiter to use when splitting an expression\r\n @type {string}\r\n @static\r\n @default '.'\r\n **/\r\n\r\nexports.delimiter = '.';\r\n\r\n/**\r\n Splits a path expression into its component parts\r\n @private\r\n @param {string} path The path to split\r\n @returns {array}\r\n **/\r\n\r\nfunction splitPath( path ) {\r\n\treturn path.split( exports.delimiter );\r\n}\r\n\r\n/**\r\n Reaches into an object and allows you to get at a value deeply nested in an object\r\n @private\r\n @param {array} path The split path of the element to work with\r\n @param {object} record The record to reach into\r\n @return {*} Whatever was found in the record\r\n **/\r\nfunction reachin( path, record ) {\r\n\tvar context = record;\r\n\tvar part;\r\n\tvar _i;\r\n\tvar _len;\r\n\r\n\tfor ( _i = 0, _len = path.length; _i &lt; _len; _i++ ) {\r\n\t\tpart = path[_i];\r\n\t\tcontext = context[part];\r\n\t\tif ( sys.isNull( context ) || sys.isUndefined( context ) ) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn context;\r\n}\r\n\r\n/**\r\n This will write the value into a record at the path, creating intervening objects if they don't exist\r\n @private\r\n @param {array} path The split path of the element to work with\r\n @param {object} record The record to reach into\r\n @param {string} setter The set command, defaults to $set\r\n @param {object} newValue The value to write to the, or if the operator is $pull, the query of items to look for\r\n */\r\nfunction pushin( path, record, setter, newValue ) {\r\n\tvar context = record;\r\n\tvar parent = record;\r\n\tvar lastPart = null;\r\n\tvar _i;\r\n\tvar _len;\r\n\tvar part;\r\n\tvar keys;\r\n\r\n\tfor ( _i = 0, _len = path.length; _i &lt; _len; _i++ ) {\r\n\t\tpart = path[_i];\r\n\t\tlastPart = part;\r\n\t\tparent = context;\r\n\t\tcontext = context[part];\r\n\t\tif ( sys.isNull( context ) || sys.isUndefined( context ) ) {\r\n\t\t\tparent[part] = {};\r\n\t\t\tcontext = parent[part];\r\n\t\t}\r\n\t}\r\n\r\n\tif ( sys.isEmpty( setter ) || setter === '$set' ) {\r\n\t\tparent[lastPart] = newValue;\r\n\t\treturn parent[lastPart];\r\n\t} else {\r\n\t\tswitch ( setter ) {\r\n\t\t\tcase '$inc':\r\n\t\t\t\t/**\r\n\t\t\t\t * Increments a field by the amount you specify. It takes the form\r\n\t\t\t\t * `{ $inc: { field1: amount } }`\r\n\t\t\t\t * @name $inc\r\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\r\n\t\t\t\t * @example\r\n\t\t\t\t * var probe = require(\"documents/probe\");\r\n\t\t\t\t * probe.update( obj, {'name.last' : 'Owen', 'name.first' : 'LeRoy'},\r\n\t\t\t\t * {$inc : {'password.changes' : 2}} );\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif ( !sys.isNumber( newValue ) ) {\r\n\t\t\t\t\tnewValue = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif ( sys.isNumber( parent[lastPart] ) ) {\r\n\t\t\t\t\tparent[lastPart] = parent[lastPart] + newValue;\r\n\t\t\t\t\treturn parent[lastPart];\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase '$dec':\r\n\t\t\t\t/**\r\n\t\t\t\t * Decrements a field by the amount you specify. It takes the form\r\n\t\t\t\t * `{ $dec: { field1: amount }`\r\n                 * @name $dec\r\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\r\n\t\t\t\t * @example\r\n\t\t\t\t *  var probe = require(\"documents/probe\");\r\n\t\t\t\t * probe.update( obj, {'name.last' : 'Owen', 'name.first' : 'LeRoy'},\r\n\t\t\t\t * {$dec : {'password.changes' : 2}} );\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif ( !sys.isNumber( newValue ) ) {\r\n\t\t\t\t\tnewValue = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif ( sys.isNumber( parent[lastPart] ) ) {\r\n\t\t\t\t\tparent[lastPart] = parent[lastPart] - newValue;\r\n\t\t\t\t\treturn parent[lastPart];\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase '$unset':\r\n\t\t\t\t/**\r\n\t\t\t\t * Removes the field from the object. It takes the form\r\n\t\t\t\t * `{ $unset: { field1: \"\" } }`\r\n\t\t\t\t * @name $unset\r\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\r\n\t\t\t\t * @example\r\n\t\t\t\t * var probe = require(\"documents/probe\");\r\n\t\t\t\t * probe.update( data, {'name.first' : 'Yogi'}, {$unset : {'name.first' : ''}} );\r\n\t\t\t\t */\r\n\r\n\t\t\t\treturn delete parent[lastPart];\r\n\t\t\tcase '$pop':\r\n\t\t\t\t/**\r\n\t\t\t\t * The $pop operator removes the first or last element of an array. Pass $pop a value of 1 to remove the last element\r\n\t\t\t\t * in an array and a value of -1 to remove the first element of an array. This will only work on arrays. Syntax:\r\n\t\t\t\t * `{ $pop: { field: 1 } }` or `{ $pop: { field: -1 } }`\r\n\t\t\t\t * @name $pop\r\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\r\n\t\t\t\t * @example\r\n\t\t\t\t * var probe = require(\"documents/probe\");\r\n\t\t\t\t * // attr is the name of the array field\r\n\t\t\t\t * probe.update( data, {_id : '511d18827da2b88b09000133'}, {$pop : {attr : 1}} );\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif ( sys.isArray( parent[lastPart] ) ) {\r\n\t\t\t\t\tif ( !sys.isNumber( newValue ) ) {\r\n\t\t\t\t\t\tnewValue = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( newValue === 1 ) {\r\n\t\t\t\t\t\treturn parent[lastPart].pop();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn parent[lastPart].shift();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase '$push':\r\n\t\t\t\t/**\r\n\t\t\t\t * The $push operator appends a specified value to an array. It looks like this:\r\n\t\t\t\t * `{ $push: { &lt;field>: &lt;value> } }`\r\n\t\t\t\t * @name $push\r\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\r\n\t\t\t\t * @example\r\n\t\t\t\t * var probe = require(\"documents/probe\");\r\n\t\t\t\t * // attr is the name of the array field\r\n\t\t\t\t * probe.update( data, {_id : '511d18827da2b88b09000133'},\r\n\t\t\t\t * {$push : {attr : {\"hand\" : \"new\", \"color\" : \"new\"}}} );\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif ( sys.isArray( parent[lastPart] ) ) {\r\n\t\t\t\t\treturn parent[lastPart].push( newValue );\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase '$pull':\r\n\t\t\t\t/**\r\n\t\t\t\t * The $pull operator removes all instances of a value from an existing array. It looks like this:\r\n\t\t\t\t * `{ $pull: { field: &lt;query> } }`\r\n\t\t\t\t * @name $pull\r\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\r\n\t\t\t\t * @example\r\n\t\t\t\t * var probe = require(\"documents/probe\");\r\n\t\t\t\t * // attr is the name of the array field\r\n\t\t\t\t * probe.update( data, {'email' : 'EWallace.43@fauxprisons.com'},\r\n\t\t\t\t * {$pull : {attr : {\"color\" : \"green\"}}} );\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif ( sys.isArray( parent[lastPart] ) ) {\r\n\t\t\t\t\tkeys = exports.findKeys( parent[lastPart], newValue );\r\n\t\t\t\t\tsys.each( keys, function ( val, index ) {\r\n\t\t\t\t\t\treturn delete parent[lastPart][index];\r\n\t\t\t\t\t} );\r\n\t\t\t\t\tparent[lastPart] = sys.compact( parent[lastPart] );\r\n\t\t\t\t\treturn parent[lastPart];\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n The query operations that evaluate directly from an operation\r\n @private\r\n **/\r\nvar operations = {\r\n\t/**\r\n\t * `$eq` performs a `===` comparison by comparing the value directly if it is an atomic value.\r\n\t * otherwise if it is an array, it checks to see if the value looked for is in the array.\r\n\t * `{field: value}` or `{field: {$eq : value}}` or `{array: value}` or `{array: {$eq : value}}`\r\n\t * @name $eq\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {categories : \"cat1\"} );\r\n\t * // is the same as\r\n\t * probe.find( data, {categories : {$eq: \"cat1\"}} );\r\n\t */\r\n\r\n\t$eq        : function ( qu, value ) {\r\n\t\tif ( sys.isArray( value ) ) {\r\n\t\t\treturn sys.find( value, function ( entry ) {\r\n\t\t\t\treturn JSON.stringify( qu.operands[0] ) === JSON.stringify( entry );\r\n\t\t\t} ) !== void 0;\r\n\t\t} else {\r\n\t\t\treturn JSON.stringify( qu.operands[0] ) === JSON.stringify( value );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t *  `$ne` performs a `!==` comparison by comparing the value directly if it is an atomic value. Otherwise, if it is an array\r\n\t * this is performs a \"not in array\".\r\n\t * '{field: {$ne : value}}` or '{array: {$ne : value}}`\r\n\t * @name $ne\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"name.first\" : {$ne : \"Sheryl\"}} );\r\n\t */\r\n\r\n\t$ne        : function ( qu, value ) {\r\n\t\tif ( sys.isArray( value ) ) {\r\n\t\t\treturn sys.find( value, function ( entry ) {\r\n\t\t\t\treturn JSON.stringify( qu.operands[0] ) !== JSON.stringify( entry );\r\n\t\t\t} ) !== void 0;\r\n\t\t} else {\r\n\t\t\treturn JSON.stringify( qu.operands[0] ) !== JSON.stringify( value );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * `$all` checks to see if all of the members of the query are included in an array\r\n\t * `{array: {$all: [val1, val2, val3]}}`\r\n\t * @name $all\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"categories\" : {$all : [\"cat4\", \"cat2\", \"cat1\"]}} );\r\n\t */\r\n\r\n\t$all       : function ( qu, value ) {\r\n\t\tvar operands, result;\r\n\r\n\t\tresult = false;\r\n\t\tif ( sys.isArray( value ) ) {\r\n\t\t\toperands = sys.flatten( qu.operands );\r\n\t\t\tresult = sys.intersection( operands, value ).length === operands.length;\r\n\t\t}\r\n\t\treturn result;\r\n\t},\r\n\t/**\r\n\t * `$gt` Sees if a field is greater than the value\r\n\t * `{field: {$gt: value}}`\r\n\t * @name $gt\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$gt : 24}} );\r\n\t */\r\n\r\n\t$gt        : function ( qu, value ) {\r\n\t\treturn qu.operands[0] &lt; value;\r\n\t},\r\n\t/**\r\n\t * `$gte` Sees if a field is greater than or equal to the value\r\n\t * `{field: {$gte: value}}`\r\n\t * @name $gte\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$gte : 50}} );\r\n\t */\r\n\r\n\t$gte       : function ( qu, value ) {\r\n\t\treturn qu.operands[0] &lt;= value;\r\n\t},\r\n\t/**\r\n\t * `$lt` Sees if a field is less than the value\r\n\t * `{field: {$lt: value}}`\r\n\t * @name $lt\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$lt : 24}} );\r\n\t */\r\n\r\n\t$lt        : function ( qu, value ) {\r\n\t\treturn qu.operands[0] > value;\r\n\t},\r\n\t/**\r\n\t * `$lte` Sees if a field is less than or equal to the value\r\n\t * `{field: {$lte: value}}`\r\n\t * @name $lte\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$lte : 50}} );\r\n\t */\r\n\r\n\t$lte       : function ( qu, value ) {\r\n\t\treturn qu.operands[0] >= value;\r\n\t},\r\n\t/**\r\n\t * `$in` Sees if a field has one of the values in the query\r\n\t * `{field: {$in: [test1, test2, test3,...]}}`\r\n\t * @name $in\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$in : [24, 28, 60]}} );\r\n\t */\r\n\r\n\t$in        : function ( qu, value ) {\r\n\t\tvar operands;\r\n\r\n\t\toperands = sys.flatten( qu.operands );\r\n\t\treturn sys.indexOf( operands, value ) > -1;\r\n\t},\r\n\t/**\r\n\t * `$nin` Sees if a field has none of the values in the query\r\n\t * `{field: {$nin: [test1, test2, test3,...]}}`\r\n\t * @name $nin\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$nin : [24, 28, 60]}} );\r\n\t */\r\n\r\n\t$nin       : function ( qu, value ) {\r\n\t\tvar operands;\r\n\r\n\t\toperands = sys.flatten( qu.operands );\r\n\t\treturn sys.indexOf( operands, value ) === -1;\r\n\t},\r\n\t/**\r\n\t * `$exists` Sees if a field exists.\r\n\t * `{field: {$exists: true|false}}`\r\n\t * @name $exists\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"name.middle\" : {$exists : true}} );\r\n\t */\r\n\r\n\t$exists    : function ( qu, value ) {\r\n\t\treturn (sys.isNull( value ) || sys.isUndefined( value )) !== qu.operands[0];\r\n\t},\r\n\t/**\r\n\t * Checks equality to a modulus operation on a field\r\n\t * `{field: {$mod: [divisor, remainder]}}`\r\n\t * @name $mod\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$mod : [2, 0]}} );\r\n\t */\r\n\r\n\t$mod       : function ( qu, value ) {\r\n\t\tvar operands = sys.flatten( qu.operands );\r\n\t\tif ( operands.length !== 2 ) {\r\n\t\t\tthrow new Error( \"$mod requires two operands\" );\r\n\t\t}\r\n\t\tvar mod = operands[0];\r\n\t\tvar rem = operands[1];\r\n\t\treturn value % mod === rem;\r\n\t},\r\n\t/**\r\n\t * Compares the size of the field/array to the query. This can be used on arrays, strings and objects (where it will count keys)\r\n\t * `{'field|array`: {$size: value}}`\r\n\t * @name $size\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {attr : {$size : 3}} );\r\n\t */\r\n\r\n\t$size      : function ( qu, value ) {\r\n\t\treturn sys.size( value ) === qu.operands[0];\r\n\t},\r\n\t/**\r\n\t * Performs a regular expression test againts the field\r\n\t * `{field: {$regex: re, $options: reOptions}}`\r\n\t * @name $regex\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"name.first\" : {$regex : \"m*\", $options : \"i\"}} );\r\n\t */\r\n\r\n\t$regex     : function ( qu, value ) {\r\n\t\tvar r = new RegExp( qu.operands[0], qu.options );\r\n\t\treturn r.test( value );\r\n\t},\r\n\t/**\r\n\t * This is like $all except that it works with an array of objects or value. It checks to see the array matches all\r\n\t * of the conditions of the query\r\n\t * `{array: {$elemMatch: {path: value, path: {$operation: value2}}}`\r\n     * @name $elemMatch\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {attr : {$elemMatch : [\r\n     *  {color : \"red\", \"hand\" : \"left\"}\r\n     * ]}} );\r\n\t */\r\n\t$elemMatch : function ( qu, value ) {\r\n\t\tvar expression, test, _i, _len;\r\n\r\n\t\tif ( sys.isArray( value ) ) {\r\n\t\t\tvar _ref = qu.operands;\r\n\t\t\tfor ( _i = 0, _len = _ref.length; _i &lt; _len; _i++ ) {\r\n\t\t\t\texpression = _ref[_i];\r\n\t\t\t\tif ( expression.path ) {\r\n\t\t\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttest = execQuery( value, qu.operands, null, true ).arrayResults;\r\n\t\t}\r\n\t\treturn test.length > 0;\r\n\t},\r\n\t/**\r\n\t * Returns true if all of the conditions of the query are met\r\n\t * `{$and: [query1, query2, query3]}`\r\n\t * @name $and\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {$and : [\r\n     *      {\"name.first\" : \"Mildred\"},\r\n     *      {\"name.last\" : \"Graves\"}\r\n     * ]} );\r\n\t */\r\n\r\n\t$and       : function ( qu, value, record ) {\r\n\t\tvar isAnd = false;\r\n\r\n\t\tsys.each( qu.operands, function ( expr ) {\r\n\t\t\tif ( expr.path ) {\r\n\t\t\t\texpr.splitPath = expr.splitPath || splitPath( expr.path );\r\n\t\t\t}\r\n\t\t\tvar test = reachin( expr.splitPath, record, expr.operation );\r\n\t\t\tisAnd = operations[expr.operation]( expr, test, record );\r\n\t\t\tif ( !isAnd ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\treturn isAnd;\r\n\t},\r\n\t/**\r\n\t * Returns true if any of the conditions of the query are met\r\n\t * `{$or: [query1, query2, query3]}`\r\n\t * @name $or\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {$or : [\r\n     *      \"age\" : {$in : [24, 28, 60]}},\r\n\t *      {categories : \"cat1\"}\r\n\t * ]} );\r\n\t */\r\n\t$or        : function ( qu, value, record ) {\r\n\t\tvar isOr = false;\r\n\t\tsys.each( qu.operands, function ( expr ) {\r\n\t\t\tif ( expr.path ) {\r\n\t\t\t\texpr.splitPath = expr.splitPath || splitPath( expr.path );\r\n\t\t\t}\r\n\t\t\tvar test = reachin( expr.splitPath, record, expr.operation );\r\n\t\t\tisOr = operations[expr.operation]( expr, test, record );\r\n\t\t\tif ( isOr ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\treturn isOr;\r\n\t},\r\n\t/**\r\n\t * Returns true if none of the conditions of the query are met\r\n\t * `{$nor: [query1, query2, query3]}`\r\n\t * @name $nor\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {$nor : [\r\n     *      {\"age\" : {$in : [24, 28, 60]}},\r\n     *      {categories : \"cat1\"}\r\n     * ]} );\r\n\t */\r\n\t$nor       : function ( qu, value, record ) {\r\n\t\tvar isOr = false;\r\n\t\tsys.each( qu.operands, function ( expr ) {\r\n\t\t\tif ( expr.path ) {\r\n\t\t\t\texpr.splitPath = expr.splitPath || splitPath( expr.path );\r\n\t\t\t}\r\n\t\t\tvar test = reachin( expr.splitPath, record, expr.operation );\r\n\t\t\tisOr = operations[expr.operation]( expr, test, record );\r\n\t\t\tif ( isOr ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\treturn !isOr;\r\n\t},\r\n\t/**\r\n\t * Logical NOT on the conditions of the query\r\n\t * `{$not: [query1, query2, query3]}`\r\n\t * @name $not\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {$not : {\"age\" : {$lt : 24}}} );\r\n\t */\r\n\t$not       : function ( qu, value, record ) {\r\n\r\n\t\tvar result = false;\r\n\t\tsys.each( qu.operands, function ( expr ) {\r\n\t\t\tif ( expr.path ) {\r\n\t\t\t\texpr.splitPath = expr.splitPath || splitPath( expr.path );\r\n\t\t\t}\r\n\t\t\tvar test = reachin( expr.splitPath, record, expr.operation );\r\n\t\t\tresult = operations[expr.operation]( expr, test, record );\r\n\t\t\tif ( result ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\treturn !result;\r\n\r\n\t}\r\n};\r\n\r\n/**\r\n Executes a query by traversing a document and evaluating each record\r\n @private\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute\r\n @param {?boolean} shortCircuit When true, the condition that matches the query stops evaluation for that record, otherwise all conditions have to be met\r\n @param {?boolean} stopOnFirst When true all evaluation stops after the first record is found to match the conditons\r\n **/\r\nfunction execQuery( obj, qu, shortCircuit, stopOnFirst ) {\r\n\tvar arrayResults = [];\r\n\tvar keyResults = [];\r\n\tsys.each( obj, function ( record, key ) {\r\n\t\tvar expr, result, test, _i, _len;\r\n\r\n\t\tfor ( _i = 0, _len = qu.length; _i &lt; _len; _i++ ) {\r\n\t\t\texpr = qu[_i];\r\n\t\t\tif ( expr.splitPath ) {\r\n\t\t\t\ttest = reachin( expr.splitPath, record, expr.operation );\r\n\t\t\t}\r\n\t\t\tresult = operations[expr.operation]( expr, test, record );\r\n\t\t\tif ( result ) {\r\n\t\t\t\tarrayResults.push( record );\r\n\t\t\t\tkeyResults.push( key );\r\n\t\t\t}\r\n\t\t\tif ( !result &amp;&amp; shortCircuit ) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( arrayResults.length > 0 &amp;&amp; stopOnFirst ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t} );\r\n\treturn {\r\n\t\tarrayResults : arrayResults,\r\n\t\tkeyResults   : keyResults\r\n\t};\r\n}\r\n\r\n/**\r\n Updates all records in obj that match the query. See {@link module:documents/probe.updateOperators} for the operators that are supported.\r\n @param {object|array} obj The object to update\r\n @param {object} qu The query which will be used to identify the records to updated\r\n @param {object} setDocument The update operator. See {@link module:documents/probe.updateOperators}\r\n */\r\nexports.update = function ( obj, qu, setDocument ) {\r\n\tvar records = exports.find( obj, qu );\r\n\treturn sys.each( records, function ( record ) {\r\n\t\treturn sys.each( setDocument, function ( fields, operator ) {\r\n\t\t\treturn sys.each( fields, function ( newValue, path ) {\r\n\t\t\t\treturn pushin( splitPath( path ), record, operator, newValue );\r\n\t\t\t} );\r\n\t\t} );\r\n\t} );\r\n};\r\n/**\r\n Find all records that match a query\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @returns {array} The results\r\n **/\r\nexports.find = function ( obj, qu ) {\r\n\tvar expression, _i, _len;\r\n\r\n\tvar query = parseQueryExpression( qu );\r\n\tfor ( _i = 0, _len = query.length; _i &lt; _len; _i++ ) {\r\n\t\texpression = query[_i];\r\n\t\tif ( expression.path ) {\r\n\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t}\r\n\t}\r\n\treturn execQuery( obj, query ).arrayResults;\r\n};\r\n/**\r\n Find all records that match a query and returns the keys for those items. This is similar to {@link module:documents/probe.find} but instead of returning\r\n records, returns the keys. If `obj` is an object it will return the hash key. If 'obj' is an array, it will return the index\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @returns {array}\r\n */\r\nexports.findKeys = function ( obj, qu ) {\r\n\tvar expression, _i, _len;\r\n\r\n\tvar query = parseQueryExpression( qu );\r\n\tfor ( _i = 0, _len = query.length; _i &lt; _len; _i++ ) {\r\n\t\texpression = query[_i];\r\n\t\tif ( expression.path ) {\r\n\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t}\r\n\t}\r\n\treturn execQuery( obj, query ).keyResults;\r\n};\r\n\r\n/**\r\n Returns the first record that matches the query. Aliased as `seek`.\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @returns {object}\r\n */\r\nexports.findOne = function ( obj, qu ) {\r\n\tvar expression, _i, _len;\r\n\r\n\tvar query = parseQueryExpression( qu );\r\n\tfor ( _i = 0, _len = query.length; _i &lt; _len; _i++ ) {\r\n\t\texpression = query[_i];\r\n\t\tif ( expression.path ) {\r\n\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t}\r\n\t}\r\n\tvar results = execQuery( obj, query, false, true ).arrayResults;\r\n\tif ( results.length > 0 ) {\r\n\t\treturn results[0];\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n};\r\nexports.seek = exports.findOne;\r\n/**\r\n Returns the first record that matches the query and returns its key or index depending on whether `obj` is an object or array respectively.\r\n Aliased as `seekKey`.\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @returns {object}\r\n */\r\nexports.findOneKey = function ( obj, qu ) {\r\n\tvar expression, _i, _len;\r\n\r\n\tvar query = parseQueryExpression( qu );\r\n\tfor ( _i = 0, _len = query.length; _i &lt; _len; _i++ ) {\r\n\t\texpression = query[_i];\r\n\t\tif ( expression.path ) {\r\n\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t}\r\n\t}\r\n\tvar results = execQuery( obj, query, false, true ).keyResults;\r\n\tif ( results.length > 0 ) {\r\n\t\treturn results[0];\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n};\r\nexports.seekKey = exports.findOneKey;\r\n\r\n/**\r\n Remove all items in the object/array that match the query\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @return {object|array} The array or object as appropriate without the records.\r\n **/\r\nexports.remove = function ( obj, qu ) {\r\n\tvar expression, _i, _len;\r\n\r\n\tvar query = parseQueryExpression( qu );\r\n\tfor ( _i = 0, _len = query.length; _i &lt; _len; _i++ ) {\r\n\t\texpression = query[_i];\r\n\t\tif ( expression.path ) {\r\n\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t}\r\n\t}\r\n\tvar results = execQuery( obj, query, false, false ).keyResults;\r\n\tif ( sys.isArray( obj ) ) {\r\n\t\tvar newArr = [];\r\n\t\tsys.each( obj, function ( item, index ) {\r\n\t\t\tif ( sys.indexOf( results, index ) === -1 ) {\r\n\t\t\t\treturn newArr.push( item );\r\n\t\t\t}\r\n\t\t} );\r\n\t\treturn newArr;\r\n\t} else {\r\n\t\tsys.each( results, function ( key ) {\r\n\t\t\treturn delete obj[key];\r\n\t\t} );\r\n\t\treturn obj;\r\n\t}\r\n};\r\n/**\r\n Returns true if all items match the query\r\n\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @returns {boolean}\r\n **/\r\nexports.all = function ( obj, qu ) {\r\n\treturn exports.find( obj, qu ).length === sys.size( obj );\r\n};\r\n\r\n/**\r\n Returns true if any of the items match the query\r\n\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @returns {boolean}\r\n **/\r\nexports.any = function ( obj, qu ) {\r\n\tvar expression, _i, _len;\r\n\r\n\tvar query = parseQueryExpression( qu );\r\n\tfor ( _i = 0, _len = query.length; _i &lt; _len; _i++ ) {\r\n\t\texpression = query[_i];\r\n\t\tif ( expression.path ) {\r\n\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t}\r\n\t}\r\n\tvar results = execQuery( obj, query, true, true ).keyResults;\r\n\treturn results.length > 0;\r\n};\r\n\r\n/**\r\n Returns the set of unique records that match a query\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @return {array}\r\n **/\r\nexports.unique = function ( obj, qu ) {\r\n\tvar test = exports.find( obj, qu );\r\n\treturn sys.unique( test, function ( item ) {\r\n\t\treturn JSON.stringify( item );\r\n\t} );\r\n};\r\n\r\n/**\r\n This will write the value into a record at the path, creating intervening objects if they don't exist. This does not work as filtered\r\n update and is meant to be used on a single record. It is a nice way of setting a property at an arbitrary depth at will.\r\n\r\n @param {array} path The split path of the element to work with\r\n @param {object} record The record to reach into\r\n @param {string} setter The set operation.  See {@link module:documents/probe.updateOperators} for the operators you can use.\r\n @param {object} newValue The value to write to the, or if the operator is $pull, the query of items to look for\r\n */\r\nexports.set = function ( record, path, setter, newValue ) {\r\n\treturn pushin( splitPath( path ), record, setter, newValue );\r\n};\r\n\r\n/**\r\n Reaches into an object and allows you to get at a value deeply nested in an object. This is not a query, but a\r\n straight reach in, useful for event bindings\r\n\r\n @param {array} path The split path of the element to work with\r\n @param {object} record The record to reach into\r\n @return {*} Whatever was found in the record\r\n **/\r\nexports.get = function ( record, path ) {\r\n\treturn reachin( splitPath( path ), record );\r\n};\r\n\r\n/**\r\n Returns true if any of the items match the query. Aliases as `any`\r\n @function\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute\r\n @returns {boolean}\r\n */\r\nexports.some = exports.any;\r\n\r\n/**\r\n Returns true if all items match the query. Aliases as `all`\r\n @function\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute\r\n @returns {boolean}\r\n */\r\nexports.every = exports.all;\r\n\r\nvar bindables = {\r\n\tany        : exports.any,\r\n\tall        : exports.all,\r\n\tremove     : exports.remove,\r\n\tseekKey    : exports.seekKey,\r\n\tseek       : exports.seek,\r\n\tfindOneKey : exports.findOneKey,\r\n\tfindOne    : exports.findOne,\r\n\tfindKeys   : exports.findKeys,\r\n\tfind       : exports.find,\r\n\tupdate     : exports.update,\r\n\tsome       : exports.some,\r\n\tevery      : exports.every,\r\n\t\"get\"      : exports.get,\r\n\t\"set\"      : exports.set\r\n};\r\n\r\n/**\r\n Binds the query and update methods to a new object. When called these\r\n methods can skip the first parameter so that find(object, query) can just be called as find(query)\r\n @param {object|array} obj The object or array to bind to\r\n @return {object} An object with method bindings in place\r\n **/\r\nexports.proxy = function ( obj ) {\r\n\tvar retVal;\r\n\r\n\tretVal = {};\r\n\tsys.each( bindables, function ( val, key ) {\r\n\t\tretVal[key] = sys.bind( val, obj, obj );\r\n\t} );\r\n\treturn retVal;\r\n};\r\n\r\n/**\r\n Binds the query and update methods to a specific object and adds the methods to that object. When called these\r\n methods can skip the first parameter so that find(object, query) can just be called as object.find(query)\r\n @param {object|array} obj The object or array to bind to\r\n @param {object|array=} collection If the collection is not the same as &lt;code>this&lt;/code> but is a property, or even\r\n a whole other object, you specify that here. Otherwise the &lt;code>obj&lt;/code> is assumed to be the same as the collecion\r\n **/\r\nexports.mixin = function ( obj, collection ) {\r\n\tcollection = collection || obj;\r\n\treturn sys.each( bindables, function ( val, key ) {\r\n\t\tobj[key] = sys.bind( val, obj, collection );\r\n\t} );\r\n};\r\n\r\n/**\r\n * These are the supported query operators\r\n *\r\n * @memberOf module:documents/probe\r\n * @name queryOperators\r\n * @class This is not actually a class, but an artifact of the documentation system\r\n */\r\n\r\n/**\r\n * These are the supported update operators\r\n *\r\n * @memberOf module:documents/probe\r\n * @name updateOperators\r\n * @class This is not actually a class, but an artifact of the documentation system\r\n */\r\n"}],"content":"\r\n\r\n\r\n\r\n    \r\n    <section>\r\n        <article>\r\n            <pre class=\"prettyprint source linenums\"><code>\"use strict\";\r\n/**\r\n @fileOverview Queries objects in memory using a mongo-like notation for reaching into objects and filtering for records\r\n\r\n @module documents/probe\r\n @author Terry Weiss\r\n @license MIT\r\n @requires lodash\r\n */\r\n\r\nvar sys = require( \"lodash\" );\r\n/**\r\n The list of operators that are nested within the expression object. These take the form &lt;code>{path:{operator:operand}}&lt;/code>\r\n @private\r\n @type {array.&lt;string>}\r\n **/\r\nvar nestedOps = [\"$eq\", \"$gt\", \"$gte\", \"$in\", \"$lt\", \"$lte\", \"$ne\", \"$nin\", \"$exists\", \"$mod\", \"$size\", \"$all\"];\r\n\r\n/**\r\n The list of operators that prefix the expression object. These take the form &lt;code>{operator:{operands}}&lt;/code> or &lt;code>{operator: [operands]}&lt;/code>\r\n @private\r\n @type {array.&lt;string>}\r\n **/\r\nvar prefixOps = [\"$and\", \"$or\", \"$nor\", \"$not\"];\r\n\r\n/**\r\n Processes a nested operator by picking the operator out of the expression object. Returns a formatted object that can be used for querying\r\n @private\r\n @param {string} path The path to element to work with\r\n @param {object} operand The operands to use for the query\r\n @return {object} A formatted operation definition\r\n **/\r\nfunction processNestedOperator( path, operand ) {\r\n\tvar opKeys = Object.keys( operand );\r\n\treturn {\r\n\t\toperation : opKeys[ 0 ],\r\n\t\toperands  : [operand[ opKeys[ 0 ] ]],\r\n\t\tpath      : path\r\n\t};\r\n}\r\n\r\n/**\r\n Interrogates a single query expression object and calls the appropriate handler for its contents\r\n @private\r\n @param {object} val The expression\r\n @param {object} key The prefix\r\n @returns {object} A formatted operation definition\r\n **/\r\nfunction processExpressionObject( val, key ) {\r\n\tvar operator;\r\n\tif ( sys.isObject( val ) ) {\r\n\t\tvar opKeys = Object.keys( val );\r\n\t\tvar op = opKeys[ 0 ];\r\n\r\n\t\tif ( sys.indexOf( nestedOps, op ) > -1 ) {\r\n\t\t\toperator = processNestedOperator( key, val );\r\n\t\t} else if ( sys.indexOf( prefixOps, key ) > -1 ) {\r\n\t\t\toperator = processPrefixOperator( key, val );\r\n\t\t} else if ( op === \"$regex\" ) {\r\n\t\t\t// special handling for regex options\r\n\t\t\toperator = processNestedOperator( key, val );\r\n\t\t} else if ( op === \"$elemMatch\" ) {\r\n\t\t\t// elemMatch is just a weird duck\r\n\t\t\toperator = {\r\n\t\t\t\tpath      : key,\r\n\t\t\t\toperation : op,\r\n\t\t\t\toperands  : []\r\n\t\t\t};\r\n\t\t\tsys.each( val[ op ], function ( entry ) {\r\n\t\t\t\toperator.operands = parseQueryExpression( entry );\r\n\t\t\t} );\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow new Error( \"Unrecognized operator\" );\r\n\t\t}\r\n\t} else {\r\n\t\toperator = processNestedOperator( key, { $eq : val } );\r\n\t}\r\n\treturn operator;\r\n}\r\n\r\n/**\r\n Processes a prefixed operator and then passes control to the nested operator method to pick out the contained values\r\n @private\r\n @param {string} operation The operation prefix\r\n @param {object} operand The operands to use for the query\r\n @return {object} A formatted operation definition\r\n **/\r\nfunction processPrefixOperator( operation, operand ) {\r\n\tvar component = {\r\n\t\toperation : operation,\r\n\t\tpath      : null,\r\n\t\toperands  : []\r\n\t};\r\n\r\n\tif ( sys.isArray( operand ) ) {\r\n\t\t//if it is an array we need to loop through the array and parse each operand\r\n\t\t//if it is an array we need to loop through the array and parse each operand\r\n\t\tsys.each( operand, function ( obj ) {\r\n\t\t\tsys.each( obj, function ( val, key ) {\r\n\t\t\t\tcomponent.operands.push( processExpressionObject( val, key ) );\r\n\t\t\t} );\r\n\t\t} );\r\n\t} else {\r\n\t\t//otherwise it is an object and we can parse it directly\r\n\t\tsys.each( operand, function ( val, key ) {\r\n\t\t\tcomponent.operands.push( processExpressionObject( val, key ) );\r\n\t\t} );\r\n\t}\r\n\treturn component;\r\n\r\n}\r\n\r\n/**\r\n Parses a query request and builds an object that can used to process a query target\r\n @private\r\n @param {object} obj The expression object\r\n @returns {object} All components of the expression in a kind of execution tree\r\n **/\r\n\r\nfunction parseQueryExpression( obj ) {\r\n\tif ( sys.size( obj ) > 1 ) {\r\n\t\tvar arr = sys.map( obj, function ( v, k ) {\r\n\t\t\tvar entry = {};\r\n\t\t\tentry[k] = v;\r\n\t\t\treturn entry;\r\n\t\t} );\r\n\t\tobj = {\r\n\t\t\t$and : arr\r\n\t\t};\r\n\t}\r\n\tvar payload = [];\r\n\tsys.each( obj, function ( val, key ) {\r\n\r\n\t\tvar exprObj = processExpressionObject( val, key );\r\n\r\n\t\tif ( exprObj.operation === \"$regex\" ) {\r\n\t\t\texprObj.options = val.$options;\r\n\t\t}\r\n\r\n\t\tpayload.push( exprObj );\r\n\t} );\r\n\r\n\treturn payload;\r\n}\r\n\r\n/**\r\n The delimiter to use when splitting an expression\r\n @type {string}\r\n @static\r\n @default '.'\r\n **/\r\n\r\nexports.delimiter = '.';\r\n\r\n/**\r\n Splits a path expression into its component parts\r\n @private\r\n @param {string} path The path to split\r\n @returns {array}\r\n **/\r\n\r\nfunction splitPath( path ) {\r\n\treturn path.split( exports.delimiter );\r\n}\r\n\r\n/**\r\n Reaches into an object and allows you to get at a value deeply nested in an object\r\n @private\r\n @param {array} path The split path of the element to work with\r\n @param {object} record The record to reach into\r\n @return {*} Whatever was found in the record\r\n **/\r\nfunction reachin( path, record ) {\r\n\tvar context = record;\r\n\tvar part;\r\n\tvar _i;\r\n\tvar _len;\r\n\r\n\tfor ( _i = 0, _len = path.length; _i &lt; _len; _i++ ) {\r\n\t\tpart = path[_i];\r\n\t\tcontext = context[part];\r\n\t\tif ( sys.isNull( context ) || sys.isUndefined( context ) ) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn context;\r\n}\r\n\r\n/**\r\n This will write the value into a record at the path, creating intervening objects if they don't exist\r\n @private\r\n @param {array} path The split path of the element to work with\r\n @param {object} record The record to reach into\r\n @param {string} setter The set command, defaults to $set\r\n @param {object} newValue The value to write to the, or if the operator is $pull, the query of items to look for\r\n */\r\nfunction pushin( path, record, setter, newValue ) {\r\n\tvar context = record;\r\n\tvar parent = record;\r\n\tvar lastPart = null;\r\n\tvar _i;\r\n\tvar _len;\r\n\tvar part;\r\n\tvar keys;\r\n\r\n\tfor ( _i = 0, _len = path.length; _i &lt; _len; _i++ ) {\r\n\t\tpart = path[_i];\r\n\t\tlastPart = part;\r\n\t\tparent = context;\r\n\t\tcontext = context[part];\r\n\t\tif ( sys.isNull( context ) || sys.isUndefined( context ) ) {\r\n\t\t\tparent[part] = {};\r\n\t\t\tcontext = parent[part];\r\n\t\t}\r\n\t}\r\n\r\n\tif ( sys.isEmpty( setter ) || setter === '$set' ) {\r\n\t\tparent[lastPart] = newValue;\r\n\t\treturn parent[lastPart];\r\n\t} else {\r\n\t\tswitch ( setter ) {\r\n\t\t\tcase '$inc':\r\n\t\t\t\t/**\r\n\t\t\t\t * Increments a field by the amount you specify. It takes the form\r\n\t\t\t\t * `{ $inc: { field1: amount } }`\r\n\t\t\t\t * @name $inc\r\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\r\n\t\t\t\t * @example\r\n\t\t\t\t * var probe = require(\"documents/probe\");\r\n\t\t\t\t * probe.update( obj, {'name.last' : 'Owen', 'name.first' : 'LeRoy'},\r\n\t\t\t\t * {$inc : {'password.changes' : 2}} );\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif ( !sys.isNumber( newValue ) ) {\r\n\t\t\t\t\tnewValue = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif ( sys.isNumber( parent[lastPart] ) ) {\r\n\t\t\t\t\tparent[lastPart] = parent[lastPart] + newValue;\r\n\t\t\t\t\treturn parent[lastPart];\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase '$dec':\r\n\t\t\t\t/**\r\n\t\t\t\t * Decrements a field by the amount you specify. It takes the form\r\n\t\t\t\t * `{ $dec: { field1: amount }`\r\n                 * @name $dec\r\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\r\n\t\t\t\t * @example\r\n\t\t\t\t *  var probe = require(\"documents/probe\");\r\n\t\t\t\t * probe.update( obj, {'name.last' : 'Owen', 'name.first' : 'LeRoy'},\r\n\t\t\t\t * {$dec : {'password.changes' : 2}} );\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif ( !sys.isNumber( newValue ) ) {\r\n\t\t\t\t\tnewValue = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif ( sys.isNumber( parent[lastPart] ) ) {\r\n\t\t\t\t\tparent[lastPart] = parent[lastPart] - newValue;\r\n\t\t\t\t\treturn parent[lastPart];\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase '$unset':\r\n\t\t\t\t/**\r\n\t\t\t\t * Removes the field from the object. It takes the form\r\n\t\t\t\t * `{ $unset: { field1: \"\" } }`\r\n\t\t\t\t * @name $unset\r\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\r\n\t\t\t\t * @example\r\n\t\t\t\t * var probe = require(\"documents/probe\");\r\n\t\t\t\t * probe.update( data, {'name.first' : 'Yogi'}, {$unset : {'name.first' : ''}} );\r\n\t\t\t\t */\r\n\r\n\t\t\t\treturn delete parent[lastPart];\r\n\t\t\tcase '$pop':\r\n\t\t\t\t/**\r\n\t\t\t\t * The $pop operator removes the first or last element of an array. Pass $pop a value of 1 to remove the last element\r\n\t\t\t\t * in an array and a value of -1 to remove the first element of an array. This will only work on arrays. Syntax:\r\n\t\t\t\t * `{ $pop: { field: 1 } }` or `{ $pop: { field: -1 } }`\r\n\t\t\t\t * @name $pop\r\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\r\n\t\t\t\t * @example\r\n\t\t\t\t * var probe = require(\"documents/probe\");\r\n\t\t\t\t * // attr is the name of the array field\r\n\t\t\t\t * probe.update( data, {_id : '511d18827da2b88b09000133'}, {$pop : {attr : 1}} );\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif ( sys.isArray( parent[lastPart] ) ) {\r\n\t\t\t\t\tif ( !sys.isNumber( newValue ) ) {\r\n\t\t\t\t\t\tnewValue = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( newValue === 1 ) {\r\n\t\t\t\t\t\treturn parent[lastPart].pop();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn parent[lastPart].shift();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase '$push':\r\n\t\t\t\t/**\r\n\t\t\t\t * The $push operator appends a specified value to an array. It looks like this:\r\n\t\t\t\t * `{ $push: { &lt;field>: &lt;value> } }`\r\n\t\t\t\t * @name $push\r\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\r\n\t\t\t\t * @example\r\n\t\t\t\t * var probe = require(\"documents/probe\");\r\n\t\t\t\t * // attr is the name of the array field\r\n\t\t\t\t * probe.update( data, {_id : '511d18827da2b88b09000133'},\r\n\t\t\t\t * {$push : {attr : {\"hand\" : \"new\", \"color\" : \"new\"}}} );\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif ( sys.isArray( parent[lastPart] ) ) {\r\n\t\t\t\t\treturn parent[lastPart].push( newValue );\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase '$pull':\r\n\t\t\t\t/**\r\n\t\t\t\t * The $pull operator removes all instances of a value from an existing array. It looks like this:\r\n\t\t\t\t * `{ $pull: { field: &lt;query> } }`\r\n\t\t\t\t * @name $pull\r\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\r\n\t\t\t\t * @example\r\n\t\t\t\t * var probe = require(\"documents/probe\");\r\n\t\t\t\t * // attr is the name of the array field\r\n\t\t\t\t * probe.update( data, {'email' : 'EWallace.43@fauxprisons.com'},\r\n\t\t\t\t * {$pull : {attr : {\"color\" : \"green\"}}} );\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif ( sys.isArray( parent[lastPart] ) ) {\r\n\t\t\t\t\tkeys = exports.findKeys( parent[lastPart], newValue );\r\n\t\t\t\t\tsys.each( keys, function ( val, index ) {\r\n\t\t\t\t\t\treturn delete parent[lastPart][index];\r\n\t\t\t\t\t} );\r\n\t\t\t\t\tparent[lastPart] = sys.compact( parent[lastPart] );\r\n\t\t\t\t\treturn parent[lastPart];\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n The query operations that evaluate directly from an operation\r\n @private\r\n **/\r\nvar operations = {\r\n\t/**\r\n\t * `$eq` performs a `===` comparison by comparing the value directly if it is an atomic value.\r\n\t * otherwise if it is an array, it checks to see if the value looked for is in the array.\r\n\t * `{field: value}` or `{field: {$eq : value}}` or `{array: value}` or `{array: {$eq : value}}`\r\n\t * @name $eq\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {categories : \"cat1\"} );\r\n\t * // is the same as\r\n\t * probe.find( data, {categories : {$eq: \"cat1\"}} );\r\n\t */\r\n\r\n\t$eq        : function ( qu, value ) {\r\n\t\tif ( sys.isArray( value ) ) {\r\n\t\t\treturn sys.find( value, function ( entry ) {\r\n\t\t\t\treturn JSON.stringify( qu.operands[0] ) === JSON.stringify( entry );\r\n\t\t\t} ) !== void 0;\r\n\t\t} else {\r\n\t\t\treturn JSON.stringify( qu.operands[0] ) === JSON.stringify( value );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t *  `$ne` performs a `!==` comparison by comparing the value directly if it is an atomic value. Otherwise, if it is an array\r\n\t * this is performs a \"not in array\".\r\n\t * '{field: {$ne : value}}` or '{array: {$ne : value}}`\r\n\t * @name $ne\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"name.first\" : {$ne : \"Sheryl\"}} );\r\n\t */\r\n\r\n\t$ne        : function ( qu, value ) {\r\n\t\tif ( sys.isArray( value ) ) {\r\n\t\t\treturn sys.find( value, function ( entry ) {\r\n\t\t\t\treturn JSON.stringify( qu.operands[0] ) !== JSON.stringify( entry );\r\n\t\t\t} ) !== void 0;\r\n\t\t} else {\r\n\t\t\treturn JSON.stringify( qu.operands[0] ) !== JSON.stringify( value );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * `$all` checks to see if all of the members of the query are included in an array\r\n\t * `{array: {$all: [val1, val2, val3]}}`\r\n\t * @name $all\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"categories\" : {$all : [\"cat4\", \"cat2\", \"cat1\"]}} );\r\n\t */\r\n\r\n\t$all       : function ( qu, value ) {\r\n\t\tvar operands, result;\r\n\r\n\t\tresult = false;\r\n\t\tif ( sys.isArray( value ) ) {\r\n\t\t\toperands = sys.flatten( qu.operands );\r\n\t\t\tresult = sys.intersection( operands, value ).length === operands.length;\r\n\t\t}\r\n\t\treturn result;\r\n\t},\r\n\t/**\r\n\t * `$gt` Sees if a field is greater than the value\r\n\t * `{field: {$gt: value}}`\r\n\t * @name $gt\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$gt : 24}} );\r\n\t */\r\n\r\n\t$gt        : function ( qu, value ) {\r\n\t\treturn qu.operands[0] &lt; value;\r\n\t},\r\n\t/**\r\n\t * `$gte` Sees if a field is greater than or equal to the value\r\n\t * `{field: {$gte: value}}`\r\n\t * @name $gte\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$gte : 50}} );\r\n\t */\r\n\r\n\t$gte       : function ( qu, value ) {\r\n\t\treturn qu.operands[0] &lt;= value;\r\n\t},\r\n\t/**\r\n\t * `$lt` Sees if a field is less than the value\r\n\t * `{field: {$lt: value}}`\r\n\t * @name $lt\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$lt : 24}} );\r\n\t */\r\n\r\n\t$lt        : function ( qu, value ) {\r\n\t\treturn qu.operands[0] > value;\r\n\t},\r\n\t/**\r\n\t * `$lte` Sees if a field is less than or equal to the value\r\n\t * `{field: {$lte: value}}`\r\n\t * @name $lte\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$lte : 50}} );\r\n\t */\r\n\r\n\t$lte       : function ( qu, value ) {\r\n\t\treturn qu.operands[0] >= value;\r\n\t},\r\n\t/**\r\n\t * `$in` Sees if a field has one of the values in the query\r\n\t * `{field: {$in: [test1, test2, test3,...]}}`\r\n\t * @name $in\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$in : [24, 28, 60]}} );\r\n\t */\r\n\r\n\t$in        : function ( qu, value ) {\r\n\t\tvar operands;\r\n\r\n\t\toperands = sys.flatten( qu.operands );\r\n\t\treturn sys.indexOf( operands, value ) > -1;\r\n\t},\r\n\t/**\r\n\t * `$nin` Sees if a field has none of the values in the query\r\n\t * `{field: {$nin: [test1, test2, test3,...]}}`\r\n\t * @name $nin\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$nin : [24, 28, 60]}} );\r\n\t */\r\n\r\n\t$nin       : function ( qu, value ) {\r\n\t\tvar operands;\r\n\r\n\t\toperands = sys.flatten( qu.operands );\r\n\t\treturn sys.indexOf( operands, value ) === -1;\r\n\t},\r\n\t/**\r\n\t * `$exists` Sees if a field exists.\r\n\t * `{field: {$exists: true|false}}`\r\n\t * @name $exists\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"name.middle\" : {$exists : true}} );\r\n\t */\r\n\r\n\t$exists    : function ( qu, value ) {\r\n\t\treturn (sys.isNull( value ) || sys.isUndefined( value )) !== qu.operands[0];\r\n\t},\r\n\t/**\r\n\t * Checks equality to a modulus operation on a field\r\n\t * `{field: {$mod: [divisor, remainder]}}`\r\n\t * @name $mod\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"age\" : {$mod : [2, 0]}} );\r\n\t */\r\n\r\n\t$mod       : function ( qu, value ) {\r\n\t\tvar operands = sys.flatten( qu.operands );\r\n\t\tif ( operands.length !== 2 ) {\r\n\t\t\tthrow new Error( \"$mod requires two operands\" );\r\n\t\t}\r\n\t\tvar mod = operands[0];\r\n\t\tvar rem = operands[1];\r\n\t\treturn value % mod === rem;\r\n\t},\r\n\t/**\r\n\t * Compares the size of the field/array to the query. This can be used on arrays, strings and objects (where it will count keys)\r\n\t * `{'field|array`: {$size: value}}`\r\n\t * @name $size\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {attr : {$size : 3}} );\r\n\t */\r\n\r\n\t$size      : function ( qu, value ) {\r\n\t\treturn sys.size( value ) === qu.operands[0];\r\n\t},\r\n\t/**\r\n\t * Performs a regular expression test againts the field\r\n\t * `{field: {$regex: re, $options: reOptions}}`\r\n\t * @name $regex\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {\"name.first\" : {$regex : \"m*\", $options : \"i\"}} );\r\n\t */\r\n\r\n\t$regex     : function ( qu, value ) {\r\n\t\tvar r = new RegExp( qu.operands[0], qu.options );\r\n\t\treturn r.test( value );\r\n\t},\r\n\t/**\r\n\t * This is like $all except that it works with an array of objects or value. It checks to see the array matches all\r\n\t * of the conditions of the query\r\n\t * `{array: {$elemMatch: {path: value, path: {$operation: value2}}}`\r\n     * @name $elemMatch\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {attr : {$elemMatch : [\r\n     *  {color : \"red\", \"hand\" : \"left\"}\r\n     * ]}} );\r\n\t */\r\n\t$elemMatch : function ( qu, value ) {\r\n\t\tvar expression, test, _i, _len;\r\n\r\n\t\tif ( sys.isArray( value ) ) {\r\n\t\t\tvar _ref = qu.operands;\r\n\t\t\tfor ( _i = 0, _len = _ref.length; _i &lt; _len; _i++ ) {\r\n\t\t\t\texpression = _ref[_i];\r\n\t\t\t\tif ( expression.path ) {\r\n\t\t\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttest = execQuery( value, qu.operands, null, true ).arrayResults;\r\n\t\t}\r\n\t\treturn test.length > 0;\r\n\t},\r\n\t/**\r\n\t * Returns true if all of the conditions of the query are met\r\n\t * `{$and: [query1, query2, query3]}`\r\n\t * @name $and\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {$and : [\r\n     *      {\"name.first\" : \"Mildred\"},\r\n     *      {\"name.last\" : \"Graves\"}\r\n     * ]} );\r\n\t */\r\n\r\n\t$and       : function ( qu, value, record ) {\r\n\t\tvar isAnd = false;\r\n\r\n\t\tsys.each( qu.operands, function ( expr ) {\r\n\t\t\tif ( expr.path ) {\r\n\t\t\t\texpr.splitPath = expr.splitPath || splitPath( expr.path );\r\n\t\t\t}\r\n\t\t\tvar test = reachin( expr.splitPath, record, expr.operation );\r\n\t\t\tisAnd = operations[expr.operation]( expr, test, record );\r\n\t\t\tif ( !isAnd ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\treturn isAnd;\r\n\t},\r\n\t/**\r\n\t * Returns true if any of the conditions of the query are met\r\n\t * `{$or: [query1, query2, query3]}`\r\n\t * @name $or\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {$or : [\r\n     *      \"age\" : {$in : [24, 28, 60]}},\r\n\t *      {categories : \"cat1\"}\r\n\t * ]} );\r\n\t */\r\n\t$or        : function ( qu, value, record ) {\r\n\t\tvar isOr = false;\r\n\t\tsys.each( qu.operands, function ( expr ) {\r\n\t\t\tif ( expr.path ) {\r\n\t\t\t\texpr.splitPath = expr.splitPath || splitPath( expr.path );\r\n\t\t\t}\r\n\t\t\tvar test = reachin( expr.splitPath, record, expr.operation );\r\n\t\t\tisOr = operations[expr.operation]( expr, test, record );\r\n\t\t\tif ( isOr ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\treturn isOr;\r\n\t},\r\n\t/**\r\n\t * Returns true if none of the conditions of the query are met\r\n\t * `{$nor: [query1, query2, query3]}`\r\n\t * @name $nor\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {$nor : [\r\n     *      {\"age\" : {$in : [24, 28, 60]}},\r\n     *      {categories : \"cat1\"}\r\n     * ]} );\r\n\t */\r\n\t$nor       : function ( qu, value, record ) {\r\n\t\tvar isOr = false;\r\n\t\tsys.each( qu.operands, function ( expr ) {\r\n\t\t\tif ( expr.path ) {\r\n\t\t\t\texpr.splitPath = expr.splitPath || splitPath( expr.path );\r\n\t\t\t}\r\n\t\t\tvar test = reachin( expr.splitPath, record, expr.operation );\r\n\t\t\tisOr = operations[expr.operation]( expr, test, record );\r\n\t\t\tif ( isOr ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\treturn !isOr;\r\n\t},\r\n\t/**\r\n\t * Logical NOT on the conditions of the query\r\n\t * `{$not: [query1, query2, query3]}`\r\n\t * @name $not\r\n\t * @memberOf module:documents/probe.queryOperators\r\n\t * @example\r\n\t * var probe = require(\"documents/probe\");\r\n\t * probe.find( data, {$not : {\"age\" : {$lt : 24}}} );\r\n\t */\r\n\t$not       : function ( qu, value, record ) {\r\n\r\n\t\tvar result = false;\r\n\t\tsys.each( qu.operands, function ( expr ) {\r\n\t\t\tif ( expr.path ) {\r\n\t\t\t\texpr.splitPath = expr.splitPath || splitPath( expr.path );\r\n\t\t\t}\r\n\t\t\tvar test = reachin( expr.splitPath, record, expr.operation );\r\n\t\t\tresult = operations[expr.operation]( expr, test, record );\r\n\t\t\tif ( result ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\treturn !result;\r\n\r\n\t}\r\n};\r\n\r\n/**\r\n Executes a query by traversing a document and evaluating each record\r\n @private\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute\r\n @param {?boolean} shortCircuit When true, the condition that matches the query stops evaluation for that record, otherwise all conditions have to be met\r\n @param {?boolean} stopOnFirst When true all evaluation stops after the first record is found to match the conditons\r\n **/\r\nfunction execQuery( obj, qu, shortCircuit, stopOnFirst ) {\r\n\tvar arrayResults = [];\r\n\tvar keyResults = [];\r\n\tsys.each( obj, function ( record, key ) {\r\n\t\tvar expr, result, test, _i, _len;\r\n\r\n\t\tfor ( _i = 0, _len = qu.length; _i &lt; _len; _i++ ) {\r\n\t\t\texpr = qu[_i];\r\n\t\t\tif ( expr.splitPath ) {\r\n\t\t\t\ttest = reachin( expr.splitPath, record, expr.operation );\r\n\t\t\t}\r\n\t\t\tresult = operations[expr.operation]( expr, test, record );\r\n\t\t\tif ( result ) {\r\n\t\t\t\tarrayResults.push( record );\r\n\t\t\t\tkeyResults.push( key );\r\n\t\t\t}\r\n\t\t\tif ( !result &amp;&amp; shortCircuit ) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( arrayResults.length > 0 &amp;&amp; stopOnFirst ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t} );\r\n\treturn {\r\n\t\tarrayResults : arrayResults,\r\n\t\tkeyResults   : keyResults\r\n\t};\r\n}\r\n\r\n/**\r\n Updates all records in obj that match the query. See {@link module:documents/probe.updateOperators} for the operators that are supported.\r\n @param {object|array} obj The object to update\r\n @param {object} qu The query which will be used to identify the records to updated\r\n @param {object} setDocument The update operator. See {@link module:documents/probe.updateOperators}\r\n */\r\nexports.update = function ( obj, qu, setDocument ) {\r\n\tvar records = exports.find( obj, qu );\r\n\treturn sys.each( records, function ( record ) {\r\n\t\treturn sys.each( setDocument, function ( fields, operator ) {\r\n\t\t\treturn sys.each( fields, function ( newValue, path ) {\r\n\t\t\t\treturn pushin( splitPath( path ), record, operator, newValue );\r\n\t\t\t} );\r\n\t\t} );\r\n\t} );\r\n};\r\n/**\r\n Find all records that match a query\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @returns {array} The results\r\n **/\r\nexports.find = function ( obj, qu ) {\r\n\tvar expression, _i, _len;\r\n\r\n\tvar query = parseQueryExpression( qu );\r\n\tfor ( _i = 0, _len = query.length; _i &lt; _len; _i++ ) {\r\n\t\texpression = query[_i];\r\n\t\tif ( expression.path ) {\r\n\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t}\r\n\t}\r\n\treturn execQuery( obj, query ).arrayResults;\r\n};\r\n/**\r\n Find all records that match a query and returns the keys for those items. This is similar to {@link module:documents/probe.find} but instead of returning\r\n records, returns the keys. If `obj` is an object it will return the hash key. If 'obj' is an array, it will return the index\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @returns {array}\r\n */\r\nexports.findKeys = function ( obj, qu ) {\r\n\tvar expression, _i, _len;\r\n\r\n\tvar query = parseQueryExpression( qu );\r\n\tfor ( _i = 0, _len = query.length; _i &lt; _len; _i++ ) {\r\n\t\texpression = query[_i];\r\n\t\tif ( expression.path ) {\r\n\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t}\r\n\t}\r\n\treturn execQuery( obj, query ).keyResults;\r\n};\r\n\r\n/**\r\n Returns the first record that matches the query. Aliased as `seek`.\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @returns {object}\r\n */\r\nexports.findOne = function ( obj, qu ) {\r\n\tvar expression, _i, _len;\r\n\r\n\tvar query = parseQueryExpression( qu );\r\n\tfor ( _i = 0, _len = query.length; _i &lt; _len; _i++ ) {\r\n\t\texpression = query[_i];\r\n\t\tif ( expression.path ) {\r\n\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t}\r\n\t}\r\n\tvar results = execQuery( obj, query, false, true ).arrayResults;\r\n\tif ( results.length > 0 ) {\r\n\t\treturn results[0];\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n};\r\nexports.seek = exports.findOne;\r\n/**\r\n Returns the first record that matches the query and returns its key or index depending on whether `obj` is an object or array respectively.\r\n Aliased as `seekKey`.\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @returns {object}\r\n */\r\nexports.findOneKey = function ( obj, qu ) {\r\n\tvar expression, _i, _len;\r\n\r\n\tvar query = parseQueryExpression( qu );\r\n\tfor ( _i = 0, _len = query.length; _i &lt; _len; _i++ ) {\r\n\t\texpression = query[_i];\r\n\t\tif ( expression.path ) {\r\n\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t}\r\n\t}\r\n\tvar results = execQuery( obj, query, false, true ).keyResults;\r\n\tif ( results.length > 0 ) {\r\n\t\treturn results[0];\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n};\r\nexports.seekKey = exports.findOneKey;\r\n\r\n/**\r\n Remove all items in the object/array that match the query\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @return {object|array} The array or object as appropriate without the records.\r\n **/\r\nexports.remove = function ( obj, qu ) {\r\n\tvar expression, _i, _len;\r\n\r\n\tvar query = parseQueryExpression( qu );\r\n\tfor ( _i = 0, _len = query.length; _i &lt; _len; _i++ ) {\r\n\t\texpression = query[_i];\r\n\t\tif ( expression.path ) {\r\n\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t}\r\n\t}\r\n\tvar results = execQuery( obj, query, false, false ).keyResults;\r\n\tif ( sys.isArray( obj ) ) {\r\n\t\tvar newArr = [];\r\n\t\tsys.each( obj, function ( item, index ) {\r\n\t\t\tif ( sys.indexOf( results, index ) === -1 ) {\r\n\t\t\t\treturn newArr.push( item );\r\n\t\t\t}\r\n\t\t} );\r\n\t\treturn newArr;\r\n\t} else {\r\n\t\tsys.each( results, function ( key ) {\r\n\t\t\treturn delete obj[key];\r\n\t\t} );\r\n\t\treturn obj;\r\n\t}\r\n};\r\n/**\r\n Returns true if all items match the query\r\n\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @returns {boolean}\r\n **/\r\nexports.all = function ( obj, qu ) {\r\n\treturn exports.find( obj, qu ).length === sys.size( obj );\r\n};\r\n\r\n/**\r\n Returns true if any of the items match the query\r\n\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @returns {boolean}\r\n **/\r\nexports.any = function ( obj, qu ) {\r\n\tvar expression, _i, _len;\r\n\r\n\tvar query = parseQueryExpression( qu );\r\n\tfor ( _i = 0, _len = query.length; _i &lt; _len; _i++ ) {\r\n\t\texpression = query[_i];\r\n\t\tif ( expression.path ) {\r\n\t\t\texpression.splitPath = splitPath( expression.path );\r\n\t\t}\r\n\t}\r\n\tvar results = execQuery( obj, query, true, true ).keyResults;\r\n\treturn results.length > 0;\r\n};\r\n\r\n/**\r\n Returns the set of unique records that match a query\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\r\n @return {array}\r\n **/\r\nexports.unique = function ( obj, qu ) {\r\n\tvar test = exports.find( obj, qu );\r\n\treturn sys.unique( test, function ( item ) {\r\n\t\treturn JSON.stringify( item );\r\n\t} );\r\n};\r\n\r\n/**\r\n This will write the value into a record at the path, creating intervening objects if they don't exist. This does not work as filtered\r\n update and is meant to be used on a single record. It is a nice way of setting a property at an arbitrary depth at will.\r\n\r\n @param {array} path The split path of the element to work with\r\n @param {object} record The record to reach into\r\n @param {string} setter The set operation.  See {@link module:documents/probe.updateOperators} for the operators you can use.\r\n @param {object} newValue The value to write to the, or if the operator is $pull, the query of items to look for\r\n */\r\nexports.set = function ( record, path, setter, newValue ) {\r\n\treturn pushin( splitPath( path ), record, setter, newValue );\r\n};\r\n\r\n/**\r\n Reaches into an object and allows you to get at a value deeply nested in an object. This is not a query, but a\r\n straight reach in, useful for event bindings\r\n\r\n @param {array} path The split path of the element to work with\r\n @param {object} record The record to reach into\r\n @return {*} Whatever was found in the record\r\n **/\r\nexports.get = function ( record, path ) {\r\n\treturn reachin( splitPath( path ), record );\r\n};\r\n\r\n/**\r\n Returns true if any of the items match the query. Aliases as `any`\r\n @function\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute\r\n @returns {boolean}\r\n */\r\nexports.some = exports.any;\r\n\r\n/**\r\n Returns true if all items match the query. Aliases as `all`\r\n @function\r\n @param {array|object} obj The object to query\r\n @param {object} qu The query to execute\r\n @returns {boolean}\r\n */\r\nexports.every = exports.all;\r\n\r\nvar bindables = {\r\n\tany        : exports.any,\r\n\tall        : exports.all,\r\n\tremove     : exports.remove,\r\n\tseekKey    : exports.seekKey,\r\n\tseek       : exports.seek,\r\n\tfindOneKey : exports.findOneKey,\r\n\tfindOne    : exports.findOne,\r\n\tfindKeys   : exports.findKeys,\r\n\tfind       : exports.find,\r\n\tupdate     : exports.update,\r\n\tsome       : exports.some,\r\n\tevery      : exports.every,\r\n\t\"get\"      : exports.get,\r\n\t\"set\"      : exports.set\r\n};\r\n\r\n/**\r\n Binds the query and update methods to a new object. When called these\r\n methods can skip the first parameter so that find(object, query) can just be called as find(query)\r\n @param {object|array} obj The object or array to bind to\r\n @return {object} An object with method bindings in place\r\n **/\r\nexports.proxy = function ( obj ) {\r\n\tvar retVal;\r\n\r\n\tretVal = {};\r\n\tsys.each( bindables, function ( val, key ) {\r\n\t\tretVal[key] = sys.bind( val, obj, obj );\r\n\t} );\r\n\treturn retVal;\r\n};\r\n\r\n/**\r\n Binds the query and update methods to a specific object and adds the methods to that object. When called these\r\n methods can skip the first parameter so that find(object, query) can just be called as object.find(query)\r\n @param {object|array} obj The object or array to bind to\r\n @param {object|array=} collection If the collection is not the same as &lt;code>this&lt;/code> but is a property, or even\r\n a whole other object, you specify that here. Otherwise the &lt;code>obj&lt;/code> is assumed to be the same as the collecion\r\n **/\r\nexports.mixin = function ( obj, collection ) {\r\n\tcollection = collection || obj;\r\n\treturn sys.each( bindables, function ( val, key ) {\r\n\t\tobj[key] = sys.bind( val, obj, collection );\r\n\t} );\r\n};\r\n\r\n/**\r\n * These are the supported query operators\r\n *\r\n * @memberOf module:documents/probe\r\n * @name queryOperators\r\n * @class This is not actually a class, but an artifact of the documentation system\r\n */\r\n\r\n/**\r\n * These are the supported update operators\r\n *\r\n * @memberOf module:documents/probe\r\n * @name updateOperators\r\n * @class This is not actually a class, but an artifact of the documentation system\r\n */\r\n</code></pre>\r\n        </article>\r\n    </section>\r\n\r\n\r\n\r\n"}{"type":"Source","title":"documents/schema.js","docs":[{"kind":"source","code":"\"use strict\";\r\n/**\r\n * @fileOverview Enables a schema and validation feature set to your document or other object.\r\n * @module documents/schema\r\n * @requires base\r\n * @requires jjv\r\n * @require lodash\r\n */\r\nvar sys = require( \"lodash\" );\r\nvar Validator = require( \"jjv\" );\r\nvar Base = require( \"../base\" );\r\n/**\r\n * The validator mixin provides access to the features of the JSON validation system\r\n * @exports documents/schema\r\n * @mixin\r\n */\r\nvar Schema = Base.compose( [Base], /** @lends documents/schema# */{\r\n\tconstructor : function () {\r\n\t\t/**\r\n\t\t * The schema that defines the validation rules. This should probably be defined at the prototype for each\r\n\t\t * object or model classification. It can be an anonymous schema defined right here, or this can be\r\n\t\t * registered schema names to use, or just a single name\r\n\t\t *\r\n\t\t * @type {object}\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name schema\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * If you want to register multiple schemas, use this property instead\r\n\t\t *\r\n\t\t * @type {object}\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name schemas\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * The validation environment\r\n\t\t * @private\r\n\t\t * @type {jjv}\r\n\t\t */\r\n\t\tvar env = new Validator();\r\n\r\n\t\t/**\r\n\t\t * The default name of the scheman when you use anonymous schemas. You can define this at the prototype for classified\r\n\t\t * schemas. The can also\r\n\t\t *\r\n\t\t * @type {string|function():{string}}\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name _defaultSchemaName\r\n\t\t */\r\n\t\tthis._defaultSchemaName = sys.result( this, \"_defaultSchemaName\" ) || sys.uniqueId( \"schema\" );\r\n\r\n\t\t/**\r\n\t\t * The options to pass to the validator when it runs\r\n\t\t * @type {object|function():{object}}\r\n\t\t * @name validationOptions\r\n\t\t * @memberOf documents/schema#\r\n\t\t */\r\n\t\tthis.validationOptions = sys.defaults( {}, sys.result( this, 'validationOptions' ), {checkRequired : true} );\r\n\r\n\t\t/**\r\n\t\t * Validate an object against the schema\r\n\t\t * @returns {object?}\r\n\t\t * @method\r\n\t\t * @name validate\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @param {object=} record The record to validate\r\n\t\t * @param {string|object=} schemaName The name of a previously registered schema\r\n\t\t * @param {object=} options Options to pass to the validator\r\n\t\t * @example\r\n\t\t * // This supports these signatures:\r\n\t\t *\r\n\t\t * instance.validate(record, schemaName, options);\r\n\t\t *\r\n\t\t *\r\n\t\t * instance.validate(); // this, this._defaultSchemaName, this.validationOptions\r\n\t\t * instance.validate(record); // record, this._defaultSchemaName, this.validationOptions\r\n\t\t * instance.validate(schemaName); //this, schemaName, this.validationOptions\r\n\t\t * instance.validate(record, schemaName); //record, schemaName, this.validationOptions\r\n\t\t * instance.validate(schemaName, options); //this, schemaName, this.validationOptions\r\n\t\t */\r\n\t\tthis.validate = function ( record, schemaName, options ) {\r\n\t\t\tif ( arguments.length === 0 ) {\r\n\t\t\t\trecord = this;\r\n\t\t\t\tschemaName = this._defaultSchemaName;\r\n\t\t\t\toptions = this.validationOptions;\r\n\t\t\t} else {\r\n\t\t\t\tif ( sys.isString( record ) ) {\r\n\t\t\t\t\tschemaName = record;\r\n\t\t\t\t\trecord = this;\r\n\t\t\t\t}\r\n\t\t\t\tif ( sys.isEmpty( options ) ) {\r\n\t\t\t\t\toptions = this.validationOptions;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn env.validate( schemaName, record, options );\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Initialize the schema collection by registering the with the handler. You can call this at any time and as often as you like. It will be called once\r\n\t\t * by the constructor on any instance schemas\r\n\t\t * @method\r\n\t\t * @name registerSchemas\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @param {hash} schemas A hash of schemas where the key is the name of the schema\r\n\t\t */\r\n\t\tthis.registerSchemas = function ( schemas ) {\r\n\t\t\tvar schema = sys.result( this, \"schema\" );\r\n\t\t\tvar schemas = schemas || sys.result( this, \"schemas\" );\r\n\t\t\tif ( !sys.isEmpty( schema ) ) {\r\n\t\t\t\tenv.addSchema( this._defaultSchemaName, schema );\r\n\t\t\t}\r\n\t\t\tif ( !sys.isEmpty( schemas ) ) {\r\n\t\t\t\tsys.each( schemas, function ( val, key ) {\r\n\t\t\t\t\tenv.addSchema( val, key );\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Extracts only the elements of the object that are defined in the schema\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name extract\r\n\t\t * @param {object=} record The record to extract from\r\n\t\t * @param {string=} schema The name of the schema to attach\r\n\t\t * @method\r\n\t\t */\r\n\t\tthis.extract = function ( record, schema ) {\r\n\t\t\tif ( arguments.length === 0 ) {\r\n\t\t\t\trecord = this;\r\n\t\t\t\tschema = this._defaultSchemaName;\r\n\t\t\t}\r\n\t\t\tif ( sys.isString( record ) ) {\r\n\t\t\t\tschema = record;\r\n\t\t\t\trecord = this;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Create a type to be used in your schemas to define new validators\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name addType\r\n\t\t * @method\r\n\t\t * @param {string} name The name of the type\r\n\t\t * @param {function(object)} operation What to do with the type.\r\n\t\t * @param {object} operation.value The value to validation\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.addType = env.addType;\r\n\r\n\t\t/**\r\n\t\t * It is also possible to add support for additional string formats through the addFormat function.\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name addFormat\r\n\t\t * @method\r\n\t\t * @param {string} name The name of the formatter\r\n\t\t * @param {function(object)} formatter How to format it\r\n\t\t * @param {object} formatter.value The value to format\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.addFormat = env.addFormat;\r\n\r\n\t\t/**\r\n\t\t * It is possible to add support for custom checks (i.e., minItems, maxItems, minLength, maxLength, etc.) through the addCheck function\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name addCheck\r\n\t\t * @method\r\n\t\t * @param {string} name The name of the check\r\n\t\t * @param {function(...object)} formatter Perform the check\r\n\t\t * @param {object} formatter.value The value to check followed by any parameters from the schema\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.addCheck = env.addCheck;\r\n\r\n\t\t/**\r\n\t\t * Custom coercion rules\r\n\t\t *\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name addTypeCoercion\r\n\t\t * @method\r\n\t\t * @param {string} name The name of the coercion\r\n\t\t * @param {function(object)} coercer Perform the coercion\r\n\t\t * @param {object} coercer.value The value to coerce\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.addTypeCoercion = env.addTypeCoercion;\r\n\r\n\t\t/**\r\n\t\t * Get a registered schema by name\r\n\t\t * @param {string=} schemaName\r\n\t\t * @returns {object?}\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name getSchema\r\n\t\t * @method\r\n\t\t */\r\n\t\tthis.getSchema = function ( schemaName ) {\r\n\t\t\tif ( sys.isEmpty( schemaName ) || !sys.isString() ) {\r\n\t\t\t\tschemaName = this._defaultSchemaName;\r\n\t\t\t}\r\n\t\t\treturn env.schema[schemaName];\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * This method will create a new object that contains only the fields and no methods or other artifacts. This is useful\r\n\t * for creating objects to pass over the wire or save in a table. This is not deeply copied, so changes made to the\r\n\t * extracted object will be represented in this class for reference objects.\r\n\t *\r\n\t * @param {string=} schema The schema name to use\r\n\t * @param {object=} src The object to extract fields from\r\n\t * @return {object} Data-only version of the class instance.\r\n\t */\r\n\textract     : function ( schemaName, src ) {\r\n\t\tif ( sys.isObject( schemaName ) ) {\r\n\t\t\tsrc = schema;\r\n\t\t\tschemaName = this._defaultSchemaName;\r\n\t\t}\r\n\r\n\t\tif ( sys.isEmpty( src ) ) {\r\n\t\t\tsrc = this;\r\n\t\t}\r\n\r\n\t\tif ( sys.isFunction( src.toJSON ) ) {\r\n\t\t\tsrc = src.toJSON();\r\n\t\t}\r\n\t\tvar schema = this.getSchema( schemaName ) || {};\r\n\t\tvar newobj = {};\r\n\t\tsys.each( schema.properties, function ( prop, propname ) {\r\n\t\t\tif ( prop.properties &amp;&amp; !sys.isUndefined( src[ propname ] ) ) {\r\n\t\t\t\tnewobj[ propname ] = this.extract( prop, src[propname] );\r\n\t\t\t} else if ( !sys.isUndefined( src[ propname ] ) ) {\r\n\t\t\t\tnewobj[ propname ] = src[ propname ];\r\n\t\t\t}\r\n\t\t}, this );\r\n\r\n\t\treturn newobj;\r\n\t},\r\n\t/**\r\n\t * Builds a default document based on the schema. What this does is create a document from schema and for each property\r\n\t * that has a default value or is required, the resultant object will contain that property. It is useful for extending\r\n\t * values from some source that may be incomplete, like options or some such.\r\n\t * @param {json-schema} schema A schema to use to create the default document\r\n\t * @returns {object?}\r\n\t * @name defaultDoc\r\n\t * @memberOf documents/schema#\r\n\t * @method\r\n\t */\r\n\tdefaultDoc  : function ( schemaName ) {\r\n\t\tif ( sys.isEmpty( schemaName ) ) {\r\n\t\t\tschemaName = this._defaultSchemaName;\r\n\t\t}\r\n\t\tvar newdoc = {};\r\n\t\tvar schema;\r\n\r\n\t\tif ( sys.isObject( schemaName ) ) {\r\n\t\t\tschema = schemaName;\r\n\t\t} else {\r\n\t\t\tschema = this.getSchema( schemaName ) || {};\r\n\t\t}\r\n\t\tsys.each( schema.properties, function ( val, key ) {\r\n\r\n\t\t\tvar def = val[ \"default\" ]; // keyword and all that\r\n\t\t\tif ( val.type === \"object\" &amp;&amp; !sys.isEmpty( val.properties ) ) {\r\n\t\t\t\tnewdoc[ key ] = this.defaultDoc( val );\r\n\t\t\t} else {\r\n\t\t\t\tif ( sys.isFunction( def ) || sys.isBoolean( def ) || sys.isNumber( def ) || !sys.isEmpty( def ) ) {\r\n\r\n\t\t\t\t\tif ( sys.isFunction( def ) ) {\r\n\t\t\t\t\t\tnewdoc[ key ] = def( schema );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewdoc[ key ] = def;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if ( val.required ) {\r\n\t\t\t\t\tif ( val.type === 'string' ) {\r\n\t\t\t\t\t\tnewdoc[ key ] = null;\r\n\t\t\t\t\t} else if ( val.type === 'object' ) {\r\n\t\t\t\t\t\tnewdoc[ key ] = {};\r\n\t\t\t\t\t} else if ( val.type === 'array' ) {\r\n\t\t\t\t\t\tnewdoc[ key ] = [];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewdoc[ key ] = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this );\r\n\r\n\t\treturn newdoc;\r\n\t}\r\n} );\r\n\r\nmodule.exports = Schema;\r\n"}],"content":"\r\n\r\n\r\n\r\n    \r\n    <section>\r\n        <article>\r\n            <pre class=\"prettyprint source linenums\"><code>\"use strict\";\r\n/**\r\n * @fileOverview Enables a schema and validation feature set to your document or other object.\r\n * @module documents/schema\r\n * @requires base\r\n * @requires jjv\r\n * @require lodash\r\n */\r\nvar sys = require( \"lodash\" );\r\nvar Validator = require( \"jjv\" );\r\nvar Base = require( \"../base\" );\r\n/**\r\n * The validator mixin provides access to the features of the JSON validation system\r\n * @exports documents/schema\r\n * @mixin\r\n */\r\nvar Schema = Base.compose( [Base], /** @lends documents/schema# */{\r\n\tconstructor : function () {\r\n\t\t/**\r\n\t\t * The schema that defines the validation rules. This should probably be defined at the prototype for each\r\n\t\t * object or model classification. It can be an anonymous schema defined right here, or this can be\r\n\t\t * registered schema names to use, or just a single name\r\n\t\t *\r\n\t\t * @type {object}\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name schema\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * If you want to register multiple schemas, use this property instead\r\n\t\t *\r\n\t\t * @type {object}\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name schemas\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * The validation environment\r\n\t\t * @private\r\n\t\t * @type {jjv}\r\n\t\t */\r\n\t\tvar env = new Validator();\r\n\r\n\t\t/**\r\n\t\t * The default name of the scheman when you use anonymous schemas. You can define this at the prototype for classified\r\n\t\t * schemas. The can also\r\n\t\t *\r\n\t\t * @type {string|function():{string}}\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name _defaultSchemaName\r\n\t\t */\r\n\t\tthis._defaultSchemaName = sys.result( this, \"_defaultSchemaName\" ) || sys.uniqueId( \"schema\" );\r\n\r\n\t\t/**\r\n\t\t * The options to pass to the validator when it runs\r\n\t\t * @type {object|function():{object}}\r\n\t\t * @name validationOptions\r\n\t\t * @memberOf documents/schema#\r\n\t\t */\r\n\t\tthis.validationOptions = sys.defaults( {}, sys.result( this, 'validationOptions' ), {checkRequired : true} );\r\n\r\n\t\t/**\r\n\t\t * Validate an object against the schema\r\n\t\t * @returns {object?}\r\n\t\t * @method\r\n\t\t * @name validate\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @param {object=} record The record to validate\r\n\t\t * @param {string|object=} schemaName The name of a previously registered schema\r\n\t\t * @param {object=} options Options to pass to the validator\r\n\t\t * @example\r\n\t\t * // This supports these signatures:\r\n\t\t *\r\n\t\t * instance.validate(record, schemaName, options);\r\n\t\t *\r\n\t\t *\r\n\t\t * instance.validate(); // this, this._defaultSchemaName, this.validationOptions\r\n\t\t * instance.validate(record); // record, this._defaultSchemaName, this.validationOptions\r\n\t\t * instance.validate(schemaName); //this, schemaName, this.validationOptions\r\n\t\t * instance.validate(record, schemaName); //record, schemaName, this.validationOptions\r\n\t\t * instance.validate(schemaName, options); //this, schemaName, this.validationOptions\r\n\t\t */\r\n\t\tthis.validate = function ( record, schemaName, options ) {\r\n\t\t\tif ( arguments.length === 0 ) {\r\n\t\t\t\trecord = this;\r\n\t\t\t\tschemaName = this._defaultSchemaName;\r\n\t\t\t\toptions = this.validationOptions;\r\n\t\t\t} else {\r\n\t\t\t\tif ( sys.isString( record ) ) {\r\n\t\t\t\t\tschemaName = record;\r\n\t\t\t\t\trecord = this;\r\n\t\t\t\t}\r\n\t\t\t\tif ( sys.isEmpty( options ) ) {\r\n\t\t\t\t\toptions = this.validationOptions;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn env.validate( schemaName, record, options );\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Initialize the schema collection by registering the with the handler. You can call this at any time and as often as you like. It will be called once\r\n\t\t * by the constructor on any instance schemas\r\n\t\t * @method\r\n\t\t * @name registerSchemas\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @param {hash} schemas A hash of schemas where the key is the name of the schema\r\n\t\t */\r\n\t\tthis.registerSchemas = function ( schemas ) {\r\n\t\t\tvar schema = sys.result( this, \"schema\" );\r\n\t\t\tvar schemas = schemas || sys.result( this, \"schemas\" );\r\n\t\t\tif ( !sys.isEmpty( schema ) ) {\r\n\t\t\t\tenv.addSchema( this._defaultSchemaName, schema );\r\n\t\t\t}\r\n\t\t\tif ( !sys.isEmpty( schemas ) ) {\r\n\t\t\t\tsys.each( schemas, function ( val, key ) {\r\n\t\t\t\t\tenv.addSchema( val, key );\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Extracts only the elements of the object that are defined in the schema\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name extract\r\n\t\t * @param {object=} record The record to extract from\r\n\t\t * @param {string=} schema The name of the schema to attach\r\n\t\t * @method\r\n\t\t */\r\n\t\tthis.extract = function ( record, schema ) {\r\n\t\t\tif ( arguments.length === 0 ) {\r\n\t\t\t\trecord = this;\r\n\t\t\t\tschema = this._defaultSchemaName;\r\n\t\t\t}\r\n\t\t\tif ( sys.isString( record ) ) {\r\n\t\t\t\tschema = record;\r\n\t\t\t\trecord = this;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Create a type to be used in your schemas to define new validators\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name addType\r\n\t\t * @method\r\n\t\t * @param {string} name The name of the type\r\n\t\t * @param {function(object)} operation What to do with the type.\r\n\t\t * @param {object} operation.value The value to validation\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.addType = env.addType;\r\n\r\n\t\t/**\r\n\t\t * It is also possible to add support for additional string formats through the addFormat function.\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name addFormat\r\n\t\t * @method\r\n\t\t * @param {string} name The name of the formatter\r\n\t\t * @param {function(object)} formatter How to format it\r\n\t\t * @param {object} formatter.value The value to format\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.addFormat = env.addFormat;\r\n\r\n\t\t/**\r\n\t\t * It is possible to add support for custom checks (i.e., minItems, maxItems, minLength, maxLength, etc.) through the addCheck function\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name addCheck\r\n\t\t * @method\r\n\t\t * @param {string} name The name of the check\r\n\t\t * @param {function(...object)} formatter Perform the check\r\n\t\t * @param {object} formatter.value The value to check followed by any parameters from the schema\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.addCheck = env.addCheck;\r\n\r\n\t\t/**\r\n\t\t * Custom coercion rules\r\n\t\t *\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name addTypeCoercion\r\n\t\t * @method\r\n\t\t * @param {string} name The name of the coercion\r\n\t\t * @param {function(object)} coercer Perform the coercion\r\n\t\t * @param {object} coercer.value The value to coerce\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.addTypeCoercion = env.addTypeCoercion;\r\n\r\n\t\t/**\r\n\t\t * Get a registered schema by name\r\n\t\t * @param {string=} schemaName\r\n\t\t * @returns {object?}\r\n\t\t * @memberOf documents/schema#\r\n\t\t * @name getSchema\r\n\t\t * @method\r\n\t\t */\r\n\t\tthis.getSchema = function ( schemaName ) {\r\n\t\t\tif ( sys.isEmpty( schemaName ) || !sys.isString() ) {\r\n\t\t\t\tschemaName = this._defaultSchemaName;\r\n\t\t\t}\r\n\t\t\treturn env.schema[schemaName];\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * This method will create a new object that contains only the fields and no methods or other artifacts. This is useful\r\n\t * for creating objects to pass over the wire or save in a table. This is not deeply copied, so changes made to the\r\n\t * extracted object will be represented in this class for reference objects.\r\n\t *\r\n\t * @param {string=} schema The schema name to use\r\n\t * @param {object=} src The object to extract fields from\r\n\t * @return {object} Data-only version of the class instance.\r\n\t */\r\n\textract     : function ( schemaName, src ) {\r\n\t\tif ( sys.isObject( schemaName ) ) {\r\n\t\t\tsrc = schema;\r\n\t\t\tschemaName = this._defaultSchemaName;\r\n\t\t}\r\n\r\n\t\tif ( sys.isEmpty( src ) ) {\r\n\t\t\tsrc = this;\r\n\t\t}\r\n\r\n\t\tif ( sys.isFunction( src.toJSON ) ) {\r\n\t\t\tsrc = src.toJSON();\r\n\t\t}\r\n\t\tvar schema = this.getSchema( schemaName ) || {};\r\n\t\tvar newobj = {};\r\n\t\tsys.each( schema.properties, function ( prop, propname ) {\r\n\t\t\tif ( prop.properties &amp;&amp; !sys.isUndefined( src[ propname ] ) ) {\r\n\t\t\t\tnewobj[ propname ] = this.extract( prop, src[propname] );\r\n\t\t\t} else if ( !sys.isUndefined( src[ propname ] ) ) {\r\n\t\t\t\tnewobj[ propname ] = src[ propname ];\r\n\t\t\t}\r\n\t\t}, this );\r\n\r\n\t\treturn newobj;\r\n\t},\r\n\t/**\r\n\t * Builds a default document based on the schema. What this does is create a document from schema and for each property\r\n\t * that has a default value or is required, the resultant object will contain that property. It is useful for extending\r\n\t * values from some source that may be incomplete, like options or some such.\r\n\t * @param {json-schema} schema A schema to use to create the default document\r\n\t * @returns {object?}\r\n\t * @name defaultDoc\r\n\t * @memberOf documents/schema#\r\n\t * @method\r\n\t */\r\n\tdefaultDoc  : function ( schemaName ) {\r\n\t\tif ( sys.isEmpty( schemaName ) ) {\r\n\t\t\tschemaName = this._defaultSchemaName;\r\n\t\t}\r\n\t\tvar newdoc = {};\r\n\t\tvar schema;\r\n\r\n\t\tif ( sys.isObject( schemaName ) ) {\r\n\t\t\tschema = schemaName;\r\n\t\t} else {\r\n\t\t\tschema = this.getSchema( schemaName ) || {};\r\n\t\t}\r\n\t\tsys.each( schema.properties, function ( val, key ) {\r\n\r\n\t\t\tvar def = val[ \"default\" ]; // keyword and all that\r\n\t\t\tif ( val.type === \"object\" &amp;&amp; !sys.isEmpty( val.properties ) ) {\r\n\t\t\t\tnewdoc[ key ] = this.defaultDoc( val );\r\n\t\t\t} else {\r\n\t\t\t\tif ( sys.isFunction( def ) || sys.isBoolean( def ) || sys.isNumber( def ) || !sys.isEmpty( def ) ) {\r\n\r\n\t\t\t\t\tif ( sys.isFunction( def ) ) {\r\n\t\t\t\t\t\tnewdoc[ key ] = def( schema );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewdoc[ key ] = def;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if ( val.required ) {\r\n\t\t\t\t\tif ( val.type === 'string' ) {\r\n\t\t\t\t\t\tnewdoc[ key ] = null;\r\n\t\t\t\t\t} else if ( val.type === 'object' ) {\r\n\t\t\t\t\t\tnewdoc[ key ] = {};\r\n\t\t\t\t\t} else if ( val.type === 'array' ) {\r\n\t\t\t\t\t\tnewdoc[ key ] = [];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewdoc[ key ] = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this );\r\n\r\n\t\treturn newdoc;\r\n\t}\r\n} );\r\n\r\nmodule.exports = Schema;\r\n</code></pre>\r\n        </article>\r\n    </section>\r\n\r\n\r\n\r\n"}{"type":"Source","title":"mixins/bussable.js","docs":[{"kind":"source","code":"\"use strict\";\r\n/**\r\n * @fileOverview Provides easy access to the system bus and provides some helper methods for doing so\r\n * @module mixins/bussable\r\n * @requires postal\r\n * @requires lodash\r\n * @requires base\r\n */\r\nvar bus = require( \"postal\" );\r\nvar Base = require( \"../base\" );\r\nvar sys = require( \"lodash\" );\r\n\r\n/**\r\n *  @classDesc Provides easy access to the system bus and provides some helper methods for doing so\r\n *  @exports mixins/bussable\r\n *  @mixin\r\n */\r\nvar Bussable = Base.compose( [Base], /** @lends mixins/bussable# */{\r\n\tdeclaredClass : \"mixins/Bussable\",\r\n\tconstructor   : function () {\r\n\t\t/**\r\n\t\t * The list of subscriptions maintained by the mixin\r\n\t\t * @type {Array}\r\n\t\t * @memberof mixins/bussable#\r\n\t\t * @name _subscriptions\r\n\t\t * @private\r\n\t\t */\r\n\t\tthis._subscriptions = {};\r\n\r\n\t\tthis.log.trace( \"Bussable constructor\" );\r\n\t},\r\n\r\n\t/**\r\n\t * Subscribe to an event\r\n\t * @param {string} channel The channel to subscribe to\r\n\t * @param {string} topic The topic to subscribe to\r\n\t * @param {callback} callback What to do when you get the event\r\n\t * @returns {object} The subscription definition\r\n\t */\r\n\tsubscribe : function ( channel, topic, callback ) {\r\n\t\tthis.log.trace( \"Bussable subscribe\" );\r\n\t\tvar sub = bus.subscribe( {channel : channel, topic : topic, callback : callback} );\r\n\t\tthis.subscriptions[channel + \".\" + topic] = sub;\r\n\t\treturn sub;\r\n\t},\r\n\r\n\t/**\r\n\t * Subscribe to an event once\r\n\t * @param {string} channel The channel to subscribe to\r\n\t * @param {string} topic The topic to subscribe to\r\n\t * @param {callback} callback What to do when you get the event\r\n\t * @returns {object} The subscription definition\r\n\t */\r\n\tonce : function ( channel, topic, callback ) {\r\n\t\tthis.log.trace( \"Bussable once\" );\r\n\t\tvar sub = this.subscribe( channel, topic, callback );\r\n\t\tthis.subscriptions[channel + \".\" + topic] = sub;\r\n\t\tsub.disposeAfter( 1 );\r\n\t\treturn sub;\r\n\t},\r\n\r\n\t/**\r\n\t * Publish an event on the system bus\r\n\t * @param {string} channel The channel to publish to\r\n\t * @param {string} topic The topic to publish to\r\n\t * @param {object=} options What to pass to the event\r\n\t */\r\n\tpublish : function ( channel, topic, options ) {\r\n\t\tthis.log.trace( \"Bussable publish\" );\r\n\t\tbus.publish( {channel : channel, topic : topic, data : options} );\r\n\t},\r\n\r\n\t/**\r\n\t * Get a subscription definition\r\n\t *\r\n\t * @param {string} channel\r\n\t * @param {string} topic\r\n\t * @returns {object=} The subscription definition\r\n\t */\r\n\tgetSubscription : function ( channel, topic ) {\r\n\t\tthis.log.trace( \"Bussable getSubscription\" );\r\n\t\treturn this.subscriptions[channel + \".\" + topic];\r\n\t},\r\n\r\n\t/**\r\n\t * Gets rid of all subscriptions for this object.\r\n\t * @private\r\n\t */\r\n\tdestroy : function () {\r\n\t\tthis.log.trace( \"Bussable destroy\" );\r\n\r\n\t\tsys.each( this.subscriptions, function ( sub ) {\r\n\t\t\tsub.unsubscribe();\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\nmodule.exports = Bussable;\r\n"}],"content":"\r\n\r\n\r\n\r\n    \r\n    <section>\r\n        <article>\r\n            <pre class=\"prettyprint source linenums\"><code>\"use strict\";\r\n/**\r\n * @fileOverview Provides easy access to the system bus and provides some helper methods for doing so\r\n * @module mixins/bussable\r\n * @requires postal\r\n * @requires lodash\r\n * @requires base\r\n */\r\nvar bus = require( \"postal\" );\r\nvar Base = require( \"../base\" );\r\nvar sys = require( \"lodash\" );\r\n\r\n/**\r\n *  @classDesc Provides easy access to the system bus and provides some helper methods for doing so\r\n *  @exports mixins/bussable\r\n *  @mixin\r\n */\r\nvar Bussable = Base.compose( [Base], /** @lends mixins/bussable# */{\r\n\tdeclaredClass : \"mixins/Bussable\",\r\n\tconstructor   : function () {\r\n\t\t/**\r\n\t\t * The list of subscriptions maintained by the mixin\r\n\t\t * @type {Array}\r\n\t\t * @memberof mixins/bussable#\r\n\t\t * @name _subscriptions\r\n\t\t * @private\r\n\t\t */\r\n\t\tthis._subscriptions = {};\r\n\r\n\t\tthis.log.trace( \"Bussable constructor\" );\r\n\t},\r\n\r\n\t/**\r\n\t * Subscribe to an event\r\n\t * @param {string} channel The channel to subscribe to\r\n\t * @param {string} topic The topic to subscribe to\r\n\t * @param {callback} callback What to do when you get the event\r\n\t * @returns {object} The subscription definition\r\n\t */\r\n\tsubscribe : function ( channel, topic, callback ) {\r\n\t\tthis.log.trace( \"Bussable subscribe\" );\r\n\t\tvar sub = bus.subscribe( {channel : channel, topic : topic, callback : callback} );\r\n\t\tthis.subscriptions[channel + \".\" + topic] = sub;\r\n\t\treturn sub;\r\n\t},\r\n\r\n\t/**\r\n\t * Subscribe to an event once\r\n\t * @param {string} channel The channel to subscribe to\r\n\t * @param {string} topic The topic to subscribe to\r\n\t * @param {callback} callback What to do when you get the event\r\n\t * @returns {object} The subscription definition\r\n\t */\r\n\tonce : function ( channel, topic, callback ) {\r\n\t\tthis.log.trace( \"Bussable once\" );\r\n\t\tvar sub = this.subscribe( channel, topic, callback );\r\n\t\tthis.subscriptions[channel + \".\" + topic] = sub;\r\n\t\tsub.disposeAfter( 1 );\r\n\t\treturn sub;\r\n\t},\r\n\r\n\t/**\r\n\t * Publish an event on the system bus\r\n\t * @param {string} channel The channel to publish to\r\n\t * @param {string} topic The topic to publish to\r\n\t * @param {object=} options What to pass to the event\r\n\t */\r\n\tpublish : function ( channel, topic, options ) {\r\n\t\tthis.log.trace( \"Bussable publish\" );\r\n\t\tbus.publish( {channel : channel, topic : topic, data : options} );\r\n\t},\r\n\r\n\t/**\r\n\t * Get a subscription definition\r\n\t *\r\n\t * @param {string} channel\r\n\t * @param {string} topic\r\n\t * @returns {object=} The subscription definition\r\n\t */\r\n\tgetSubscription : function ( channel, topic ) {\r\n\t\tthis.log.trace( \"Bussable getSubscription\" );\r\n\t\treturn this.subscriptions[channel + \".\" + topic];\r\n\t},\r\n\r\n\t/**\r\n\t * Gets rid of all subscriptions for this object.\r\n\t * @private\r\n\t */\r\n\tdestroy : function () {\r\n\t\tthis.log.trace( \"Bussable destroy\" );\r\n\r\n\t\tsys.each( this.subscriptions, function ( sub ) {\r\n\t\t\tsub.unsubscribe();\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\nmodule.exports = Bussable;\r\n</code></pre>\r\n        </article>\r\n    </section>\r\n\r\n\r\n\r\n"}{"type":"Source","title":"mixins/signalable.js","docs":[{"kind":"source","code":"\"use strict\";\r\n/**\r\n * @fileOverview Add the ability to fire signals on your objects. Signals are events, but hard coded into the object\r\n * and don't rely on strings like other events and `eventables`\r\n * @module mixins/signalable\r\n * @requires base\r\n * @requires signals\r\n * @requires base/logger\r\n */\r\n\r\nvar Base = require( \"../base\" );\r\nvar signals = require( 'signals' );\r\nvar format = require( \"../strings/format\" );\r\nvar sys = require( \"lodash\" );\r\n\r\n/**\r\n * @typedef\r\n * @property {boolean=} memorize If Signal should keep record of previously dispatched parameters and automatically execute listener. Defaults to `false`\r\n * @property {array=} params Default parameters passed to listener during `Signal.raise`/`Signal.fire`/`Signal.trigger` and SignalBinding.execute. (curried parameters). Defaults to `null`\r\n * @property {object=} context When provided the signal will be raised in the context of this object. Defaults to `this` - the signal host\r\n * @name SignalOptions\r\n * @memberOf module:mixins/signalable\r\n * @example\r\n *\r\n *  signals:{\r\n *      opened: null,\r\n *      twisted: { memorize:true },\r\n *      applied: { memorize: false, params:[one, two] }\r\n *  }\r\n *\r\n *  // Setting the context initially can be a hassle, so this also supports a function that returns a hash\r\n *\r\n *  signals: function(){\r\n *      return {\r\n *      opened: null,\r\n *      twisted: { memorize:true },\r\n *      applied: { memorize: false, params:[one, two] },\r\n *      reversed: {context: someOtherRuntimeObject}\r\n *      };\r\n *  }\r\n *\r\n */\r\n\r\n/**\r\n * @classDesc A signal that can be raised on an object. When you deploy the `Signalable` mixin, it\r\n * creates instances of these for you.\r\n *\r\n * @constructor\r\n * @param {?object} host If hosted, you can identify the host here.\r\n * @param {?string} name The name of the signal\r\n * @type module:mixins/signalable.SignalOptions\r\n */\r\nvar Signal = Base.compose( [Base, signals.Signal], /** @lends module:mixins/signalable~Signal# */{\r\n\tdeclaredClass : \"mixins/Signal\",\r\n\r\n\tconstructor : function ( host, name, options ) {\r\n\t\toptions = options || {};\r\n\t\tthis.memorize = options.memorize === true;\r\n\t\tthis.host = host;\r\n\t\tthis.trigger = this.fire = this.raise = this.dispatch;\r\n\t\tthis.name = name || sys.uniqueId( \"signal\" );\r\n\t\tthis.params = options.params;\r\n\t\tthis.defaultContext = options.context;\r\n\t},\r\n\r\n\t/**\r\n\t * Cleans up\r\n\t * @private\r\n\t */\r\n\tdestroy : function () {\r\n\t\tthis.removeAll();\r\n\t\tthis.dispose();\r\n\t\tthis.host = null;\r\n\t},\r\n\r\n\t/**\r\n\t * Ties a listener to a signal.\r\n\t * @param {function} listener The function to call when the signal is raised\r\n\t * @param {?object} listenerContext A context to set for the listener. The event host may set a default for this value, but you may override that here.\r\n\t * @param {?number} priority A priority for the listener.\r\n\t * @returns {SignalBinding}\r\n\t */\r\n\ton       : function ( listener, listenerContext, priority ) {\r\n\t\tif ( sys.isNumber( listenerContext ) ) {\r\n\t\t\tpriority = listenerContext;\r\n\t\t\tlistenerContext = null;\r\n\t\t}\r\n\t\tlistenerContext = listenerContext || this.defaultContext || this.host;\r\n\t\tvar binding = this.add( listener, listenerContext, priority );\r\n\t\tif ( this.options.params ) {\r\n\t\t\tbinding.params = this.arams;\r\n\t\t}\r\n\t\treturn binding;\r\n\t},\r\n\t/**\r\n\t * Ties a listener to for a signal for one execution.\r\n\t * @param {function} listener The function to call when the signal is raised\r\n\t * @param {?object} listenerContext A context to set for the listener. The event host may set a default for this value, but you may override that here.\r\n\t * @param {?number} priority A priority for the listener.\r\n\t * @returns {SignalBinding}\r\n\t */\r\n\tonce     : function ( listener, listenerContext, priority ) {\r\n\t\tif ( sys.isNumber( listenerContext ) ) {\r\n\t\t\tpriority = listenerContext;\r\n\t\t\tlistenerContext = null;\r\n\t\t}\r\n\t\tlistenerContext = listenerContext || this.defaultContext || this.host;\r\n\t\tvar binding = this.addOnce( listener, listenerContext, priority );\r\n\t\tif ( this.options.params ) {\r\n\t\t\tbinding.params = this.params;\r\n\t\t}\r\n\t\treturn binding;\r\n\t},\r\n\t/**\r\n\t * Unbinds a listener to a signal.\r\n\t * @param {function} listener The function to unbind\r\n\t * @param {?object} listenerContext The context that was bound\r\n\t * @returns {function}\r\n\t */\r\n\toff      : function ( listener, listenerContext ) {\r\n\t\tlistenerContext = listenerContext || this.host;\r\n\t\treturn this.remove( listener, listenerContext );\r\n\t},\r\n\t/**\r\n\t * Check if listener was attached to Signal.\r\n\t * @param {function} listener The function to check\r\n\t * @param {?object} listenerContext The context that was bound\r\n\t * @returns {boolean}\r\n\t */\r\n\thas      : function ( listener, listenerContext ) {\r\n\t\tlistenerContext = listenerContext || this.defaultContext || this.host;\r\n\t\treturn this.remove( listener, listenerContext );\r\n\t},\r\n\t/**\r\n\t * Strings!\r\n\t */\r\n\ttoString : function () {\r\n\t\treturn  format( \"{0}\\nname:{1}\\nlisteners:{2}\",\r\n\t\t\tthis.declaredClass,\r\n\t\t\tthis.name,\r\n\t\t\tthis.getNumListeners()\r\n\t\t);\r\n\t}\r\n\r\n} );\r\n\r\n/**\r\n * @classDesc Make an object capable of handling a signal. Or many signals.\r\n * @exports mixins/signalable\r\n * @mixin\r\n * @extends base\r\n */\r\nvar Signalable = Base.compose( [Base], /** @lends mixins/signalable# */{\r\n\tdeclaredClass : \"mixins/Signalable\",\r\n\r\n\tconstructor    : function () {\r\n\t\tthis.autoLoadSignals = this.autoLoadSignals || true;\r\n\t\tif ( this.autoLoadSignals === true ) {\r\n\t\t\tthis._loadSignals();\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * When you make a change to the signals hash after loading, then you can make it reload\r\n\t */\r\n\trefreshSignals : function () {\r\n\t\tthis._loadSignals();\r\n\t},\r\n\r\n\t/**\r\n\t * Interprets the `signals` hash and instantiates it\r\n\t * @private\r\n\t */\r\n\t_loadSignals : function () {\r\n\t\tvar signals = this.signals || {};\r\n\t\tsys.each( signals, function ( value, key ) {\r\n\t\t\tvar opts = {};\r\n\t\t\tif ( !sys.isEmpty( value ) ) {\r\n\t\t\t\tif ( sys.isBoolean( value.memorize ) ) {\r\n\t\t\t\t\topts.memorize = value.memorize;\r\n\t\t\t\t}\r\n\t\t\t\tif ( sys.isBoolean( value.params ) ) {\r\n\t\t\t\t\topts.params = value.params;\r\n\t\t\t\t}\r\n\t\t\t\tif ( !sys.isEmpty( value.context ) ) {\r\n\t\t\t\t\topts.context = value.context;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._addSignal( key, opts );\r\n\t\t} );\r\n\t},\r\n\t/**\r\n\t * Creates a single signal\r\n\t * @param {string} name The name of the signal\r\n\t * @param {module:mixins/signalable~SignalOptions} options The options the signal expects\r\n\t * @private\r\n\t */\r\n\t_addSignal   : function ( name, options ) {\r\n\t\tif ( sys.isEmpty( this[name] ) ) {\r\n\t\t\tthis[name] = new Signal( this, name, options );\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * Add a signal to an object. If any members of the hash already exist in `this.signals`, they will be overwritten.\r\n\t * @param {module:mixins/signalable.SignalOptions} signals\r\n\t * @private\r\n\t */\r\n\t_addSignals : function ( signals ) {\r\n\t\tsignals = signals || {};\r\n\t\tif ( this.options ) {signals = sys.extend( {}, sys.result( this, 'signals' ), signals );}\r\n\t\tthis.signals = signals;\r\n\t},\r\n\t/**\r\n\t * Clean up\r\n\t * @private\r\n\t */\r\n\tdestroy     : function () {\r\n\t\tsys.each( sys.keys( this ), function ( key ) {\r\n\t\t\tif ( this[key] instanceof Signal || this[key] instanceof signals.Signal ) {\r\n\t\t\t\tthis[key].close();\r\n\t\t\t}\r\n\t\t}, this );\r\n\t}\r\n} );\r\n\r\nmodule.exports = Signalable;\r\nalable.Signal = Signal;\r\nSignalable.mixin = Base.mixin;\r\n\r\n/**\r\n * When true, the class will load the `signals` hash and create the signal definitions during construction\r\n * @memberOf mixins/signalable#\r\n * @name autoLoadSignals\r\n * @type boolean\r\n */\r\n\r\n\r\n/**\r\n * A hash of signals to create automatically. Each definition consists of a name for the signal as the key\r\n * and then a hash of options (nullable) for each signal\r\n * @type {hash|function():hash}\r\n * @memberOf mixins/signalable#\r\n * @name signals\r\n * @type module:mixins/signalable.SignalOptions\r\n */\r\n"}],"content":"\r\n\r\n\r\n\r\n    \r\n    <section>\r\n        <article>\r\n            <pre class=\"prettyprint source linenums\"><code>\"use strict\";\r\n/**\r\n * @fileOverview Add the ability to fire signals on your objects. Signals are events, but hard coded into the object\r\n * and don't rely on strings like other events and `eventables`\r\n * @module mixins/signalable\r\n * @requires base\r\n * @requires signals\r\n * @requires base/logger\r\n */\r\n\r\nvar Base = require( \"../base\" );\r\nvar signals = require( 'signals' );\r\nvar format = require( \"../strings/format\" );\r\nvar sys = require( \"lodash\" );\r\n\r\n/**\r\n * @typedef\r\n * @property {boolean=} memorize If Signal should keep record of previously dispatched parameters and automatically execute listener. Defaults to `false`\r\n * @property {array=} params Default parameters passed to listener during `Signal.raise`/`Signal.fire`/`Signal.trigger` and SignalBinding.execute. (curried parameters). Defaults to `null`\r\n * @property {object=} context When provided the signal will be raised in the context of this object. Defaults to `this` - the signal host\r\n * @name SignalOptions\r\n * @memberOf module:mixins/signalable\r\n * @example\r\n *\r\n *  signals:{\r\n *      opened: null,\r\n *      twisted: { memorize:true },\r\n *      applied: { memorize: false, params:[one, two] }\r\n *  }\r\n *\r\n *  // Setting the context initially can be a hassle, so this also supports a function that returns a hash\r\n *\r\n *  signals: function(){\r\n *      return {\r\n *      opened: null,\r\n *      twisted: { memorize:true },\r\n *      applied: { memorize: false, params:[one, two] },\r\n *      reversed: {context: someOtherRuntimeObject}\r\n *      };\r\n *  }\r\n *\r\n */\r\n\r\n/**\r\n * @classDesc A signal that can be raised on an object. When you deploy the `Signalable` mixin, it\r\n * creates instances of these for you.\r\n *\r\n * @constructor\r\n * @param {?object} host If hosted, you can identify the host here.\r\n * @param {?string} name The name of the signal\r\n * @type module:mixins/signalable.SignalOptions\r\n */\r\nvar Signal = Base.compose( [Base, signals.Signal], /** @lends module:mixins/signalable~Signal# */{\r\n\tdeclaredClass : \"mixins/Signal\",\r\n\r\n\tconstructor : function ( host, name, options ) {\r\n\t\toptions = options || {};\r\n\t\tthis.memorize = options.memorize === true;\r\n\t\tthis.host = host;\r\n\t\tthis.trigger = this.fire = this.raise = this.dispatch;\r\n\t\tthis.name = name || sys.uniqueId( \"signal\" );\r\n\t\tthis.params = options.params;\r\n\t\tthis.defaultContext = options.context;\r\n\t},\r\n\r\n\t/**\r\n\t * Cleans up\r\n\t * @private\r\n\t */\r\n\tdestroy : function () {\r\n\t\tthis.removeAll();\r\n\t\tthis.dispose();\r\n\t\tthis.host = null;\r\n\t},\r\n\r\n\t/**\r\n\t * Ties a listener to a signal.\r\n\t * @param {function} listener The function to call when the signal is raised\r\n\t * @param {?object} listenerContext A context to set for the listener. The event host may set a default for this value, but you may override that here.\r\n\t * @param {?number} priority A priority for the listener.\r\n\t * @returns {SignalBinding}\r\n\t */\r\n\ton       : function ( listener, listenerContext, priority ) {\r\n\t\tif ( sys.isNumber( listenerContext ) ) {\r\n\t\t\tpriority = listenerContext;\r\n\t\t\tlistenerContext = null;\r\n\t\t}\r\n\t\tlistenerContext = listenerContext || this.defaultContext || this.host;\r\n\t\tvar binding = this.add( listener, listenerContext, priority );\r\n\t\tif ( this.options.params ) {\r\n\t\t\tbinding.params = this.arams;\r\n\t\t}\r\n\t\treturn binding;\r\n\t},\r\n\t/**\r\n\t * Ties a listener to for a signal for one execution.\r\n\t * @param {function} listener The function to call when the signal is raised\r\n\t * @param {?object} listenerContext A context to set for the listener. The event host may set a default for this value, but you may override that here.\r\n\t * @param {?number} priority A priority for the listener.\r\n\t * @returns {SignalBinding}\r\n\t */\r\n\tonce     : function ( listener, listenerContext, priority ) {\r\n\t\tif ( sys.isNumber( listenerContext ) ) {\r\n\t\t\tpriority = listenerContext;\r\n\t\t\tlistenerContext = null;\r\n\t\t}\r\n\t\tlistenerContext = listenerContext || this.defaultContext || this.host;\r\n\t\tvar binding = this.addOnce( listener, listenerContext, priority );\r\n\t\tif ( this.options.params ) {\r\n\t\t\tbinding.params = this.params;\r\n\t\t}\r\n\t\treturn binding;\r\n\t},\r\n\t/**\r\n\t * Unbinds a listener to a signal.\r\n\t * @param {function} listener The function to unbind\r\n\t * @param {?object} listenerContext The context that was bound\r\n\t * @returns {function}\r\n\t */\r\n\toff      : function ( listener, listenerContext ) {\r\n\t\tlistenerContext = listenerContext || this.host;\r\n\t\treturn this.remove( listener, listenerContext );\r\n\t},\r\n\t/**\r\n\t * Check if listener was attached to Signal.\r\n\t * @param {function} listener The function to check\r\n\t * @param {?object} listenerContext The context that was bound\r\n\t * @returns {boolean}\r\n\t */\r\n\thas      : function ( listener, listenerContext ) {\r\n\t\tlistenerContext = listenerContext || this.defaultContext || this.host;\r\n\t\treturn this.remove( listener, listenerContext );\r\n\t},\r\n\t/**\r\n\t * Strings!\r\n\t */\r\n\ttoString : function () {\r\n\t\treturn  format( \"{0}\\nname:{1}\\nlisteners:{2}\",\r\n\t\t\tthis.declaredClass,\r\n\t\t\tthis.name,\r\n\t\t\tthis.getNumListeners()\r\n\t\t);\r\n\t}\r\n\r\n} );\r\n\r\n/**\r\n * @classDesc Make an object capable of handling a signal. Or many signals.\r\n * @exports mixins/signalable\r\n * @mixin\r\n * @extends base\r\n */\r\nvar Signalable = Base.compose( [Base], /** @lends mixins/signalable# */{\r\n\tdeclaredClass : \"mixins/Signalable\",\r\n\r\n\tconstructor    : function () {\r\n\t\tthis.autoLoadSignals = this.autoLoadSignals || true;\r\n\t\tif ( this.autoLoadSignals === true ) {\r\n\t\t\tthis._loadSignals();\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * When you make a change to the signals hash after loading, then you can make it reload\r\n\t */\r\n\trefreshSignals : function () {\r\n\t\tthis._loadSignals();\r\n\t},\r\n\r\n\t/**\r\n\t * Interprets the `signals` hash and instantiates it\r\n\t * @private\r\n\t */\r\n\t_loadSignals : function () {\r\n\t\tvar signals = this.signals || {};\r\n\t\tsys.each( signals, function ( value, key ) {\r\n\t\t\tvar opts = {};\r\n\t\t\tif ( !sys.isEmpty( value ) ) {\r\n\t\t\t\tif ( sys.isBoolean( value.memorize ) ) {\r\n\t\t\t\t\topts.memorize = value.memorize;\r\n\t\t\t\t}\r\n\t\t\t\tif ( sys.isBoolean( value.params ) ) {\r\n\t\t\t\t\topts.params = value.params;\r\n\t\t\t\t}\r\n\t\t\t\tif ( !sys.isEmpty( value.context ) ) {\r\n\t\t\t\t\topts.context = value.context;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._addSignal( key, opts );\r\n\t\t} );\r\n\t},\r\n\t/**\r\n\t * Creates a single signal\r\n\t * @param {string} name The name of the signal\r\n\t * @param {module:mixins/signalable~SignalOptions} options The options the signal expects\r\n\t * @private\r\n\t */\r\n\t_addSignal   : function ( name, options ) {\r\n\t\tif ( sys.isEmpty( this[name] ) ) {\r\n\t\t\tthis[name] = new Signal( this, name, options );\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * Add a signal to an object. If any members of the hash already exist in `this.signals`, they will be overwritten.\r\n\t * @param {module:mixins/signalable.SignalOptions} signals\r\n\t * @private\r\n\t */\r\n\t_addSignals : function ( signals ) {\r\n\t\tsignals = signals || {};\r\n\t\tif ( this.options ) {signals = sys.extend( {}, sys.result( this, 'signals' ), signals );}\r\n\t\tthis.signals = signals;\r\n\t},\r\n\t/**\r\n\t * Clean up\r\n\t * @private\r\n\t */\r\n\tdestroy     : function () {\r\n\t\tsys.each( sys.keys( this ), function ( key ) {\r\n\t\t\tif ( this[key] instanceof Signal || this[key] instanceof signals.Signal ) {\r\n\t\t\t\tthis[key].close();\r\n\t\t\t}\r\n\t\t}, this );\r\n\t}\r\n} );\r\n\r\nmodule.exports = Signalable;\r\nalable.Signal = Signal;\r\nSignalable.mixin = Base.mixin;\r\n\r\n/**\r\n * When true, the class will load the `signals` hash and create the signal definitions during construction\r\n * @memberOf mixins/signalable#\r\n * @name autoLoadSignals\r\n * @type boolean\r\n */\r\n\r\n\r\n/**\r\n * A hash of signals to create automatically. Each definition consists of a name for the signal as the key\r\n * and then a hash of options (nullable) for each signal\r\n * @type {hash|function():hash}\r\n * @memberOf mixins/signalable#\r\n * @name signals\r\n * @type module:mixins/signalable.SignalOptions\r\n */\r\n</code></pre>\r\n        </article>\r\n    </section>\r\n\r\n\r\n\r\n"}{"type":"Source","title":"documents/binder.js","docs":[{"kind":"source","code":"\"use strict\";\r\n/**\r\n * @fileOverview allows you to bind a change watcher that looks for get and set operations on an arbitrary\r\n * property of an object at at any depth. This allows you to look for changes or intercept values asynchronously or otherwise.\r\n * @module documents/binder\r\n * @requires async\r\n * @requires documents/probe\r\n * @requires lodash\r\n * @requires promise\r\n */\r\nvar Promise = require( 'promise' );\r\nvar async = require( \"async\" );\r\nvar probe = require( \"./probe\" );\r\nvar sys = require( \"lodash\" );\r\n\r\n/**\r\n * Identifies the properties that the binder expects\r\n * @type {{getter: null, getterAsync: boolean, setter: null, validator: null, validatorAsync: boolean, setterAsync: boolean}}\r\n * @private\r\n */\r\nvar dataBinderOptions = exports.dataBinderOptions = {\r\n\tgetter         : null,\r\n\tgetterAsync    : false,\r\n\tsetter         : null,\r\n\tvalidator      : null,\r\n\tvalidatorAsync : false,\r\n\tsetterAsync    : false\r\n};\r\n\r\n/**\r\n * You can unbind previously bound objects from here.\r\n *\r\n * @param {string} path The path that was bound using {@link module:documents/binder.bind}\r\n * @param {*} record The object that was bound\r\n */\r\nexports.unbind = function ( path, record ) {\r\n\tvar context = record;\r\n\tvar lastParent = context;\r\n\tvar parts = path.split( probe.delimiter );\r\n\tvar lastPartName = path;\r\n\tvar lastParentName;\r\n\tsys.each( parts, function ( part ) {\r\n\t\tlastParentName = part;\r\n\t\tlastParent = context;\r\n\t\tcontext = context[part];\r\n\t\tlastPartName = part;\r\n\t\tif ( sys.isNull( context ) || sys.isUndefined( context ) ) {\r\n\t\t\tcontext = {};\r\n\t\t}\r\n\t} );\r\n\r\n\tif ( lastParent === context ) {\r\n\t\tdeleteBindings( record, lastPartName );\r\n\t} else {\r\n\t\tdeleteBindings( lastParent, lastPartName );\r\n\t}\r\n\r\n\tfunction deleteBindings( mountPoint, mountName ) {\r\n\t\tmountPoint[mountName] = mountPoint[\"__\" + mountName + \"__\"];\r\n\t\tdelete mountPoint[\"__\" + mountName + \"__\"];\r\n\t}\r\n};\r\n\r\n/**\r\n * Bind to a property somewhere in an object. The property is found using dot notation and can be arbitrarily deep.\r\n * @param {string} path The path into the object to locate the property. For instance this could be `\"_id\"`, `\"name.last\"`.\r\n * or `\"some.really.really.long.path.including.an.array.2.name\"`\r\n * @param {object} record Anything you can hang a property off of\r\n * @param {options} options What you wanna do with the doohicky when yoyu bind it.\r\n * @param {function(*):Promise|*=} options.getter This is the method to run when getting the value. When it runs, you will receive\r\n * a single parameter which is the current value as the object understands it. You can return the value directly, just raise an event or\r\n * whatever your little heart demands. However, if you are asynchronous, this will turn your return value into a promise, one of the\r\n * few places this system will embrace promises over node-like error passing and that is mainly because this is a getter so a return value\r\n * is particularly important. *\r\n * @param {*} options.getter.value The current value of the record\r\n * @param {function(err, value)=} options.getter.callback When asynchronous, return you value through this method using node style\r\n * error passing (the promise is handled for you by this method).\r\n * @param {boolean=} options.getterAsync When true (not truthy) the getter is treated asynchronously and returns a promise with your value.\r\n * @param {function(*, *, *)=} options.setter A setter method\r\n * @param {*} options.setter.newVal The new value\r\n * @param {*} options.setter.oldVal The old value\r\n * @param {*} options.setter.record The record hosting the change\r\n * @param {function(*, *, *, function=)=} options.validator If you want a validator to run before settings values, pass this guy in\r\n * @param {*} options.validator.newVal The new value\r\n * @param {*} options.validator.oldVal The old value\r\n * @param {*} options.validator.record The record hosting the change\r\n * @param {function(err)=} options.validator.callback If the validator is asynchronous, then pass your value back here, otherwise pass it back as a return value.\r\n * When you use an asynchronous instance, pass the error in the first value and then the rest of the parameters are yours to play with\r\n * @param {boolean=} options.validatorAsync When true (not truthy) the validator is treated asynchornously and returns a promise with your value.\r\n * @returns {*}\r\n */\r\nexports.bind = function ( path, record, options ) {\r\n\toptions = sys.extend( {}, dataBinderOptions, options );\r\n\tvar context = record;\r\n\tvar lastParent = context;\r\n\tvar parts = path.split( probe.delimiter );\r\n\tvar lastPartName = path;\r\n\tvar lastParentName;\r\n\r\n\tsys.each( parts, function ( part ) {\r\n\t\tlastParentName = part;\r\n\t\tlastParent = context;\r\n\t\tcontext = context[part];\r\n\t\tlastPartName = part;\r\n\t\tif ( sys.isNull( context ) || sys.isUndefined( context ) ) {\r\n\t\t\tcontext = {};\r\n\t\t}\r\n\t} );\r\n\r\n\tif ( lastParent === context ) {\r\n\t\tsetUpBindings( record, lastPartName );\r\n\t} else {\r\n\t\tsetUpBindings( lastParent, lastPartName );\r\n\t}\r\n\r\n\tfunction setUpBindings( mountPoint, mountName ) {\r\n\t\tmountPoint[\"__\" + mountName + \"__\"] = mountPoint[mountName];\r\n\t\tObject.defineProperty( mountPoint, mountName, {\r\n\t\t\tget : function () {\r\n\t\t\t\tif ( sys.isFunction( options.getter ) ) {\r\n\t\t\t\t\tvar promise;\r\n\t\t\t\t\tif ( options.getterAsync === true ) {\r\n\t\t\t\t\t\tpromise = Promise.denodeify( options.getter );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( promise ) {\r\n\t\t\t\t\t\treturn promise( mountPoint[\"__\" + mountName + \"__\"] ).then( function ( val ) {\r\n\t\t\t\t\t\t\tmountPoint[\"__\" + mountName + \"__\"] = val;\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmountPoint[\"__\" + mountName + \"__\"] = options.getter( mountPoint[\"__\" + mountName + \"__\"] );\r\n\t\t\t\t\t\treturn mountPoint[\"__\" + mountName + \"__\"];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn mountPoint[\"__\" + mountName + \"__\"];\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tset : function ( val ) {\r\n\t\t\t\tasync.waterfall( [\r\n\t\t\t\t\tfunction ( done ) {\r\n\t\t\t\t\t\tif ( sys.isFunction( options.validator ) ) {\r\n\t\t\t\t\t\t\tif ( options.validatorAsync ) {\r\n\t\t\t\t\t\t\t\toptions.validator( val, mountPoint[\"__\" + mountName + \"__\"], record, done );\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvar res = options.validator( val, mountPoint[\"__\" + mountName + \"__\"], record );\r\n\t\t\t\t\t\t\t\tif ( res === true ) {\r\n\t\t\t\t\t\t\t\t\tdone();\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tdone( res );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdone();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfunction ( done ) {\r\n\t\t\t\t\t\tif ( sys.isFunction( options.setter ) ) {\r\n\t\t\t\t\t\t\tif ( options.setterAsync === true ) {\r\n\t\t\t\t\t\t\t\toptions.setter( val, mountPoint[\"__\" + mountName + \"__\"], record, done );\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tdone( null, options.setter( val, mountPoint[\"__\" + mountName + \"__\"], record ) );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdone( null, val );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t], function ( err, newVal ) {\r\n\t\t\t\t\tif ( err ) { throw new Error( err ); }\r\n\t\t\t\t\tmountPoint[\"__\" + mountName + \"__\"] = newVal;\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n\r\n\treturn context;\r\n};\r\n"}],"content":"\r\n\r\n\r\n\r\n    \r\n    <section>\r\n        <article>\r\n            <pre class=\"prettyprint source linenums\"><code>\"use strict\";\r\n/**\r\n * @fileOverview allows you to bind a change watcher that looks for get and set operations on an arbitrary\r\n * property of an object at at any depth. This allows you to look for changes or intercept values asynchronously or otherwise.\r\n * @module documents/binder\r\n * @requires async\r\n * @requires documents/probe\r\n * @requires lodash\r\n * @requires promise\r\n */\r\nvar Promise = require( 'promise' );\r\nvar async = require( \"async\" );\r\nvar probe = require( \"./probe\" );\r\nvar sys = require( \"lodash\" );\r\n\r\n/**\r\n * Identifies the properties that the binder expects\r\n * @type {{getter: null, getterAsync: boolean, setter: null, validator: null, validatorAsync: boolean, setterAsync: boolean}}\r\n * @private\r\n */\r\nvar dataBinderOptions = exports.dataBinderOptions = {\r\n\tgetter         : null,\r\n\tgetterAsync    : false,\r\n\tsetter         : null,\r\n\tvalidator      : null,\r\n\tvalidatorAsync : false,\r\n\tsetterAsync    : false\r\n};\r\n\r\n/**\r\n * You can unbind previously bound objects from here.\r\n *\r\n * @param {string} path The path that was bound using {@link module:documents/binder.bind}\r\n * @param {*} record The object that was bound\r\n */\r\nexports.unbind = function ( path, record ) {\r\n\tvar context = record;\r\n\tvar lastParent = context;\r\n\tvar parts = path.split( probe.delimiter );\r\n\tvar lastPartName = path;\r\n\tvar lastParentName;\r\n\tsys.each( parts, function ( part ) {\r\n\t\tlastParentName = part;\r\n\t\tlastParent = context;\r\n\t\tcontext = context[part];\r\n\t\tlastPartName = part;\r\n\t\tif ( sys.isNull( context ) || sys.isUndefined( context ) ) {\r\n\t\t\tcontext = {};\r\n\t\t}\r\n\t} );\r\n\r\n\tif ( lastParent === context ) {\r\n\t\tdeleteBindings( record, lastPartName );\r\n\t} else {\r\n\t\tdeleteBindings( lastParent, lastPartName );\r\n\t}\r\n\r\n\tfunction deleteBindings( mountPoint, mountName ) {\r\n\t\tmountPoint[mountName] = mountPoint[\"__\" + mountName + \"__\"];\r\n\t\tdelete mountPoint[\"__\" + mountName + \"__\"];\r\n\t}\r\n};\r\n\r\n/**\r\n * Bind to a property somewhere in an object. The property is found using dot notation and can be arbitrarily deep.\r\n * @param {string} path The path into the object to locate the property. For instance this could be `\"_id\"`, `\"name.last\"`.\r\n * or `\"some.really.really.long.path.including.an.array.2.name\"`\r\n * @param {object} record Anything you can hang a property off of\r\n * @param {options} options What you wanna do with the doohicky when yoyu bind it.\r\n * @param {function(*):Promise|*=} options.getter This is the method to run when getting the value. When it runs, you will receive\r\n * a single parameter which is the current value as the object understands it. You can return the value directly, just raise an event or\r\n * whatever your little heart demands. However, if you are asynchronous, this will turn your return value into a promise, one of the\r\n * few places this system will embrace promises over node-like error passing and that is mainly because this is a getter so a return value\r\n * is particularly important. *\r\n * @param {*} options.getter.value The current value of the record\r\n * @param {function(err, value)=} options.getter.callback When asynchronous, return you value through this method using node style\r\n * error passing (the promise is handled for you by this method).\r\n * @param {boolean=} options.getterAsync When true (not truthy) the getter is treated asynchronously and returns a promise with your value.\r\n * @param {function(*, *, *)=} options.setter A setter method\r\n * @param {*} options.setter.newVal The new value\r\n * @param {*} options.setter.oldVal The old value\r\n * @param {*} options.setter.record The record hosting the change\r\n * @param {function(*, *, *, function=)=} options.validator If you want a validator to run before settings values, pass this guy in\r\n * @param {*} options.validator.newVal The new value\r\n * @param {*} options.validator.oldVal The old value\r\n * @param {*} options.validator.record The record hosting the change\r\n * @param {function(err)=} options.validator.callback If the validator is asynchronous, then pass your value back here, otherwise pass it back as a return value.\r\n * When you use an asynchronous instance, pass the error in the first value and then the rest of the parameters are yours to play with\r\n * @param {boolean=} options.validatorAsync When true (not truthy) the validator is treated asynchornously and returns a promise with your value.\r\n * @returns {*}\r\n */\r\nexports.bind = function ( path, record, options ) {\r\n\toptions = sys.extend( {}, dataBinderOptions, options );\r\n\tvar context = record;\r\n\tvar lastParent = context;\r\n\tvar parts = path.split( probe.delimiter );\r\n\tvar lastPartName = path;\r\n\tvar lastParentName;\r\n\r\n\tsys.each( parts, function ( part ) {\r\n\t\tlastParentName = part;\r\n\t\tlastParent = context;\r\n\t\tcontext = context[part];\r\n\t\tlastPartName = part;\r\n\t\tif ( sys.isNull( context ) || sys.isUndefined( context ) ) {\r\n\t\t\tcontext = {};\r\n\t\t}\r\n\t} );\r\n\r\n\tif ( lastParent === context ) {\r\n\t\tsetUpBindings( record, lastPartName );\r\n\t} else {\r\n\t\tsetUpBindings( lastParent, lastPartName );\r\n\t}\r\n\r\n\tfunction setUpBindings( mountPoint, mountName ) {\r\n\t\tmountPoint[\"__\" + mountName + \"__\"] = mountPoint[mountName];\r\n\t\tObject.defineProperty( mountPoint, mountName, {\r\n\t\t\tget : function () {\r\n\t\t\t\tif ( sys.isFunction( options.getter ) ) {\r\n\t\t\t\t\tvar promise;\r\n\t\t\t\t\tif ( options.getterAsync === true ) {\r\n\t\t\t\t\t\tpromise = Promise.denodeify( options.getter );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( promise ) {\r\n\t\t\t\t\t\treturn promise( mountPoint[\"__\" + mountName + \"__\"] ).then( function ( val ) {\r\n\t\t\t\t\t\t\tmountPoint[\"__\" + mountName + \"__\"] = val;\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmountPoint[\"__\" + mountName + \"__\"] = options.getter( mountPoint[\"__\" + mountName + \"__\"] );\r\n\t\t\t\t\t\treturn mountPoint[\"__\" + mountName + \"__\"];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn mountPoint[\"__\" + mountName + \"__\"];\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tset : function ( val ) {\r\n\t\t\t\tasync.waterfall( [\r\n\t\t\t\t\tfunction ( done ) {\r\n\t\t\t\t\t\tif ( sys.isFunction( options.validator ) ) {\r\n\t\t\t\t\t\t\tif ( options.validatorAsync ) {\r\n\t\t\t\t\t\t\t\toptions.validator( val, mountPoint[\"__\" + mountName + \"__\"], record, done );\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvar res = options.validator( val, mountPoint[\"__\" + mountName + \"__\"], record );\r\n\t\t\t\t\t\t\t\tif ( res === true ) {\r\n\t\t\t\t\t\t\t\t\tdone();\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tdone( res );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdone();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfunction ( done ) {\r\n\t\t\t\t\t\tif ( sys.isFunction( options.setter ) ) {\r\n\t\t\t\t\t\t\tif ( options.setterAsync === true ) {\r\n\t\t\t\t\t\t\t\toptions.setter( val, mountPoint[\"__\" + mountName + \"__\"], record, done );\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tdone( null, options.setter( val, mountPoint[\"__\" + mountName + \"__\"], record ) );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdone( null, val );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t], function ( err, newVal ) {\r\n\t\t\t\t\tif ( err ) { throw new Error( err ); }\r\n\t\t\t\t\tmountPoint[\"__\" + mountName + \"__\"] = newVal;\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n\r\n\treturn context;\r\n};\r\n</code></pre>\r\n        </article>\r\n    </section>\r\n\r\n\r\n\r\n"}{"type":"Source","title":"documents/collector.js","docs":[{"kind":"source","code":"\"use strict\";\r\n/**\r\n @fileOverview An object and array collector\r\n @module ink/collector\r\n */\r\n\r\nvar probe = require( \"ink-probe\" );\r\nvar sys = require( \"lodash\" );\r\nvar dcl = require( \"dcl\" );\r\n\r\n/**\r\n * A collector\r\n * @constructor\r\n */\r\nvar CollectorBase = dcl( Destroyable, {\r\n\tdeclaredClass : \"CollectorBase\",\r\n\tconstructor   : function ( obj ) {\r\n\t\tvar that = this;\r\n\t\tif ( obj &amp;&amp; !sys.isObject( obj ) ) {\r\n\t\t\tthrow new TypeError( \"Collectors require an initial object or array passed to the constructor\" );\r\n\t\t}\r\n\t\t/**\r\n\t\t * The collection that being managed\r\n\t\t * @type {object|array}\r\n\t\t */\r\n\t\tthis.heap = obj || {};\r\n\t\t// mixin the probe\r\n\t\tprobe.mixTo( this, this.heap );\r\n\t\t/**\r\n\t\t * Get the size of the collection\r\n\t\t * @name length\r\n\t\t * @type {number}\r\n\t\t * @memberOf module:documents/collector~CollectorBase#\r\n\t\t */\r\n\t\tObject.defineProperty( this, \"length\", {\r\n\t\t\t\tget : function () {\r\n\t\t\t\t\treturn sys.size( that.heap );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\t/**\r\n\t\t * Creates an array of shuffled array values, using a version of the Fisher-Yates shuffle.\r\n\t\t * See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\r\n\t\t * @function\r\n\t\t * @memberOf module:documents/collector~CollectorBase#\r\n\t\t * @returns {array}\r\n\t\t */\r\n\t\tthis.shuffle = sys.bind( sys.shuffle, this, this.heap );\r\n\r\n\t},\r\n\t/**\r\n\t * Adds an item to the collection\r\n\t * @param {*} key The key to use for the item being added.\r\n\t * @param {*} item The item to add to the collection. The item is not iterated so that you could add bundled items to the collection\r\n\t */\r\n\tadd           : function ( key, item ) {\r\n\t\tthis.heap[key] = item;\r\n\t},\r\n\t/**\r\n\t * Iterate over each item in the collection, or a subset that matches a query. This supports two signatures:\r\n\t * `.each(query, function)` and `.each(function)`. If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {object=} query A query to evaluate\r\n\t * @param {function(val, key)} iterator Function to execute against each item in the collection\r\n\t * @param {object=} thisobj The value of `this`\r\n\t */\r\n\teach          : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\tsys.each( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\tsys.each( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Returns the collection as an array. If it is already an array, it just returns that.\r\n\t * @return {array}\r\n\t */\r\n\ttoArray       : function () {\r\n\t\treturn sys.toArray( this.heap );\r\n\t},\r\n\t/**\r\n\t * Supports conversion to a JSON string or for passing over the wire\r\n\t * @return {object}\r\n\t * @returns {Object|array}\r\n\t */\r\n\ttoJSON        : function () {\r\n\t\treturn this.heap;\r\n\t},\r\n\t/**\r\n\t * Maps the contents to an array by iterating over it and transforming it. You supply the iterator. Supports two signatures:\r\n\t * `.map(query, function)` and `.map(function)`. If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {object=} query A query to evaluate\r\n\t * @param {function(val, key)} iterator Function to execute against each item in the collection\r\n\t * @param {object=} thisobj The value of `this`\r\n\t */\r\n\tmap           : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.map( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\treturn sys.map( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Reduces a collection to a value which is the accumulated result of running each element in the collection through the\r\n\t * callback, where each successive callback execution consumes the return value of the previous execution. If accumulator\r\n\t * is not passed, the first element of the collection will be used as the initial accumulator value.\r\n\t * are iterated over.\r\n\t * @param {object=} query A query to evaluate\r\n\t * @param {function(result, val, key)} iterator The function that will be executed in each item in the collection\r\n\t * @param {*=} accumulator Initial value of the accumulator.\r\n\t * @param {object=} thisobj The value of `this`\r\n\t * @return {*}\r\n\t */\r\n\treduce        : function ( query, iterator, accumulator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.reduce( this.find( query ), iterator, accumulator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = accumulator || this;\r\n\t\t\treturn  sys.reduce( this.heap, query, iterator, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Creates an object composed of keys returned from running each element\r\n\t * of the collection through the given callback. The corresponding value of each key\r\n\t * is the number of times the key was returned by the callback.\r\n\t * @param {object=} query A query to evaluate. If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param  {function(value, key, collection)} iterator\r\n\t * @param {object=} thisobj The value of `this`\r\n\t * @return {object}\r\n\t */\r\n\tcountBy       : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.countBy( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\treturn sys.countBy( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Creates an object composed of keys returned from running each element of the collection through the callback.\r\n\t * The corresponding value of each key is an array of elements passed to callback that returned the key.\r\n\t * The callback is invoked with three arguments: (value, index|key, collection).\r\n\t * @param {object=} query A query to evaluate . If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {function(value, key, collection)} iterator\r\n\t * @param {object=} thisobj The value of `this`\r\n\t * @return {object}\r\n\t */\r\n\tgroupBy       : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.groupBy( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\treturn sys.groupBy( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Reduce the collection to a single value. Supports two signatures:\r\n\t * `.pluck(query, function)` and `.pluck(function)`\r\n\t * @param {object=} query The query to evaluate. If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {string} property The property that will be 'plucked' from the contents of the collection\r\n\t * @return {*}\r\n\t */\r\n\tpluck         : function ( query, property ) {\r\n\t\tif ( arguments.length === 2 ) {\r\n\t\t\treturn sys.map( this.find( query ), function ( record ) {\r\n\t\t\t\treturn probe.get( record, property );\r\n\t\t\t} );\r\n\t\t} else {\r\n\t\t\treturn sys.map( this.heap, function ( record ) {\r\n\t\t\t\treturn probe.get( record, query );\r\n\t\t\t} );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Returns a sorted copy of the collection.\r\n\t * @param {object=} query The query to evaluate. If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {function(value, key)} iterator\r\n\t * @param {object=} thisobj The value of `this`\r\n\t * @return {array}\r\n\t */\r\n\tsortBy        : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.sortBy( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\treturn sys.sortBy( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Retrieves the maximum value of an array. If callback is passed,\r\n\t * it will be executed for each value in the array to generate the criterion by which the value is ranked.\r\n\t * @param {object=} query A query to evaluate . If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {function(value, key, collection)} iterator\r\n\t * @param {object=} thisobj The value of `this`\r\n\t * @return {number}\r\n\t */\r\n\tmax           : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.max( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\treturn sys.max( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Retrieves the minimum value of an array. If callback is passed,\r\n\t * it will be executed for each value in the array to generate the criterion by which the value is ranked.\r\n\t * @param {object=} query A query to evaluate . If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {function(value, key, collection)} iterator\r\n\t * @param {object=} thisobj The value of `this`\r\n\t * @return {number}\r\n\t */\r\n\tmin           : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.min( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\treturn sys.min( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Destructor called when the object is destroyed.\r\n\t */\r\n\tdestroy       : function () {\r\n\t\tthis.heap = null;\r\n\t}\r\n} );\r\n\r\n/**\r\n * An object based collector\r\n * @extends module:documents/collector~CollectorBase\r\n * @constructor\r\n */\r\nvar OCollector = dcl( CollectorBase, {\r\n\t/**\r\n\t * Get a record by key\r\n\t * @param {*} key The key of the record to get\r\n\t * @return {*}\r\n\t */\r\n\tkey : function ( key ) {\r\n\t\treturn this.heap[key];\r\n\t}\r\n} );\r\n\r\n//noinspection JSCommentMatchesSignature\r\n/**\r\n An array based collector\r\n @extends module:documents/collector~CollectorBase\r\n @constructor\r\n */\r\nvar ACollector = dcl( CollectorBase, {\r\n\t\tconstructor : function ( obj ) {\r\n\t\t\tif ( obj &amp;&amp; !sys.isArray( obj ) ) {\r\n\t\t\t\tthrow new TypeError( \"Collectors require an array passed to the constructor\" );\r\n\t\t\t}\r\n\t\t\tthis.heap = obj || [];\r\n\t\t\t/**\r\n\t\t\t * Creates an array of array elements not present in the other arrays using strict equality for comparisons, i.e. ===.\r\n\t\t\t * @returns {array}\r\n\t\t\t */\r\n\t\t\tthis.difference = sys.bind( sys.difference, this, this.heap );\r\n\t\t\t/**\r\n\t\t\t * This method gets all but the first values of array\r\n\t\t\t * @param {number=} n The numer of items to return\r\n\t\t\t * @returns {*}\r\n\t\t\t */\r\n\t\t\tthis.tail = sys.bind( sys.tail, this, this.heap );\r\n\t\t\t/**\r\n\t\t\t * Gets the first n values of the array\r\n\t\t\t * @param {number=} n The numer of items to return\r\n\t\t\t * @returns {*}\r\n\t\t\t */\r\n\t\t\tthis.head = sys.bind( sys.head, this, this.heap );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Adds to the top of the collection\r\n\t\t * @param {*} item The item to add to the collection. Only one item at a time can be added\r\n\t\t */\r\n\t\tadd         : function ( item ) {\r\n\t\t\tthis.heap.unshift( item );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Add to the bottom of the list\r\n\t\t * @param {*} item The item to add to the collection.  Only one item at a time can be added\r\n\t\t */\r\n\t\tappend      : function ( item ) {\r\n\t\t\tthis.heap.push( item );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Add an item to the top of the list. This is identical to `add`, but is provided for stack semantics\r\n\t\t * @param {*} item The item to add to the collection. Only one item at a time can be added\r\n\t\t */\r\n\t\tpush        : function ( item ) {\r\n\t\t\tthis.add( item );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Modifies the collection with all falsey values of array removed. The values false, null, 0, \"\", undefined and NaN are all falsey.\r\n\t\t */\r\n\t\tcompact     : function () {\r\n\t\t\tthis.heap = sys.compact( this.heap );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Creates an array of elements from the specified indexes, or keys, of the collection. Indexes may be specified as\r\n\t\t * individual arguments or as arrays of indexes\r\n\t\t * @param {indexes} args The indexes to use\r\n\t\t */\r\n\t\tat          : function () {\r\n\t\t\tvar arr = sys.toArray( arguments );\r\n\t\t\tarr.unshift( this.heap );\r\n\t\t\treturn sys.at.apply( this, arr );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Flattens a nested array (the nesting can be to any depth). If isShallow is truthy, array will only be flattened a single level.\r\n\t\t * If callback is passed, each element of array is passed through a callback before flattening.\r\n\t\t * @param {object=} query A query to evaluate . If you pass in a query, only the items that match the query\r\n\t\t * are iterated over.\r\n\t\t * @param {function(value, key, collection)} iterator,\r\n\t\t * @param {object=} thisobj The value of `this`\r\n\t\t * @return {number}\r\n\t\t */\r\n\t\tflatten     : function ( query, iterator, thisobj ) {\r\n\t\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\t\tthisobj = thisobj || this;\r\n\t\t\t\treturn sys.flatten( this.find( query ), iterator, thisobj );\r\n\t\t\t} else {\r\n\t\t\t\tthisobj = iterator || this;\r\n\t\t\t\treturn sys.flatten( this.heap, query, thisobj );\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * Gets an items by its index\r\n\t\t * @param {number} key The index to get\r\n\t\t * @return {*}\r\n\t\t */\r\n\t\tindex       : function ( index ) {\r\n\t\t\treturn this.heap[ index ];\r\n\t\t}\r\n\t}\r\n);\r\n\r\n/**\r\n Collect an object\r\n @param {array|object} obj What to collect\r\n @return {ACollector|OCollector}\r\n */\r\nexports.collect = function ( obj ) {\r\n\tif ( sys.isArray( obj ) ) {\r\n\t\treturn new ACollector( obj );\r\n\t} else {\r\n\t\treturn new OCollector( obj );\r\n\t}\r\n};\r\n\r\nexports.array = function ( obj ) {\r\n\treturn new ACollector( obj );\r\n};\r\n\r\nexports.object = function ( obj ) {\r\n\treturn new OCollector( obj );\r\n};\r\n\r\n/**\r\n Returns true if all items match the query. Aliases as `all`\r\n @function\r\n\r\n @param {object} qu The query to execute\r\n @returns {boolean}\r\n @name every\r\n @memberOf module:documents/collector~CollectorBase#\r\n */\r\n\r\n\r\n/**\r\n Returns true if any of the items match the query. Aliases as `any`\r\n @function\r\n\r\n @param {object} qu The query to execute\r\n @returns {boolean}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name some\r\n */\r\n\r\n\r\n/**\r\n Returns the set of unique records that match a query\r\n\r\n @param {object} qu The query to execute.\r\n @return {array}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name unique\r\n @method\r\n **/\r\n\r\n/**\r\n Returns true if all items match the query. Aliases as `every`\r\n @function\r\n\r\n @param {object} qu The query to execute\r\n @returns {boolean}\r\n @name all\r\n @memberOf module:documents/collector~CollectorBase#\r\n */\r\n\r\n\r\n/**\r\n Returns true if any of the items match the query. Aliases as `all`\r\n @function\r\n\r\n @param {object} qu The query to execute\r\n @returns {boolean}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name any\r\n */\r\n\r\n\r\n/**\r\n Remove all items in the object/array that match the query\r\n\r\n @param {object} qu The query to execute. See {@link module:ink/probe.queryOperators} for the operators you can use.\r\n @return {object|array} The array or object as appropriate without the records.\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name remove\r\n @method\r\n **/\r\n\r\n/**\r\n Returns the first record that matches the query and returns its key or index depending on whether `obj` is an object or array respectively.\r\n Aliased as `seekKey`.\r\n\r\n @param {object} qu The query to execute.\r\n @returns {object}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name findOneKey\r\n @method\r\n */\r\n\r\n\r\n/**\r\n Returns the first record that matches the query. Aliased as `seek`.\r\n\r\n @param {object} qu The query to execute.\r\n @returns {object}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name findOne\r\n @method\r\n */\r\n\r\n\r\n/**\r\n Find all records that match a query and returns the keys for those items. This is similar to {@link module:ink/probe.find} but instead of returning\r\n records, returns the keys. If `obj` is an object it will return the hash key. If 'obj' is an array, it will return the index\r\n\r\n @param {object} qu The query to execute.\r\n @returns {array}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name findKeys\r\n @method\r\n */\r\n\r\n\r\n/**\r\n Find all records that match a query\r\n\r\n @param {object} qu The query to execute.\r\n @returns {array} The results\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name find\r\n @method\r\n **/\r\n\r\n/**\r\n Updates all records in obj that match the query. See {@link module:ink/probe.updateOperators} for the operators that are supported.\r\n\r\n @param {object} qu The query which will be used to identify the records to updated\r\n @param {object} setDocument The update operator. See {@link module:ink/probe.updateOperators}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name update\r\n @method\r\n */\r\n"}],"content":"\r\n\r\n\r\n\r\n    \r\n    <section>\r\n        <article>\r\n            <pre class=\"prettyprint source linenums\"><code>\"use strict\";\r\n/**\r\n @fileOverview An object and array collector\r\n @module ink/collector\r\n */\r\n\r\nvar probe = require( \"ink-probe\" );\r\nvar sys = require( \"lodash\" );\r\nvar dcl = require( \"dcl\" );\r\n\r\n/**\r\n * A collector\r\n * @constructor\r\n */\r\nvar CollectorBase = dcl( Destroyable, {\r\n\tdeclaredClass : \"CollectorBase\",\r\n\tconstructor   : function ( obj ) {\r\n\t\tvar that = this;\r\n\t\tif ( obj &amp;&amp; !sys.isObject( obj ) ) {\r\n\t\t\tthrow new TypeError( \"Collectors require an initial object or array passed to the constructor\" );\r\n\t\t}\r\n\t\t/**\r\n\t\t * The collection that being managed\r\n\t\t * @type {object|array}\r\n\t\t */\r\n\t\tthis.heap = obj || {};\r\n\t\t// mixin the probe\r\n\t\tprobe.mixTo( this, this.heap );\r\n\t\t/**\r\n\t\t * Get the size of the collection\r\n\t\t * @name length\r\n\t\t * @type {number}\r\n\t\t * @memberOf module:documents/collector~CollectorBase#\r\n\t\t */\r\n\t\tObject.defineProperty( this, \"length\", {\r\n\t\t\t\tget : function () {\r\n\t\t\t\t\treturn sys.size( that.heap );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\t/**\r\n\t\t * Creates an array of shuffled array values, using a version of the Fisher-Yates shuffle.\r\n\t\t * See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\r\n\t\t * @function\r\n\t\t * @memberOf module:documents/collector~CollectorBase#\r\n\t\t * @returns {array}\r\n\t\t */\r\n\t\tthis.shuffle = sys.bind( sys.shuffle, this, this.heap );\r\n\r\n\t},\r\n\t/**\r\n\t * Adds an item to the collection\r\n\t * @param {*} key The key to use for the item being added.\r\n\t * @param {*} item The item to add to the collection. The item is not iterated so that you could add bundled items to the collection\r\n\t */\r\n\tadd           : function ( key, item ) {\r\n\t\tthis.heap[key] = item;\r\n\t},\r\n\t/**\r\n\t * Iterate over each item in the collection, or a subset that matches a query. This supports two signatures:\r\n\t * `.each(query, function)` and `.each(function)`. If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {object=} query A query to evaluate\r\n\t * @param {function(val, key)} iterator Function to execute against each item in the collection\r\n\t * @param {object=} thisobj The value of `this`\r\n\t */\r\n\teach          : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\tsys.each( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\tsys.each( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Returns the collection as an array. If it is already an array, it just returns that.\r\n\t * @return {array}\r\n\t */\r\n\ttoArray       : function () {\r\n\t\treturn sys.toArray( this.heap );\r\n\t},\r\n\t/**\r\n\t * Supports conversion to a JSON string or for passing over the wire\r\n\t * @return {object}\r\n\t * @returns {Object|array}\r\n\t */\r\n\ttoJSON        : function () {\r\n\t\treturn this.heap;\r\n\t},\r\n\t/**\r\n\t * Maps the contents to an array by iterating over it and transforming it. You supply the iterator. Supports two signatures:\r\n\t * `.map(query, function)` and `.map(function)`. If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {object=} query A query to evaluate\r\n\t * @param {function(val, key)} iterator Function to execute against each item in the collection\r\n\t * @param {object=} thisobj The value of `this`\r\n\t */\r\n\tmap           : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.map( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\treturn sys.map( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Reduces a collection to a value which is the accumulated result of running each element in the collection through the\r\n\t * callback, where each successive callback execution consumes the return value of the previous execution. If accumulator\r\n\t * is not passed, the first element of the collection will be used as the initial accumulator value.\r\n\t * are iterated over.\r\n\t * @param {object=} query A query to evaluate\r\n\t * @param {function(result, val, key)} iterator The function that will be executed in each item in the collection\r\n\t * @param {*=} accumulator Initial value of the accumulator.\r\n\t * @param {object=} thisobj The value of `this`\r\n\t * @return {*}\r\n\t */\r\n\treduce        : function ( query, iterator, accumulator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.reduce( this.find( query ), iterator, accumulator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = accumulator || this;\r\n\t\t\treturn  sys.reduce( this.heap, query, iterator, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Creates an object composed of keys returned from running each element\r\n\t * of the collection through the given callback. The corresponding value of each key\r\n\t * is the number of times the key was returned by the callback.\r\n\t * @param {object=} query A query to evaluate. If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param  {function(value, key, collection)} iterator\r\n\t * @param {object=} thisobj The value of `this`\r\n\t * @return {object}\r\n\t */\r\n\tcountBy       : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.countBy( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\treturn sys.countBy( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Creates an object composed of keys returned from running each element of the collection through the callback.\r\n\t * The corresponding value of each key is an array of elements passed to callback that returned the key.\r\n\t * The callback is invoked with three arguments: (value, index|key, collection).\r\n\t * @param {object=} query A query to evaluate . If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {function(value, key, collection)} iterator\r\n\t * @param {object=} thisobj The value of `this`\r\n\t * @return {object}\r\n\t */\r\n\tgroupBy       : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.groupBy( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\treturn sys.groupBy( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Reduce the collection to a single value. Supports two signatures:\r\n\t * `.pluck(query, function)` and `.pluck(function)`\r\n\t * @param {object=} query The query to evaluate. If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {string} property The property that will be 'plucked' from the contents of the collection\r\n\t * @return {*}\r\n\t */\r\n\tpluck         : function ( query, property ) {\r\n\t\tif ( arguments.length === 2 ) {\r\n\t\t\treturn sys.map( this.find( query ), function ( record ) {\r\n\t\t\t\treturn probe.get( record, property );\r\n\t\t\t} );\r\n\t\t} else {\r\n\t\t\treturn sys.map( this.heap, function ( record ) {\r\n\t\t\t\treturn probe.get( record, query );\r\n\t\t\t} );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Returns a sorted copy of the collection.\r\n\t * @param {object=} query The query to evaluate. If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {function(value, key)} iterator\r\n\t * @param {object=} thisobj The value of `this`\r\n\t * @return {array}\r\n\t */\r\n\tsortBy        : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.sortBy( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\treturn sys.sortBy( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Retrieves the maximum value of an array. If callback is passed,\r\n\t * it will be executed for each value in the array to generate the criterion by which the value is ranked.\r\n\t * @param {object=} query A query to evaluate . If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {function(value, key, collection)} iterator\r\n\t * @param {object=} thisobj The value of `this`\r\n\t * @return {number}\r\n\t */\r\n\tmax           : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.max( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\treturn sys.max( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Retrieves the minimum value of an array. If callback is passed,\r\n\t * it will be executed for each value in the array to generate the criterion by which the value is ranked.\r\n\t * @param {object=} query A query to evaluate . If you pass in a query, only the items that match the query\r\n\t * are iterated over.\r\n\t * @param {function(value, key, collection)} iterator\r\n\t * @param {object=} thisobj The value of `this`\r\n\t * @return {number}\r\n\t */\r\n\tmin           : function ( query, iterator, thisobj ) {\r\n\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\tthisobj = thisobj || this;\r\n\t\t\treturn sys.min( this.find( query ), iterator, thisobj );\r\n\t\t} else {\r\n\t\t\tthisobj = iterator || this;\r\n\t\t\treturn sys.min( this.heap, query, thisobj );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Destructor called when the object is destroyed.\r\n\t */\r\n\tdestroy       : function () {\r\n\t\tthis.heap = null;\r\n\t}\r\n} );\r\n\r\n/**\r\n * An object based collector\r\n * @extends module:documents/collector~CollectorBase\r\n * @constructor\r\n */\r\nvar OCollector = dcl( CollectorBase, {\r\n\t/**\r\n\t * Get a record by key\r\n\t * @param {*} key The key of the record to get\r\n\t * @return {*}\r\n\t */\r\n\tkey : function ( key ) {\r\n\t\treturn this.heap[key];\r\n\t}\r\n} );\r\n\r\n//noinspection JSCommentMatchesSignature\r\n/**\r\n An array based collector\r\n @extends module:documents/collector~CollectorBase\r\n @constructor\r\n */\r\nvar ACollector = dcl( CollectorBase, {\r\n\t\tconstructor : function ( obj ) {\r\n\t\t\tif ( obj &amp;&amp; !sys.isArray( obj ) ) {\r\n\t\t\t\tthrow new TypeError( \"Collectors require an array passed to the constructor\" );\r\n\t\t\t}\r\n\t\t\tthis.heap = obj || [];\r\n\t\t\t/**\r\n\t\t\t * Creates an array of array elements not present in the other arrays using strict equality for comparisons, i.e. ===.\r\n\t\t\t * @returns {array}\r\n\t\t\t */\r\n\t\t\tthis.difference = sys.bind( sys.difference, this, this.heap );\r\n\t\t\t/**\r\n\t\t\t * This method gets all but the first values of array\r\n\t\t\t * @param {number=} n The numer of items to return\r\n\t\t\t * @returns {*}\r\n\t\t\t */\r\n\t\t\tthis.tail = sys.bind( sys.tail, this, this.heap );\r\n\t\t\t/**\r\n\t\t\t * Gets the first n values of the array\r\n\t\t\t * @param {number=} n The numer of items to return\r\n\t\t\t * @returns {*}\r\n\t\t\t */\r\n\t\t\tthis.head = sys.bind( sys.head, this, this.heap );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Adds to the top of the collection\r\n\t\t * @param {*} item The item to add to the collection. Only one item at a time can be added\r\n\t\t */\r\n\t\tadd         : function ( item ) {\r\n\t\t\tthis.heap.unshift( item );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Add to the bottom of the list\r\n\t\t * @param {*} item The item to add to the collection.  Only one item at a time can be added\r\n\t\t */\r\n\t\tappend      : function ( item ) {\r\n\t\t\tthis.heap.push( item );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Add an item to the top of the list. This is identical to `add`, but is provided for stack semantics\r\n\t\t * @param {*} item The item to add to the collection. Only one item at a time can be added\r\n\t\t */\r\n\t\tpush        : function ( item ) {\r\n\t\t\tthis.add( item );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Modifies the collection with all falsey values of array removed. The values false, null, 0, \"\", undefined and NaN are all falsey.\r\n\t\t */\r\n\t\tcompact     : function () {\r\n\t\t\tthis.heap = sys.compact( this.heap );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Creates an array of elements from the specified indexes, or keys, of the collection. Indexes may be specified as\r\n\t\t * individual arguments or as arrays of indexes\r\n\t\t * @param {indexes} args The indexes to use\r\n\t\t */\r\n\t\tat          : function () {\r\n\t\t\tvar arr = sys.toArray( arguments );\r\n\t\t\tarr.unshift( this.heap );\r\n\t\t\treturn sys.at.apply( this, arr );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Flattens a nested array (the nesting can be to any depth). If isShallow is truthy, array will only be flattened a single level.\r\n\t\t * If callback is passed, each element of array is passed through a callback before flattening.\r\n\t\t * @param {object=} query A query to evaluate . If you pass in a query, only the items that match the query\r\n\t\t * are iterated over.\r\n\t\t * @param {function(value, key, collection)} iterator,\r\n\t\t * @param {object=} thisobj The value of `this`\r\n\t\t * @return {number}\r\n\t\t */\r\n\t\tflatten     : function ( query, iterator, thisobj ) {\r\n\t\t\tif ( sys.isPlainObject( query ) ) {\r\n\t\t\t\tthisobj = thisobj || this;\r\n\t\t\t\treturn sys.flatten( this.find( query ), iterator, thisobj );\r\n\t\t\t} else {\r\n\t\t\t\tthisobj = iterator || this;\r\n\t\t\t\treturn sys.flatten( this.heap, query, thisobj );\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * Gets an items by its index\r\n\t\t * @param {number} key The index to get\r\n\t\t * @return {*}\r\n\t\t */\r\n\t\tindex       : function ( index ) {\r\n\t\t\treturn this.heap[ index ];\r\n\t\t}\r\n\t}\r\n);\r\n\r\n/**\r\n Collect an object\r\n @param {array|object} obj What to collect\r\n @return {ACollector|OCollector}\r\n */\r\nexports.collect = function ( obj ) {\r\n\tif ( sys.isArray( obj ) ) {\r\n\t\treturn new ACollector( obj );\r\n\t} else {\r\n\t\treturn new OCollector( obj );\r\n\t}\r\n};\r\n\r\nexports.array = function ( obj ) {\r\n\treturn new ACollector( obj );\r\n};\r\n\r\nexports.object = function ( obj ) {\r\n\treturn new OCollector( obj );\r\n};\r\n\r\n/**\r\n Returns true if all items match the query. Aliases as `all`\r\n @function\r\n\r\n @param {object} qu The query to execute\r\n @returns {boolean}\r\n @name every\r\n @memberOf module:documents/collector~CollectorBase#\r\n */\r\n\r\n\r\n/**\r\n Returns true if any of the items match the query. Aliases as `any`\r\n @function\r\n\r\n @param {object} qu The query to execute\r\n @returns {boolean}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name some\r\n */\r\n\r\n\r\n/**\r\n Returns the set of unique records that match a query\r\n\r\n @param {object} qu The query to execute.\r\n @return {array}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name unique\r\n @method\r\n **/\r\n\r\n/**\r\n Returns true if all items match the query. Aliases as `every`\r\n @function\r\n\r\n @param {object} qu The query to execute\r\n @returns {boolean}\r\n @name all\r\n @memberOf module:documents/collector~CollectorBase#\r\n */\r\n\r\n\r\n/**\r\n Returns true if any of the items match the query. Aliases as `all`\r\n @function\r\n\r\n @param {object} qu The query to execute\r\n @returns {boolean}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name any\r\n */\r\n\r\n\r\n/**\r\n Remove all items in the object/array that match the query\r\n\r\n @param {object} qu The query to execute. See {@link module:ink/probe.queryOperators} for the operators you can use.\r\n @return {object|array} The array or object as appropriate without the records.\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name remove\r\n @method\r\n **/\r\n\r\n/**\r\n Returns the first record that matches the query and returns its key or index depending on whether `obj` is an object or array respectively.\r\n Aliased as `seekKey`.\r\n\r\n @param {object} qu The query to execute.\r\n @returns {object}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name findOneKey\r\n @method\r\n */\r\n\r\n\r\n/**\r\n Returns the first record that matches the query. Aliased as `seek`.\r\n\r\n @param {object} qu The query to execute.\r\n @returns {object}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name findOne\r\n @method\r\n */\r\n\r\n\r\n/**\r\n Find all records that match a query and returns the keys for those items. This is similar to {@link module:ink/probe.find} but instead of returning\r\n records, returns the keys. If `obj` is an object it will return the hash key. If 'obj' is an array, it will return the index\r\n\r\n @param {object} qu The query to execute.\r\n @returns {array}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name findKeys\r\n @method\r\n */\r\n\r\n\r\n/**\r\n Find all records that match a query\r\n\r\n @param {object} qu The query to execute.\r\n @returns {array} The results\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name find\r\n @method\r\n **/\r\n\r\n/**\r\n Updates all records in obj that match the query. See {@link module:ink/probe.updateOperators} for the operators that are supported.\r\n\r\n @param {object} qu The query which will be used to identify the records to updated\r\n @param {object} setDocument The update operator. See {@link module:ink/probe.updateOperators}\r\n @memberOf module:documents/collector~CollectorBase#\r\n @name update\r\n @method\r\n */\r\n</code></pre>\r\n        </article>\r\n    </section>\r\n\r\n\r\n\r\n"}{"type":"Source","title":"strings/format.js","docs":[{"kind":"source","code":"\"use strict\";\r\n/**\r\n * @fileOverview String helper methods\r\n *\r\n * @module strings/format\r\n */\r\n\r\n/**\r\n * Format a string quickly and easily using .net style format strings\r\n * @param {string} format A string format like \"Hello {0}, now take off your {1}!\"\r\n * @param {...?} args One argument per `{}` in the string, positionally replaced\r\n * @returns {string}\r\n *\r\n * @example\r\n * var strings = require(\"papyrus/strings\");\r\n * var s = strings.format(\"Hello {0}\", \"Madame Vastra\");\r\n * // s = \"Hello Madame Vastra\"\r\n *\r\n * @example {@lang xml}\r\n * &lt;span>\r\n *      &lt;%= strings.format(\"Hello {0}\", \"Madame Vastra\") %>\r\n * &lt;/span>\r\n */\r\nmodule.exports = function ( format ) {\r\n\tvar args = Array.prototype.slice.call( arguments, 1 );\r\n\treturn format.replace( /{(\\d+)}/g, function ( match, number ) {\r\n\t\treturn typeof args[number] != 'undefined'\r\n\t\t\t? args[number]\r\n\t\t\t: match\r\n\t\t\t;\r\n\t} );\r\n};\r\n"}],"content":"\r\n\r\n\r\n\r\n    \r\n    <section>\r\n        <article>\r\n            <pre class=\"prettyprint source linenums\"><code>\"use strict\";\r\n/**\r\n * @fileOverview String helper methods\r\n *\r\n * @module strings/format\r\n */\r\n\r\n/**\r\n * Format a string quickly and easily using .net style format strings\r\n * @param {string} format A string format like \"Hello {0}, now take off your {1}!\"\r\n * @param {...?} args One argument per `{}` in the string, positionally replaced\r\n * @returns {string}\r\n *\r\n * @example\r\n * var strings = require(\"papyrus/strings\");\r\n * var s = strings.format(\"Hello {0}\", \"Madame Vastra\");\r\n * // s = \"Hello Madame Vastra\"\r\n *\r\n * @example {@lang xml}\r\n * &lt;span>\r\n *      &lt;%= strings.format(\"Hello {0}\", \"Madame Vastra\") %>\r\n * &lt;/span>\r\n */\r\nmodule.exports = function ( format ) {\r\n\tvar args = Array.prototype.slice.call( arguments, 1 );\r\n\treturn format.replace( /{(\\d+)}/g, function ( match, number ) {\r\n\t\treturn typeof args[number] != 'undefined'\r\n\t\t\t? args[number]\r\n\t\t\t: match\r\n\t\t\t;\r\n\t} );\r\n};\r\n</code></pre>\r\n        </article>\r\n    </section>\r\n\r\n\r\n\r\n"}{"type":"Source","title":"utils/logger.js","docs":[{"kind":"source","code":"\"use strict\";\r\n/**\r\n * @fileOverview The logging system for papyrus is based on [http://pimterry.github.io/loglevel/](loglevel) and slightly decorated\r\n * @module utils/logger\r\n * @requires dcl\r\n * @requires loglevel\r\n */\r\n\r\nvar dcl = require( \"dcl\" );\r\nvar log = require( 'loglevel' );\r\n\r\n/**\r\n * A logger class that you can mix into your classes to handle logging settings and state at an object level.\r\n * See {@link utils/logger} for the members of this class\r\n *\r\n * @exports utils/logger.Logger\r\n * @class\r\n * @see utils/logger\r\n */\r\nvar Logger = dcl( null, /** @lends  utils/logger.Logger# */{\r\n\tdeclaredClass : \"utils/Logger\",\r\n\r\n\t/**\r\n\t * Turn off all logging. If you log something, it will not error, but will not do anything either\r\n\t * and the cycles are minimal.\r\n\t *\r\n\t */\r\n\tsilent : function () {\r\n\t\tlog.disableAll();\r\n\t},\r\n\t/**\r\n\t * Turns on all logging levels\r\n\t *\r\n\t */\r\n\tall    : function () {\r\n\t\tlog.enableAll();\r\n\t},\r\n\t/**\r\n\t * Sets the logging level to one of `trace`, `debug`, `info`, `warn`, `error`.\r\n\t * @param {string} lvl The level to set it to. Can be  one of `trace`, `debug`, `info`, `warn`, `error`.\r\n\t *\r\n\t */\r\n\tlevel  : function ( lvl ) {\r\n\t\tif ( lvl.toLowerCase() === \"none\" ) {\r\n\t\t\tlog.disableAll();\r\n\t\t} else {\r\n\t\t\tlog.setLevel( lvl );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Log a `trace` call\r\n\t * @method\r\n\t * @param {string} The value to log\r\n\t */\r\n\ttrace  : log.trace,\r\n\t/**\r\n\t * Log a `debug` call\r\n\t * @method\r\n\t * @param {string} The value to log\r\n\t */\r\n\tdebug  : log.debug,\r\n\t/**\r\n\t * Log a `info` call\r\n\t * @method\r\n\t * @param {string} The value to log\r\n\t */\r\n\tinfo   : log.info,\r\n\t/**\r\n\t * Log a `warn` call\r\n\t * @method\r\n\t * @param {string} The value to log\r\n\t */\r\n\twarn   : log.warn,\r\n\t/**\r\n\t * Log a `error` call\r\n\t * @method\r\n\t * @param {string} The value to log\r\n\t */\r\n\terror  : log.error\r\n} );\r\n\r\nmodule.exports = new Logger();\r\n/**\r\n * The system global, cross-platform logger\r\n * @name utils/logger\r\n * @static\r\n * @type {utils/logger.Logger}\r\n */\r\nmodule.exports.Logger = Logger;\r\n"}],"content":"\r\n\r\n\r\n\r\n    \r\n    <section>\r\n        <article>\r\n            <pre class=\"prettyprint source linenums\"><code>\"use strict\";\r\n/**\r\n * @fileOverview The logging system for papyrus is based on [http://pimterry.github.io/loglevel/](loglevel) and slightly decorated\r\n * @module utils/logger\r\n * @requires dcl\r\n * @requires loglevel\r\n */\r\n\r\nvar dcl = require( \"dcl\" );\r\nvar log = require( 'loglevel' );\r\n\r\n/**\r\n * A logger class that you can mix into your classes to handle logging settings and state at an object level.\r\n * See {@link utils/logger} for the members of this class\r\n *\r\n * @exports utils/logger.Logger\r\n * @class\r\n * @see utils/logger\r\n */\r\nvar Logger = dcl( null, /** @lends  utils/logger.Logger# */{\r\n\tdeclaredClass : \"utils/Logger\",\r\n\r\n\t/**\r\n\t * Turn off all logging. If you log something, it will not error, but will not do anything either\r\n\t * and the cycles are minimal.\r\n\t *\r\n\t */\r\n\tsilent : function () {\r\n\t\tlog.disableAll();\r\n\t},\r\n\t/**\r\n\t * Turns on all logging levels\r\n\t *\r\n\t */\r\n\tall    : function () {\r\n\t\tlog.enableAll();\r\n\t},\r\n\t/**\r\n\t * Sets the logging level to one of `trace`, `debug`, `info`, `warn`, `error`.\r\n\t * @param {string} lvl The level to set it to. Can be  one of `trace`, `debug`, `info`, `warn`, `error`.\r\n\t *\r\n\t */\r\n\tlevel  : function ( lvl ) {\r\n\t\tif ( lvl.toLowerCase() === \"none\" ) {\r\n\t\t\tlog.disableAll();\r\n\t\t} else {\r\n\t\t\tlog.setLevel( lvl );\r\n\t\t}\r\n\t},\r\n\t/**\r\n\t * Log a `trace` call\r\n\t * @method\r\n\t * @param {string} The value to log\r\n\t */\r\n\ttrace  : log.trace,\r\n\t/**\r\n\t * Log a `debug` call\r\n\t * @method\r\n\t * @param {string} The value to log\r\n\t */\r\n\tdebug  : log.debug,\r\n\t/**\r\n\t * Log a `info` call\r\n\t * @method\r\n\t * @param {string} The value to log\r\n\t */\r\n\tinfo   : log.info,\r\n\t/**\r\n\t * Log a `warn` call\r\n\t * @method\r\n\t * @param {string} The value to log\r\n\t */\r\n\twarn   : log.warn,\r\n\t/**\r\n\t * Log a `error` call\r\n\t * @method\r\n\t * @param {string} The value to log\r\n\t */\r\n\terror  : log.error\r\n} );\r\n\r\nmodule.exports = new Logger();\r\n/**\r\n * The system global, cross-platform logger\r\n * @name utils/logger\r\n * @static\r\n * @type {utils/logger.Logger}\r\n */\r\nmodule.exports.Logger = Logger;\r\n</code></pre>\r\n        </article>\r\n    </section>\r\n\r\n\r\n\r\n"}{"type":"","title":"Home","docs":[{"kind":"package","longname":"package:undefined","files":["G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\base\\chains.js","G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\base\\index.js","G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents\\binder.js","G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents\\collector.js","G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents\\model.js","G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents\\probe.js","G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents\\schema.js","G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\mixins\\bussable.js","G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\mixins\\signalable.js","G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\strings\\format.js","G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\utils\\logger.js"],"___id":"T000002R000623","___s":true,"attribs":"","id":"package:","ancestors":[]},{"kind":"mainpage","readme":"<h1>docdash-with-search</h1><p><a href=\"https://www.npmjs.com/package/docdash-with-search\"><img src=\"https://img.shields.io/npm/v/docdash-with-search.svg\" alt=\"npm package\"></a> <a href=\"LICENSE.md\"><img src=\"https://img.shields.io/npm/l/docdash-with-search.svg\" alt=\"license\"></a></p>\n<p>A clean, responsive documentation template theme with search for JSDoc 3 based on <a href=\"https://github.com/clenemt/docdash\"><code>Docdash</code></a>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/447956/13398144/4dde7f36-defd-11e5-8909-1a9013302cb9.png\" alt=\"docdash-screenshot\"></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/447956/13401057/e30effd8-df0a-11e5-9f51-66257ac38e94.jpg\" alt=\"docdash-screenshot-2\"></p>\n<h2>Example</h2><p>See http://halzhan.github.io/docdash-with-search/ for a sample demo. :rocket:</p>\n<h2>Install</h2><pre class=\"prettyprint source lang-bash\"><code>$ npm install docdash-with-search</code></pre><h2>Usage</h2><p>Clone repository to your designated <code>jsdoc</code> template directory, then:</p>\n<pre class=\"prettyprint source lang-bash\"><code>$ jsdoc entry-file.js -t path/to/docdash-with-search</code></pre><h2>Usage (npm)</h2><p>In your projects <code>package.json</code> file add a new script:</p>\n<pre class=\"prettyprint source lang-json\"><code>&quot;script&quot;: {\n  &quot;generate-docs&quot;: &quot;node_modules/.bin/jsdoc -c jsdoc.json&quot;\n}</code></pre><p>In your <code>jsdoc.json</code> file, add a template option.</p>\n<pre class=\"prettyprint source lang-json\"><code>&quot;opts&quot;: {\n  &quot;template&quot;: &quot;node_modules/docdash-with-search&quot;\n}</code></pre><h2>Sample <code>jsdoc.json</code></h2><p>See the config file for the <a href=\"fixtures/fixtures.conf.json\">fixtures</a> or the sample below.</p>\n<pre class=\"prettyprint source lang-json\"><code>{\n    &quot;tags&quot;: {\n        &quot;allowUnknownTags&quot;: true\n    },\n    &quot;source&quot;: {\n        &quot;include&quot;: [\n            &quot;fixtures/&quot;,\n            &quot;./README.md&quot;\n        ]\n    },\n    &quot;plugins&quot;: [&quot;plugins/markdown&quot;],\n    &quot;opts&quot;: {\n        &quot;encoding&quot;: &quot;utf8&quot;,\n        &quot;template&quot;: &quot;./&quot;,\n        &quot;destination&quot;: &quot;../fixtures-doc/&quot;,\n        &quot;recurse&quot;: true,\n        &quot;verbose&quot;: true\n    },\n    &quot;markdown&quot;: {\n        &quot;parser&quot;: &quot;gfm&quot;,\n        &quot;hardwrap&quot;: true\n    },\n    &quot;templates&quot;: {\n        &quot;search&quot;: true,\n        &quot;cleverLinks&quot;: false,\n        &quot;monospaceLinks&quot;: false,\n        &quot;default&quot;: {\n            &quot;outputSourceFiles&quot;: true,\n            &quot;includeDate&quot;: false\n        },\n        &quot;scripts&quot;: [],\n        &quot;favicon&quot;: &quot;&quot;,\n        &quot;css&quot;: []\n    },\n    &quot;docdash&quot;: {\n        &quot;static&quot;: false,\n        &quot;sort&quot;: true\n    }\n}</code></pre><h2>Options</h2><p>Docdash supports the following options:</p>\n<pre class=\"prettyprint source\"><code>{\n    &quot;docdash&quot;: {\n        &quot;static&quot;: [false|true],  // Display the static members inside the navbar\n        &quot;sort&quot;: [false|true]     // Sort the methods in the navbar\n    },\n    &quot;templates&quot;: {\n        &quot;search&quot;: [false|true], // Display the search input element inside the navbar\n        &quot;scripts&quot;: [], // Script files' URLs\n        &quot;favicon&quot;: &quot;&quot;, // The favicon's URL\n        &quot;css&quot;: [] // Css files' URLs\n    }\n}</code></pre><p>Place them anywhere inside your <code>jsdoc.json</code> file.</p>\n<h2>Change Logs</h2><h3>v0.1.0(2018/08/07)</h3><h3>v0.0.2(2018/08/07)</h3><p>First version.</p>\n<h2>Thanks</h2><p>Thanks to <a href=\"https://github.com/clenemt/docdash\">Docdash</a>.</p>\n<h2>License</h2><p>Licensed under the Apache License, version 2.0. (see <a href=\"LICENSE.md\">Apache-2.0</a>).</p>","longname":"Main Page"}],"content":"\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n    <section class=\"readme\">\r\n        <article><h1>docdash-with-search</h1><p><a href=\"https://www.npmjs.com/package/docdash-with-search\"><img src=\"https://img.shields.io/npm/v/docdash-with-search.svg\" alt=\"npm package\"></a> <a href=\"LICENSE.md\"><img src=\"https://img.shields.io/npm/l/docdash-with-search.svg\" alt=\"license\"></a></p>\n<p>A clean, responsive documentation template theme with search for JSDoc 3 based on <a href=\"https://github.com/clenemt/docdash\"><code>Docdash</code></a>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/447956/13398144/4dde7f36-defd-11e5-8909-1a9013302cb9.png\" alt=\"docdash-screenshot\"></p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/447956/13401057/e30effd8-df0a-11e5-9f51-66257ac38e94.jpg\" alt=\"docdash-screenshot-2\"></p>\n<h2>Example</h2><p>See http://halzhan.github.io/docdash-with-search/ for a sample demo. :rocket:</p>\n<h2>Install</h2><pre class=\"prettyprint source lang-bash\"><code>$ npm install docdash-with-search</code></pre><h2>Usage</h2><p>Clone repository to your designated <code>jsdoc</code> template directory, then:</p>\n<pre class=\"prettyprint source lang-bash\"><code>$ jsdoc entry-file.js -t path/to/docdash-with-search</code></pre><h2>Usage (npm)</h2><p>In your projects <code>package.json</code> file add a new script:</p>\n<pre class=\"prettyprint source lang-json\"><code>&quot;script&quot;: {\n  &quot;generate-docs&quot;: &quot;node_modules/.bin/jsdoc -c jsdoc.json&quot;\n}</code></pre><p>In your <code>jsdoc.json</code> file, add a template option.</p>\n<pre class=\"prettyprint source lang-json\"><code>&quot;opts&quot;: {\n  &quot;template&quot;: &quot;node_modules/docdash-with-search&quot;\n}</code></pre><h2>Sample <code>jsdoc.json</code></h2><p>See the config file for the <a href=\"fixtures/fixtures.conf.json\">fixtures</a> or the sample below.</p>\n<pre class=\"prettyprint source lang-json\"><code>{\n    &quot;tags&quot;: {\n        &quot;allowUnknownTags&quot;: true\n    },\n    &quot;source&quot;: {\n        &quot;include&quot;: [\n            &quot;fixtures/&quot;,\n            &quot;./README.md&quot;\n        ]\n    },\n    &quot;plugins&quot;: [&quot;plugins/markdown&quot;],\n    &quot;opts&quot;: {\n        &quot;encoding&quot;: &quot;utf8&quot;,\n        &quot;template&quot;: &quot;./&quot;,\n        &quot;destination&quot;: &quot;../fixtures-doc/&quot;,\n        &quot;recurse&quot;: true,\n        &quot;verbose&quot;: true\n    },\n    &quot;markdown&quot;: {\n        &quot;parser&quot;: &quot;gfm&quot;,\n        &quot;hardwrap&quot;: true\n    },\n    &quot;templates&quot;: {\n        &quot;search&quot;: true,\n        &quot;cleverLinks&quot;: false,\n        &quot;monospaceLinks&quot;: false,\n        &quot;default&quot;: {\n            &quot;outputSourceFiles&quot;: true,\n            &quot;includeDate&quot;: false\n        },\n        &quot;scripts&quot;: [],\n        &quot;favicon&quot;: &quot;&quot;,\n        &quot;css&quot;: []\n    },\n    &quot;docdash&quot;: {\n        &quot;static&quot;: false,\n        &quot;sort&quot;: true\n    }\n}</code></pre><h2>Options</h2><p>Docdash supports the following options:</p>\n<pre class=\"prettyprint source\"><code>{\n    &quot;docdash&quot;: {\n        &quot;static&quot;: [false|true],  // Display the static members inside the navbar\n        &quot;sort&quot;: [false|true]     // Sort the methods in the navbar\n    },\n    &quot;templates&quot;: {\n        &quot;search&quot;: [false|true], // Display the search input element inside the navbar\n        &quot;scripts&quot;: [], // Script files' URLs\n        &quot;favicon&quot;: &quot;&quot;, // The favicon's URL\n        &quot;css&quot;: [] // Css files' URLs\n    }\n}</code></pre><p>Place them anywhere inside your <code>jsdoc.json</code> file.</p>\n<h2>Change Logs</h2><h3>v0.1.0(2018/08/07)</h3><h3>v0.0.2(2018/08/07)</h3><p>First version.</p>\n<h2>Thanks</h2><p>Thanks to <a href=\"https://github.com/clenemt/docdash\">Docdash</a>.</p>\n<h2>License</h2><p>Licensed under the Apache License, version 2.0. (see <a href=\"LICENSE.md\">Apache-2.0</a>).</p></article>\r\n    </section>\r\n\r\n\r\n\r\n\r\n\r\n"}{"type":"Class","title":"base","docs":[{"comment":"/**\r\n * @classdesc The base of all classes in the system, this is one of the few pure \"classes\" in core the of the system. It is a\r\n * pretty clean little class whose primary purpose is to surface the composition chains and a basis for storing\r\n * options on mixin and subclass instances. Options are handled at the instance rather than the prototype level\r\n * so that multiple instances don't compete for default values.\r\n *\r\n * @exports base\r\n * @constructor\r\n * @extends base/chains\r\n */","meta":{"range":[741,2468],"filename":"index.js","lineno":22,"columnno":4,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\base","code":{"id":"astnode100000070","name":"Base","type":"CallExpression","value":""},"shortpath":"base/index.js"},"classdesc":"<p>The base of all classes in the system, this is one of the few pure &quot;classes&quot; in core the of the system. It is a<br>pretty clean little class whose primary purpose is to surface the composition chains and a basis for storing<br>options on mixin and subclass instances. Options are handled at the instance rather than the prototype level<br>so that multiple instances don't compete for default values.</p>","alias":"base","kind":"class","augments":["base/chains"],"name":"base","longname":"base","scope":"global","params":[],"___id":"T000003R000002","___s":true,"attribs":"<span class=\"type-signature\"></span>","id":"base","signature":"<span class=\"signature\">()</span><span class=\"type-signature\"></span>","ancestors":[]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        <h2>\r\n        base\r\n        </h2>\r\n        \r\n            <div class=\"class-description\"><p>The base of all classes in the system, this is one of the few pure &quot;classes&quot; in core the of the system. It is a<br>pretty clean little class whose primary purpose is to surface the composition chains and a basis for storing<br>options on mixin and subclass instances. Options are handled at the instance rather than the prototype level<br>so that multiple instances don't compete for default values.</p></div>\r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n\r\n    \r\n    <h2>Constructor</h2>\r\n    \r\n\r\n    <h4 class=\"name\" id=\"base\"><span class=\"type-signature\"></span>new base<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_index.js.html\">base/index.js</a>, <a href=\"base_index.js.html#line22\">line 22</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    </div>\r\n\r\n    \r\n        <h3 class=\"subsection-title\">Extends</h3>\r\n\r\n        \r\n\r\n\r\n    <ul>\r\n        <li><a href=\"base_chains.html\">base/chains</a></li>\r\n    </ul>\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Members</h3>\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"close\"><span class=\"type-signature\"></span>close<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_chains.js.html\">base/chains.js</a>, <a href=\"base_chains.js.html#line15\">line 15</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_chains.html#close\">base/chains#close</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-see\">See:</dt>\r\n    <dd class=\"tag-see\">\r\n        <ul>\r\n            <li><a href=\"base_chains.html#open\">base/chains#open</a></li>\r\n        </ul>\r\n    </dd>\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>The <code>close</code> method asks an object to shut itself down in a way that will allow it to be reopened, unlike the<br>[end method]{@link base/chains#end} which will call the destroy method which should make the object unusable, but also<br>devoid of all resources whereas <code>close</code> may still keep some resources open.</p>\n<table>\n<thead>\n<tr>\n<th>Heading 1</th>\n<th>Heading 2</th>\n<th>Heading 3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Bar</td>\n<td>Food</td>\n<td>This is a table</td>\n</tr>\n</tbody>\n</table>\n<p>This uses the <code>before</code> chain which means the last one defined in the first one destroyed</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"open\"><span class=\"type-signature\"></span>open<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_chains.js.html\">base/chains.js</a>, <a href=\"base_chains.js.html#line58\">line 58</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_chains.html#open\">base/chains#open</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-see\">See:</dt>\r\n    <dd class=\"tag-see\">\r\n        <ul>\r\n            <li><a href=\"base_chains.html#close\">base/chains#close</a></li>\r\n        </ul>\r\n    </dd>\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>If you are using the open/close paradigm for an object that can kind of go dormant on {@link base/chains#close} and can be &quot;reopened&quot;<br>again later, here is where the &quot;open&quot; code will go.</p>\n<p>This used the <code>after</code> chain which means that the first one defined is the first one destroyed.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Methods</h3>\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"addDefaultOptions\"><span class=\"type-signature\"></span>addDefaultOptions<span class=\"signature\">(options)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_index.js.html\">base/index.js</a>, <a href=\"base_index.js.html#line40\">line 40</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-see\">See:</dt>\r\n    <dd class=\"tag-see\">\r\n        <ul>\r\n            <li>{<a href=\"base.html#addOptions\">base#addOptions</a>}</li>\r\n        </ul>\r\n    </dd>\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Add a default option to a class. The default options are only set if there is not already a<br>value for the option.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>options</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">hash</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A hash of options you want to set</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"addOptions\"><span class=\"type-signature\"></span>addOptions<span class=\"signature\">(options)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_index.js.html\">base/index.js</a>, <a href=\"base_index.js.html#line29\">line 29</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-see\">See:</dt>\r\n    <dd class=\"tag-see\">\r\n        <ul>\r\n            <li>{<a href=\"base.html#addDefaultOptions\">base#addDefaultOptions</a>}</li>\r\n        </ul>\r\n    </dd>\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Add an option to a class. If any members of the hash already exist in <code>this.options</code>, they will be overwritten.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>options</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">hash</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A hash of options you want to set</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"destroy\"><span class=\"type-signature\"></span>destroy<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_index.js.html\">base/index.js</a>, <a href=\"base_index.js.html#line64\">line 64</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-overrides\">Overrides:</dt>\r\n    <dd class=\"tag-overrides\"><ul class=\"dummy\"><li>\r\n        base/chains#destroy\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-see\">See:</dt>\r\n    <dd class=\"tag-see\">\r\n        <ul>\r\n            <li>{<a href=\"base_chains.html#end\">base/chains#end</a>}</li>\r\n        \r\n            <li>{base/chains#destroy}</li>\r\n        </ul>\r\n    </dd>\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Called when it is time to get rid of all of your instance level references and objects and events. You can<br>define this method on your own classes without having to call the superclass instance. It is called by<br><code>instance.end()</code> automatically</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"end\"><span class=\"type-signature\"></span>end<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_index.js.html\">base/index.js</a>, <a href=\"base_index.js.html#line53\">line 53</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-overrides\">Overrides:</dt>\r\n    <dd class=\"tag-overrides\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_chains.html#end\">base/chains#end</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-see\">See:</dt>\r\n    <dd class=\"tag-see\">\r\n        <ul>\r\n            <li>{<a href=\"base_chains.html#end\">base/chains#end</a>}</li>\r\n        \r\n            <li>{base/chains#destroy}</li>\r\n        </ul>\r\n    </dd>\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Call this to close your object and dispose of all maintained resources. You can define this method on your<br>own classes without having to call the superclass instance, however it is reccomended that you put<br>all disposal code in <code>destroy()</code>. You must be disciplined about calling this on your instances.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Class","title":"base/chains","docs":[{"comment":"/**\r\n * @classDesc Chains define the primary composition elements (functions) that determine the order of execution.\r\n * @exports base/chains\r\n * @constructor\r\n */","meta":{"range":[389,442],"filename":"chains.js","lineno":14,"columnno":4,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\base","code":{"id":"astnode100000011","name":"Chains","type":"CallExpression","value":""},"shortpath":"base/chains.js"},"classdesc":"<p>Chains define the primary composition elements (functions) that determine the order of execution.</p>","alias":"base/chains","kind":"class","name":"base/chains","longname":"base/chains","scope":"global","params":[],"___id":"T000003R000003","___s":true,"attribs":"<span class=\"type-signature\"></span>","id":"base/chains","signature":"<span class=\"signature\">()</span><span class=\"type-signature\"></span>","ancestors":[]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        <h2>\r\n        base/chains\r\n        </h2>\r\n        \r\n            <div class=\"class-description\"><p>Chains define the primary composition elements (functions) that determine the order of execution.</p></div>\r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n\r\n    \r\n    <h2>Constructor</h2>\r\n    \r\n\r\n    <h4 class=\"name\" id=\"base/chains\"><span class=\"type-signature\"></span>new base/chains<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_chains.js.html\">base/chains.js</a>, <a href=\"base_chains.js.html#line14\">line 14</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Members</h3>\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"close\"><span class=\"type-signature\"></span>close<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_chains.js.html\">base/chains.js</a>, <a href=\"base_chains.js.html#line15\">line 15</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-see\">See:</dt>\r\n    <dd class=\"tag-see\">\r\n        <ul>\r\n            <li><a href=\"base_chains.html#open\">base/chains#open</a></li>\r\n        </ul>\r\n    </dd>\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>The <code>close</code> method asks an object to shut itself down in a way that will allow it to be reopened, unlike the<br>[end method]{@link base/chains#end} which will call the destroy method which should make the object unusable, but also<br>devoid of all resources whereas <code>close</code> may still keep some resources open.</p>\n<table>\n<thead>\n<tr>\n<th>Heading 1</th>\n<th>Heading 2</th>\n<th>Heading 3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Bar</td>\n<td>Food</td>\n<td>This is a table</td>\n</tr>\n</tbody>\n</table>\n<p>This uses the <code>before</code> chain which means the last one defined in the first one destroyed</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"end\"><span class=\"type-signature\"></span>end<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_chains.js.html\">base/chains.js</a>, <a href=\"base_chains.js.html#line30\">line 30</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>The <code>end</code> method will call the destroy method which should make the object unusable and<br>devoid of all resources, unlike the<br>[close method]{@link base/chains#close} asks an object to shut itself down in a way that will allow it to be reopened.</p>\n<p>This uses the <code>before</code> chain which means the last one defined in the first one destroyed</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n        <p class=\"code-caption\">Add *this* to your application.properties.</p>\r\n    \r\n    <pre class=\"prettyprint\"><code>{@lang bash}\rfoo=bar</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"open\"><span class=\"type-signature\"></span>open<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_chains.js.html\">base/chains.js</a>, <a href=\"base_chains.js.html#line58\">line 58</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-see\">See:</dt>\r\n    <dd class=\"tag-see\">\r\n        <ul>\r\n            <li><a href=\"base_chains.html#close\">base/chains#close</a></li>\r\n        </ul>\r\n    </dd>\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>If you are using the open/close paradigm for an object that can kind of go dormant on {@link base/chains#close} and can be &quot;reopened&quot;<br>again later, here is where the &quot;open&quot; code will go.</p>\n<p>This used the <code>after</code> chain which means that the first one defined is the first one destroyed.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Class","title":"documents/model","docs":[{"comment":"/**\r\n * A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like\r\n * that, it is a pure, in memory data container\r\n * @exports documents/model\r\n * @constructor\r\n * @borrows module:documents/probe.get as get\r\n * @borrows module:documents/probe.set as set\r\n * @borrows module:documents/probe.any as any\r\n * @borrows module:documents/probe.all as all\r\n * @borrows module:documents/probe.remove as remove\r\n * @borrows module:documents/probe.seekKey as seekKey\r\n * @borrows module:documents/probe.seek as seek\r\n * @borrows module:documents/probe.findOne as findOne\r\n * @borrows module:documents/probe.findOneKey as findOneKey\r\n * @borrows module:documents/probe.findKeys as findKeys\r\n * @borrows module:documents/probe.find as find\r\n * @borrows module:documents/probe.update as update\r\n * @borrows module:documents/probe.some as some\r\n * @borrows module:documents/probe.every as every\r\n */","meta":{"range":[1383,3444],"filename":"model.js","lineno":34,"columnno":4,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{"id":"astnode100001623","name":"Model","type":"CallExpression","value":""},"shortpath":"documents/model.js"},"description":"<p>A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like<br>that, it is a pure, in memory data container</p>","alias":"documents/model","kind":"class","name":"documents/model","longname":"documents/model","scope":"global","params":[],"___id":"T000003R000004","___s":true,"attribs":"<span class=\"type-signature\"></span>","id":"documents/model","signature":"<span class=\"signature\">()</span><span class=\"type-signature\"></span>","ancestors":[]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        <h2>\r\n        documents/model\r\n        </h2>\r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"documents/model\"><span class=\"type-signature\"></span>new documents/model<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_model.js.html\">documents/model.js</a>, <a href=\"documents_model.js.html#line34\">line 34</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like<br>that, it is a pure, in memory data container</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Members</h3>\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"isEmpty\"><span class=\"type-signature\"></span>isEmpty<span class=\"type-signature\"> :boolean</span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_model.js.html\">documents/model.js</a>, <a href=\"documents_model.js.html#line101\">line 101</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if this instance is empty</p>\r\n</div>\r\n\r\n\r\n\r\n    <h5>Type:</h5>\r\n    <ul>\r\n        <li>\r\n            \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n        </li>\r\n    </ul>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"isNew\"><span class=\"type-signature\"></span>isNew<span class=\"type-signature\"> :boolean</span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_model.js.html\">documents/model.js</a>, <a href=\"documents_model.js.html#line86\">line 86</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>If {@link documents/model#_idField} is filled in and it's value is empty this will be true.</p>\r\n</div>\r\n\r\n\r\n\r\n    <h5>Type:</h5>\r\n    <ul>\r\n        <li>\r\n            \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n        </li>\r\n    </ul>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Methods</h3>\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".all\"><span class=\"type-signature\">(static) </span>all<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line871\">line 871</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if all items match the query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".any\"><span class=\"type-signature\">(static) </span>any<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line882\">line 882</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if any of the items match the query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".every\"><span class=\"type-signature\">(static) </span>every<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line950\">line 950</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if all items match the query. Aliases as <code>all</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".find\"><span class=\"type-signature\">(static) </span>find<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line750\">line 750</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Find all records that match a query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>The results</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".findKeys\"><span class=\"type-signature\">(static) </span>findKeys<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line769\">line 769</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Find all records that match a query and returns the keys for those items. This is similar to {@link module:documents/probe.find} but instead of returning<br> records, returns the keys. If <code>obj</code> is an object it will return the hash key. If 'obj' is an array, it will return the index</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".findOne\"><span class=\"type-signature\">(static) </span>findOne<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line788\">line 788</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns the first record that matches the query. Aliased as <code>seek</code>.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".findOneKey\"><span class=\"type-signature\">(static) </span>findOneKey<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line813\">line 813</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns the first record that matches the query and returns its key or index depending on whether <code>obj</code> is an object or array respectively.<br> Aliased as <code>seekKey</code>.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".get\"><span class=\"type-signature\">(static) </span>get<span class=\"signature\">(path, record)</span><span class=\"type-signature\"> &rarr; {*}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line930\">line 930</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Reaches into an object and allows you to get at a value deeply nested in an object. This is not a query, but a<br> straight reach in, useful for event bindings</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>path</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The split path of the element to work with</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>record</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The record to reach into</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>Whatever was found in the record</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".remove\"><span class=\"type-signature\">(static) </span>remove<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {object|array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line838\">line 838</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Remove all items in the object/array that match the query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>The array or object as appropriate without the records.</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n|\r\n\r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".set\"><span class=\"type-signature\">(static) </span>set<span class=\"signature\">(path, record, setter, newValue)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line918\">line 918</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>This will write the value into a record at the path, creating intervening objects if they don't exist. This does not work as filtered<br> update and is meant to be used on a single record. It is a nice way of setting a property at an arbitrary depth at will.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>path</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The split path of the element to work with</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>record</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The record to reach into</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>setter</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The set operation.  See {@link module:documents/probe.updateOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>newValue</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value to write to the, or if the operator is $pull, the query of items to look for</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".some\"><span class=\"type-signature\">(static) </span>some<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line941\">line 941</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if any of the items match the query. Aliases as <code>any</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".update\"><span class=\"type-signature\">(static) </span>update<span class=\"signature\">(obj, qu, setDocument)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line734\">line 734</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Updates all records in obj that match the query. See {@link module:documents/probe.updateOperators} for the operators that are supported.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n|\r\n\r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to update</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query which will be used to identify the records to updated</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>setDocument</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The update operator. See {@link module:documents/probe.updateOperators}</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Mixin","title":"documents/schema","docs":[{"comment":"/**\r\n * The validator mixin provides access to the features of the JSON validation system\r\n * @exports documents/schema\r\n * @mixin\r\n */","meta":{"range":[449,9406],"filename":"schema.js","lineno":17,"columnno":4,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{"id":"astnode100004277","name":"Schema","type":"CallExpression","value":""},"shortpath":"documents/schema.js"},"description":"<p>The validator mixin provides access to the features of the JSON validation system</p>","alias":"documents/schema","kind":"mixin","name":"documents/schema","longname":"documents/schema","scope":"global","params":[],"___id":"T000006R000002","___s":true,"attribs":"","id":"documents/schema","ancestors":[]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        <h2>\r\n        documents/schema\r\n        </h2>\r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line17\">line 17</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n        \r\n            <div class=\"description\"><p>The validator mixin provides access to the features of the JSON validation system</p></div>\r\n        \r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Members</h3>\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"_defaultSchemaName\"><span class=\"type-signature\"></span>_defaultSchemaName<span class=\"type-signature\"> :string|function</span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line44\">line 44</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>The default name of the scheman when you use anonymous schemas. You can define this at the prototype for classified<br>schemas. The can also</p>\r\n</div>\r\n\r\n\r\n\r\n    <h5>Type:</h5>\r\n    <ul>\r\n        <li>\r\n            \r\n<span class=\"param-type\">string</span>\r\n|\r\n\r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n        </li>\r\n    </ul>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"schema\"><span class=\"type-signature\"></span>schema<span class=\"type-signature\"> :object</span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line19\">line 19</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>The schema that defines the validation rules. This should probably be defined at the prototype for each<br>object or model classification. It can be an anonymous schema defined right here, or this can be<br>registered schema names to use, or just a single name</p>\r\n</div>\r\n\r\n\r\n\r\n    <h5>Type:</h5>\r\n    <ul>\r\n        <li>\r\n            \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n        </li>\r\n    </ul>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"schemas\"><span class=\"type-signature\"></span>schemas<span class=\"type-signature\"> :object</span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line29\">line 29</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>If you want to register multiple schemas, use this property instead</p>\r\n</div>\r\n\r\n\r\n\r\n    <h5>Type:</h5>\r\n    <ul>\r\n        <li>\r\n            \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n        </li>\r\n    </ul>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"validationOptions\"><span class=\"type-signature\"></span>validationOptions<span class=\"type-signature\"> :object|function</span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line54\">line 54</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>The options to pass to the validator when it runs</p>\r\n</div>\r\n\r\n\r\n\r\n    <h5>Type:</h5>\r\n    <ul>\r\n        <li>\r\n            \r\n<span class=\"param-type\">object</span>\r\n|\r\n\r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n        </li>\r\n    </ul>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Methods</h3>\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"addCheck\"><span class=\"type-signature\"></span>addCheck<span class=\"signature\">(name, formatter)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line165\">line 165</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>It is possible to add support for custom checks (i.e., minItems, maxItems, minLength, maxLength, etc.) through the addCheck function</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>name</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The name of the check</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>formatter</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>Perform the check</p>\r\n                <h6>Properties</h6>\r\n                \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>value</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value to check followed by any parameters from the schema</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n            </td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"addFormat\"><span class=\"type-signature\"></span>addFormat<span class=\"signature\">(name, formatter)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line153\">line 153</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>It is also possible to add support for additional string formats through the addFormat function.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>name</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The name of the formatter</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>formatter</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>How to format it</p>\r\n                <h6>Properties</h6>\r\n                \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>value</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value to format</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n            </td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"addType\"><span class=\"type-signature\"></span>addType<span class=\"signature\">(name, operation)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line141\">line 141</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Create a type to be used in your schemas to define new validators</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>name</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The name of the type</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>operation</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>What to do with the type.</p>\r\n                <h6>Properties</h6>\r\n                \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>value</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value to validation</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n            </td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"addTypeCoercion\"><span class=\"type-signature\"></span>addTypeCoercion<span class=\"signature\">(name, coercer)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line177\">line 177</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Custom coercion rules</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>name</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The name of the coercion</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>coercer</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>Perform the coercion</p>\r\n                <h6>Properties</h6>\r\n                \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>value</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value to coerce</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n            </td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"defaultDoc\"><span class=\"type-signature\"></span>defaultDoc<span class=\"signature\">(schema)</span><span class=\"type-signature\"> &rarr; (nullable) {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line239\">line 239</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Builds a default document based on the schema. What this does is create a document from schema and for each property<br>that has a default value or is required, the resultant object will contain that property. It is useful for extending<br>values from some source that may be incomplete, like options or some such.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>schema</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">json-schema</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A schema to use to create the default document</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"extract\"><span class=\"type-signature\"></span>extract<span class=\"signature\">(schema<span class=\"signature-attributes\">opt</span>, src<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line214\">line 214</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>This method will create a new object that contains only the fields and no methods or other artifacts. This is useful<br>for creating objects to pass over the wire or save in a table. This is not deeply copied, so changes made to the<br>extracted object will be represented in this class for reference objects.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>schema</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The schema name to use</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>src</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to extract fields from</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>Data-only version of the class instance.</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"extract\"><span class=\"type-signature\"></span>extract<span class=\"signature\">(record<span class=\"signature-attributes\">opt</span>, schema<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line122\">line 122</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Extracts only the elements of the object that are defined in the schema</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>record</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The record to extract from</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>schema</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The name of the schema to attach</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"getSchema\"><span class=\"type-signature\"></span>getSchema<span class=\"signature\">(schemaName<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; (nullable) {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line190\">line 190</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Get a registered schema by name</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>schemaName</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"registerSchemas\"><span class=\"type-signature\"></span>registerSchemas<span class=\"signature\">(schemas)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line101\">line 101</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Initialize the schema collection by registering the with the handler. You can call this at any time and as often as you like. It will be called once<br>by the constructor on any instance schemas</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>schemas</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">hash</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A hash of schemas where the key is the name of the schema</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"validate\"><span class=\"type-signature\"></span>validate<span class=\"signature\">(record<span class=\"signature-attributes\">opt</span>, schemaName, options<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; (nullable) {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line62\">line 62</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Validate an object against the schema</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>// This supports these signatures:\r\rinstance.validate(record, schemaName, options);\r\r\rinstance.validate(); // this, this._defaultSchemaName, this.validationOptions\rinstance.validate(record); // record, this._defaultSchemaName, this.validationOptions\rinstance.validate(schemaName); //this, schemaName, this.validationOptions\rinstance.validate(record, schemaName); //record, schemaName, this.validationOptions\rinstance.validate(schemaName, options); //this, schemaName, this.validationOptions</code></pre>\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>record</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The record to validate</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>schemaName</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The name of a previously registered schema</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>options</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>Options to pass to the validator</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Mixin","title":"mixins/bussable","docs":[{"comment":"/**\r\n *  @classDesc Provides easy access to the system bus and provides some helper methods for doing so\r\n *  @exports mixins/bussable\r\n *  @mixin\r\n */","meta":{"range":[474,2835],"filename":"bussable.js","lineno":18,"columnno":4,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\mixins","code":{"id":"astnode100004921","name":"Bussable","type":"CallExpression","value":""},"shortpath":"mixins/bussable.js"},"classdesc":"<p>Provides easy access to the system bus and provides some helper methods for doing so</p>","alias":"mixins/bussable","kind":"mixin","name":"mixins/bussable","longname":"mixins/bussable","scope":"global","params":[],"___id":"T000006R000003","___s":true,"attribs":"","id":"mixins/bussable","ancestors":[]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        <h2>\r\n        mixins/bussable\r\n        </h2>\r\n        \r\n            <div class=\"class-description\"><p>Provides easy access to the system bus and provides some helper methods for doing so</p></div>\r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_bussable.js.html\">mixins/bussable.js</a>, <a href=\"mixins_bussable.js.html#line18\">line 18</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n        \r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Methods</h3>\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"getSubscription\"><span class=\"type-signature\"></span>getSubscription<span class=\"signature\">(channel, topic)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_bussable.js.html\">mixins/bussable.js</a>, <a href=\"mixins_bussable.js.html#line80\">line 80</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Get a subscription definition</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>channel</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>topic</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>The subscription definition</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"once\"><span class=\"type-signature\"></span>once<span class=\"signature\">(channel, topic, callback)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_bussable.js.html\">mixins/bussable.js</a>, <a href=\"mixins_bussable.js.html#line54\">line 54</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Subscribe to an event once</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>channel</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The channel to subscribe to</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>topic</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The topic to subscribe to</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>callback</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">callback</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>What to do when you get the event</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>The subscription definition</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"publish\"><span class=\"type-signature\"></span>publish<span class=\"signature\">(channel, topic, options<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_bussable.js.html\">mixins/bussable.js</a>, <a href=\"mixins_bussable.js.html#line68\">line 68</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Publish an event on the system bus</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>channel</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The channel to publish to</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>topic</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The topic to publish to</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>options</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>What to pass to the event</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"subscribe\"><span class=\"type-signature\"></span>subscribe<span class=\"signature\">(channel, topic, callback)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_bussable.js.html\">mixins/bussable.js</a>, <a href=\"mixins_bussable.js.html#line40\">line 40</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Subscribe to an event</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>channel</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The channel to subscribe to</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>topic</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The topic to subscribe to</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>callback</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">callback</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>What to do when you get the event</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>The subscription definition</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Mixin","title":"mixins/signalable","docs":[{"comment":"/**\r\n * @classDesc Make an object capable of handling a signal. Or many signals.\r\n * @exports mixins/signalable\r\n * @mixin\r\n * @extends base\r\n */","meta":{"range":[5148,7151],"filename":"signalable.js","lineno":153,"columnno":4,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\mixins","code":{"id":"astnode100005433","name":"Signalable","type":"CallExpression","value":""},"shortpath":"mixins/signalable.js"},"classdesc":"<p>Make an object capable of handling a signal. Or many signals.</p>","alias":"mixins/signalable","kind":"mixin","augments":["base"],"name":"mixins/signalable","longname":"mixins/signalable","scope":"global","params":[],"___id":"T000006R000004","___s":true,"attribs":"","id":"mixins/signalable","ancestors":[]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        <h2>\r\n        mixins/signalable\r\n        </h2>\r\n        \r\n            <div class=\"class-description\"><p>Make an object capable of handling a signal. Or many signals.</p></div>\r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_signalable.js.html\">mixins/signalable.js</a>, <a href=\"mixins_signalable.js.html#line153\">line 153</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n        \r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n        <h3 class=\"subsection-title\">Extends</h3>\r\n\r\n        \r\n\r\n\r\n    <ul>\r\n        <li><a href=\"base.html\">base</a></li>\r\n    </ul>\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Members</h3>\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"autoLoadSignals\"><span class=\"type-signature\"></span>autoLoadSignals<span class=\"type-signature\"> :boolean</span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_signalable.js.html\">mixins/signalable.js</a>, <a href=\"mixins_signalable.js.html#line230\">line 230</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>When true, the class will load the <code>signals</code> hash and create the signal definitions during construction</p>\r\n</div>\r\n\r\n\r\n\r\n    <h5>Type:</h5>\r\n    <ul>\r\n        <li>\r\n            \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n        </li>\r\n    </ul>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"signals\"><span class=\"type-signature\"></span>signals<span class=\"type-signature\"> :hash|function</span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_signalable.js.html\">mixins/signalable.js</a>, <a href=\"mixins_signalable.js.html#line238\">line 238</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>A hash of signals to create automatically. Each definition consists of a name for the signal as the key<br>and then a hash of options (nullable) for each signal</p>\r\n</div>\r\n\r\n\r\n\r\n    <h5>Type:</h5>\r\n    <ul>\r\n        <li>\r\n            \r\n<span class=\"param-type\">hash</span>\r\n|\r\n\r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n        </li>\r\n    </ul>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Methods</h3>\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"refreshSignals\"><span class=\"type-signature\"></span>refreshSignals<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_signalable.js.html\">mixins/signalable.js</a>, <a href=\"mixins_signalable.js.html#line165\">line 165</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>When you make a change to the signals hash after loading, then you can make it reload</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Module","title":"base","docs":[{"comment":"/**\r\n * @fileOverview This is base definition for all composed classes defined by the system\r\n * @module base\r\n * @requires base/chains\r\n * @requires dcl\r\n */","meta":{"filename":"index.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\base","code":{},"shortpath":"base/index.js"},"name":"base","kind":"module","description":"<p>This is base definition for all composed classes defined by the system</p>","preserveName":true,"requires":["module:base/chains","module:dcl"],"longname":"module:base","___id":"T000004R000002","___s":true,"attribs":"","id":"base","ancestors":[],"modules":[{"comment":"/**\r\n * @fileOverview This is base definition for all composed classes defined by the system\r\n * @module base\r\n * @requires base/chains\r\n * @requires dcl\r\n */","meta":{"filename":"index.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\base","code":{},"shortpath":"base/index.js"},"name":"base","kind":"module","description":"<p>This is base definition for all composed classes defined by the system</p>","preserveName":true,"requires":["module:base/chains","module:dcl"],"longname":"module:base","___id":"T000002R000011","___s":true,"attribs":"","id":"base","ancestors":[]}]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        \r\n            \r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n            <div class=\"description\"><p>This is base definition for all composed classes defined by the system</p></div>\r\n        \r\n\r\n        \r\n            \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_index.js.html\">base/index.js</a>, <a href=\"base_index.js.html#line2\">line 2</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Requires</h3>\r\n\r\n        <ul>\r\n            <li><a href=\"module-base_chains.html\">module:base/chains</a></li>\r\n        \r\n            <li>module:dcl</li>\r\n        </ul>\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Module","title":"base/chains","docs":[{"comment":"/**\r\n * @fileOverview The chains define the primary composition elements (functions) that determine the order of execution.\r\n *\r\n * @module base/chains\r\n * @requires dcl\r\n */","meta":{"filename":"chains.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\base","code":{},"shortpath":"base/chains.js"},"name":"base/chains","kind":"module","description":"<p>The chains define the primary composition elements (functions) that determine the order of execution.</p>","preserveName":true,"requires":["module:dcl"],"longname":"module:base/chains","___id":"T000004R000003","___s":true,"attribs":"","id":"base/chains","ancestors":[],"modules":[{"comment":"/**\r\n * @fileOverview The chains define the primary composition elements (functions) that determine the order of execution.\r\n *\r\n * @module base/chains\r\n * @requires dcl\r\n */","meta":{"filename":"chains.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\base","code":{},"shortpath":"base/chains.js"},"name":"base/chains","kind":"module","description":"<p>The chains define the primary composition elements (functions) that determine the order of execution.</p>","preserveName":true,"requires":["module:dcl"],"longname":"module:base/chains","___id":"T000002R000002","___s":true,"attribs":"","id":"base/chains","ancestors":[]}]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        \r\n            \r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n            <div class=\"description\"><p>The chains define the primary composition elements (functions) that determine the order of execution.</p></div>\r\n        \r\n\r\n        \r\n            \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"base_chains.js.html\">base/chains.js</a>, <a href=\"base_chains.js.html#line2\">line 2</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Requires</h3>\r\n\r\n        <ul>\r\n            <li>module:dcl</li>\r\n        </ul>\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Module","title":"documents/binder","docs":[{"comment":"/**\r\n * @fileOverview allows you to bind a change watcher that looks for get and set operations on an arbitrary\r\n * property of an object at at any depth. This allows you to look for changes or intercept values asynchronously or otherwise.\r\n * @module documents/binder\r\n * @requires async\r\n * @requires documents/probe\r\n * @requires lodash\r\n * @requires promise\r\n */","meta":{"filename":"binder.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{},"shortpath":"documents/binder.js"},"name":"documents/binder","kind":"module","description":"<p>allows you to bind a change watcher that looks for get and set operations on an arbitrary<br>property of an object at at any depth. This allows you to look for changes or intercept values asynchronously or otherwise.</p>","preserveName":true,"requires":["module:async","module:documents/probe","module:lodash","module:promise"],"longname":"module:documents/binder","___id":"T000004R000004","___s":true,"attribs":"","id":"documents/binder","ancestors":[],"modules":[{"comment":"/**\r\n * @fileOverview allows you to bind a change watcher that looks for get and set operations on an arbitrary\r\n * property of an object at at any depth. This allows you to look for changes or intercept values asynchronously or otherwise.\r\n * @module documents/binder\r\n * @requires async\r\n * @requires documents/probe\r\n * @requires lodash\r\n * @requires promise\r\n */","meta":{"filename":"binder.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{},"shortpath":"documents/binder.js"},"name":"documents/binder","kind":"module","description":"<p>allows you to bind a change watcher that looks for get and set operations on an arbitrary<br>property of an object at at any depth. This allows you to look for changes or intercept values asynchronously or otherwise.</p>","preserveName":true,"requires":["module:async","module:documents/probe","module:lodash","module:promise"],"longname":"module:documents/binder","___id":"T000002R000029","___s":true,"attribs":"","id":"documents/binder","ancestors":[]}]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        \r\n            \r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n            <div class=\"description\"><p>allows you to bind a change watcher that looks for get and set operations on an arbitrary<br>property of an object at at any depth. This allows you to look for changes or intercept values asynchronously or otherwise.</p></div>\r\n        \r\n\r\n        \r\n            \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_binder.js.html\">documents/binder.js</a>, <a href=\"documents_binder.js.html#line2\">line 2</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Requires</h3>\r\n\r\n        <ul>\r\n            <li>module:async</li>\r\n        \r\n            <li><a href=\"module-documents_probe.html\">module:documents/probe</a></li>\r\n        \r\n            <li>module:lodash</li>\r\n        \r\n            <li>module:promise</li>\r\n        </ul>\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Methods</h3>\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".bind\"><span class=\"type-signature\">(static) </span>bind<span class=\"signature\">(path, record, options)</span><span class=\"type-signature\"> &rarr; {*}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_binder.js.html\">documents/binder.js</a>, <a href=\"documents_binder.js.html#line92\">line 92</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Bind to a property somewhere in an object. The property is found using dot notation and can be arbitrarily deep.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>path</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The path into the object to locate the property. For instance this could be <code>&quot;_id&quot;</code>, <code>&quot;name.last&quot;</code>.<br>or <code>&quot;some.really.really.long.path.including.an.array.2.name&quot;</code></p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>record</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>Anything you can hang a property off of</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>options</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">options</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>What you wanna do with the doohicky when yoyu bind it.</p>\r\n                <h6>Properties</h6>\r\n                \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>getter</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>This is the method to run when getting the value. When it runs, you will receive<br>a single parameter which is the current value as the object understands it. You can return the value directly, just raise an event or<br>whatever your little heart demands. However, if you are asynchronous, this will turn your return value into a promise, one of the<br>few places this system will embrace promises over node-like error passing and that is mainly because this is a getter so a return value<br>is particularly important. *</p>\r\n                <h6>Properties</h6>\r\n                \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>value</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The current value of the record</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>callback</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>When asynchronous, return you value through this method using node style<br>error passing (the promise is handled for you by this method).</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n            </td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>getterAsync</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>When true (not truthy) the getter is treated asynchronously and returns a promise with your value.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>setter</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A setter method</p>\r\n                <h6>Properties</h6>\r\n                \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>newVal</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The new value</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>oldVal</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The old value</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>record</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The record hosting the change</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n            </td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>validator</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>If you want a validator to run before settings values, pass this guy in</p>\r\n                <h6>Properties</h6>\r\n                \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>newVal</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The new value</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>oldVal</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The old value</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>record</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The record hosting the change</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>callback</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>If the validator is asynchronous, then pass your value back here, otherwise pass it back as a return value.<br>When you use an asynchronous instance, pass the error in the first value and then the rest of the parameters are yours to play with</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n            </td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>validatorAsync</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>When true (not truthy) the validator is treated asynchornously and returns a promise with your value.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n            </td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".unbind\"><span class=\"type-signature\">(static) </span>unbind<span class=\"signature\">(path, record)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_binder.js.html\">documents/binder.js</a>, <a href=\"documents_binder.js.html#line36\">line 36</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>You can unbind previously bound objects from here.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>path</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The path that was bound using {@link module:documents/binder.bind}</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>record</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object that was bound</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Module","title":"documents/model","docs":[{"comment":"/**\r\n * @fileOverview A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like\r\n * that, it is a pure, in memory data container\r\n * @module documents/model\r\n * @require base\r\n * @require documents/probe\r\n * @require lodash\r\n */","meta":{"filename":"model.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{},"shortpath":"documents/model.js"},"name":"documents/model","kind":"module","description":"<p>A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like<br>that, it is a pure, in memory data container</p>","preserveName":true,"tags":[{"originalTitle":"require","title":"require","text":"base","value":"base"},{"originalTitle":"require","title":"require","text":"documents/probe","value":"documents/probe"},{"originalTitle":"require","title":"require","text":"lodash","value":"lodash"}],"longname":"module:documents/model","___id":"T000004R000005","___s":true,"attribs":"","id":"documents/model","ancestors":[],"modules":[{"comment":"/**\r\n * @fileOverview A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like\r\n * that, it is a pure, in memory data container\r\n * @module documents/model\r\n * @require base\r\n * @require documents/probe\r\n * @require lodash\r\n */","meta":{"filename":"model.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{},"shortpath":"documents/model.js"},"name":"documents/model","kind":"module","description":"<p>A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like<br>that, it is a pure, in memory data container</p>","preserveName":true,"tags":[{"originalTitle":"require","title":"require","text":"base","value":"base"},{"originalTitle":"require","title":"require","text":"documents/probe","value":"documents/probe"},{"originalTitle":"require","title":"require","text":"lodash","value":"lodash"}],"longname":"module:documents/model","___id":"T000002R000153","___s":true,"attribs":"","id":"documents/model","ancestors":[]}]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        \r\n            \r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n            <div class=\"description\"><p>A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like<br>that, it is a pure, in memory data container</p></div>\r\n        \r\n\r\n        \r\n            \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_model.js.html\">documents/model.js</a>, <a href=\"documents_model.js.html#line2\">line 2</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Module","title":"documents/probe","docs":[{"comment":"/**\r\n @fileOverview Queries objects in memory using a mongo-like notation for reaching into objects and filtering for records\r\n\r\n @module documents/probe\r\n @author Terry Weiss\r\n @license MIT\r\n @requires lodash\r\n */","meta":{"filename":"probe.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{},"shortpath":"documents/probe.js"},"name":"documents/probe","kind":"module","description":"<p>Queries objects in memory using a mongo-like notation for reaching into objects and filtering for records</p>","preserveName":true,"author":["Terry Weiss"],"license":"MIT","requires":["module:lodash"],"longname":"module:documents/probe","___id":"T000004R000006","___s":true,"attribs":"","id":"documents/probe","ancestors":[],"modules":[{"comment":"/**\r\n @fileOverview Queries objects in memory using a mongo-like notation for reaching into objects and filtering for records\r\n\r\n @module documents/probe\r\n @author Terry Weiss\r\n @license MIT\r\n @requires lodash\r\n */","meta":{"filename":"probe.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{},"shortpath":"documents/probe.js"},"name":"documents/probe","kind":"module","description":"<p>Queries objects in memory using a mongo-like notation for reaching into objects and filtering for records</p>","preserveName":true,"author":["Terry Weiss"],"license":"MIT","requires":["module:lodash"],"longname":"module:documents/probe","___id":"T000002R000190","___s":true,"attribs":"","id":"documents/probe","ancestors":[]}]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        \r\n            \r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n            <div class=\"description\"><p>Queries objects in memory using a mongo-like notation for reaching into objects and filtering for records</p></div>\r\n        \r\n\r\n        \r\n            \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line2\">line 2</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-author\">Author:</dt>\r\n    <dd class=\"tag-author\">\r\n        <ul>\r\n            <li>Terry Weiss</li>\r\n        </ul>\r\n    </dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-license\">License:</dt>\r\n    <dd class=\"tag-license\"><ul class=\"dummy\"><li>MIT</li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Requires</h3>\r\n\r\n        <ul>\r\n            <li>module:lodash</li>\r\n        </ul>\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Classes</h3>\r\n\r\n        <dl>\r\n            <dt><a href=\"module-documents_probe.queryOperators.html\">queryOperators</a></dt>\r\n            <dd></dd>\r\n        \r\n            <dt><a href=\"module-documents_probe.updateOperators.html\">updateOperators</a></dt>\r\n            <dd></dd>\r\n        </dl>\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Members</h3>\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".delimiter\"><span class=\"type-signature\">(static) </span>delimiter<span class=\"type-signature\"> :string</span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line154\">line 154</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-default\">Default Value:</dt>\r\n    <dd class=\"tag-default\"><ul class=\"dummy\">\r\n            <li>'.'</li>\r\n        </ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>The delimiter to use when splitting an expression</p>\r\n</div>\r\n\r\n\r\n\r\n    <h5>Type:</h5>\r\n    <ul>\r\n        <li>\r\n            \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n        </li>\r\n    </ul>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Methods</h3>\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".all\"><span class=\"type-signature\">(static) </span>all<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line871\">line 871</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if all items match the query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".any\"><span class=\"type-signature\">(static) </span>any<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line882\">line 882</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if any of the items match the query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".every\"><span class=\"type-signature\">(static) </span>every<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line950\">line 950</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if all items match the query. Aliases as <code>all</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".find\"><span class=\"type-signature\">(static) </span>find<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line750\">line 750</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Find all records that match a query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>The results</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".findKeys\"><span class=\"type-signature\">(static) </span>findKeys<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line769\">line 769</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Find all records that match a query and returns the keys for those items. This is similar to {@link module:documents/probe.find} but instead of returning<br> records, returns the keys. If <code>obj</code> is an object it will return the hash key. If 'obj' is an array, it will return the index</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".findOne\"><span class=\"type-signature\">(static) </span>findOne<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line788\">line 788</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns the first record that matches the query. Aliased as <code>seek</code>.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".findOneKey\"><span class=\"type-signature\">(static) </span>findOneKey<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line813\">line 813</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns the first record that matches the query and returns its key or index depending on whether <code>obj</code> is an object or array respectively.<br> Aliased as <code>seekKey</code>.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".get\"><span class=\"type-signature\">(static) </span>get<span class=\"signature\">(path, record)</span><span class=\"type-signature\"> &rarr; {*}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line930\">line 930</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Reaches into an object and allows you to get at a value deeply nested in an object. This is not a query, but a<br> straight reach in, useful for event bindings</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>path</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The split path of the element to work with</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>record</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The record to reach into</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>Whatever was found in the record</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".mixin\"><span class=\"type-signature\">(static) </span>mixin<span class=\"signature\">(obj, collection)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line992\">line 992</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Binds the query and update methods to a specific object and adds the methods to that object. When called these<br> methods can skip the first parameter so that find(object, query) can just be called as object.find(query)</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n|\r\n\r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object or array to bind to</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>collection</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n|\r\n\r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>If the collection is not the same as <code>this</code> but is a property, or even<br> a whole other object, you specify that here. Otherwise the <code>obj</code> is assumed to be the same as the collecion</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".proxy\"><span class=\"type-signature\">(static) </span>proxy<span class=\"signature\">(obj)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line975\">line 975</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Binds the query and update methods to a new object. When called these<br> methods can skip the first parameter so that find(object, query) can just be called as find(query)</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n|\r\n\r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object or array to bind to</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>An object with method bindings in place</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".remove\"><span class=\"type-signature\">(static) </span>remove<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {object|array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line838\">line 838</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Remove all items in the object/array that match the query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>The array or object as appropriate without the records.</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n|\r\n\r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".set\"><span class=\"type-signature\">(static) </span>set<span class=\"signature\">(path, record, setter, newValue)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line918\">line 918</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>This will write the value into a record at the path, creating intervening objects if they don't exist. This does not work as filtered<br> update and is meant to be used on a single record. It is a nice way of setting a property at an arbitrary depth at will.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>path</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The split path of the element to work with</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>record</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The record to reach into</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>setter</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The set operation.  See {@link module:documents/probe.updateOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>newValue</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value to write to the, or if the operator is $pull, the query of items to look for</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".some\"><span class=\"type-signature\">(static) </span>some<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line941\">line 941</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if any of the items match the query. Aliases as <code>any</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".unique\"><span class=\"type-signature\">(static) </span>unique<span class=\"signature\">(obj, qu)</span><span class=\"type-signature\"> &rarr; {array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line902\">line 902</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns the set of unique records that match a query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to query</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".update\"><span class=\"type-signature\">(static) </span>update<span class=\"signature\">(obj, qu, setDocument)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line734\">line 734</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Updates all records in obj that match the query. See {@link module:documents/probe.updateOperators} for the operators that are supported.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n|\r\n\r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The object to update</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query which will be used to identify the records to updated</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>setDocument</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The update operator. See {@link module:documents/probe.updateOperators}</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Class","title":"queryOperators","docs":[{"comment":"/**\r\n * These are the supported query operators\r\n *\r\n * @memberOf module:documents/probe\r\n * @name queryOperators\r\n * @class This is not actually a class, but an artifact of the documentation system\r\n */","meta":{"filename":"probe.js","lineno":999,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{},"shortpath":"documents/probe.js"},"description":"<p>These are the supported query operators</p>","memberof":"module:documents/probe","name":"queryOperators","kind":"class","classdesc":"<p>This is not actually a class, but an artifact of the documentation system</p>","scope":"static","longname":"module:documents/probe.queryOperators","___id":"T000003R000005","___s":true,"attribs":"<span class=\"type-signature\"></span>","id":"queryOperators","signature":"<span class=\"signature\">()</span><span class=\"type-signature\"></span>","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        <h2>\r\n            <span class=\"ancestors\"><a href=\"module-documents_probe.html\">documents/probe</a>.</span>\r\n        \r\n        queryOperators\r\n        </h2>\r\n        \r\n            <div class=\"class-description\"><p>This is not actually a class, but an artifact of the documentation system</p></div>\r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n\r\n    \r\n    <h2>Constructor</h2>\r\n    \r\n\r\n    <h4 class=\"name\" id=\"queryOperators\"><span class=\"type-signature\"></span>new queryOperators<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line999\">line 999</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>These are the supported query operators</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Members</h3>\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$all\"><span class=\"type-signature\">(static) </span>$all<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line389\">line 389</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p><code>$all</code> checks to see if all of the members of the query are included in an array<br><code>{array: {$all: [val1, val2, val3]}}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {\"categories\" : {$all : [\"cat4\", \"cat2\", \"cat1\"]}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$and\"><span class=\"type-signature\">(static) </span>$and<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line579\">line 579</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if all of the conditions of the query are met<br><code>{$and: [query1, query2, query3]}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {$and : [\r     {\"name.first\" : \"Mildred\"},\r     {\"name.last\" : \"Graves\"}\r]} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$elemMatch\"><span class=\"type-signature\">(static) </span>$elemMatch<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line552\">line 552</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>This is like $all except that it works with an array of objects or value. It checks to see the array matches all<br>of the conditions of the query<br><code>{array: {$elemMatch: {path: value, path: {$operation: value2}}}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {attr : {$elemMatch : [\r {color : \"red\", \"hand\" : \"left\"}\r]}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$eq\"><span class=\"type-signature\">(static) </span>$eq<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line347\">line 347</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p><code>$eq</code> performs a <code>===</code> comparison by comparing the value directly if it is an atomic value.<br>otherwise if it is an array, it checks to see if the value looked for is in the array.<br><code>{field: value}</code> or <code>{field: {$eq : value}}</code> or <code>{array: value}</code> or <code>{array: {$eq : value}}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {categories : \"cat1\"} );\r// is the same as\rprobe.find( data, {categories : {$eq: \"cat1\"}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$exists\"><span class=\"type-signature\">(static) </span>$exists<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line493\">line 493</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p><code>$exists</code> Sees if a field exists.<br><code>{field: {$exists: true|false}}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {\"name.middle\" : {$exists : true}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$gt\"><span class=\"type-signature\">(static) </span>$gt<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line409\">line 409</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p><code>$gt</code> Sees if a field is greater than the value<br><code>{field: {$gt: value}}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {\"age\" : {$gt : 24}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$gte\"><span class=\"type-signature\">(static) </span>$gte<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line422\">line 422</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p><code>$gte</code> Sees if a field is greater than or equal to the value<br><code>{field: {$gte: value}}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {\"age\" : {$gte : 50}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$in\"><span class=\"type-signature\">(static) </span>$in<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line461\">line 461</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p><code>$in</code> Sees if a field has one of the values in the query<br><code>{field: {$in: [test1, test2, test3,...]}}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {\"age\" : {$in : [24, 28, 60]}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$lt\"><span class=\"type-signature\">(static) </span>$lt<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line435\">line 435</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p><code>$lt</code> Sees if a field is less than the value<br><code>{field: {$lt: value}}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {\"age\" : {$lt : 24}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$lte\"><span class=\"type-signature\">(static) </span>$lte<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line448\">line 448</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p><code>$lte</code> Sees if a field is less than or equal to the value<br><code>{field: {$lte: value}}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {\"age\" : {$lte : 50}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$mod\"><span class=\"type-signature\">(static) </span>$mod<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line506\">line 506</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Checks equality to a modulus operation on a field<br><code>{field: {$mod: [divisor, remainder]}}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {\"age\" : {$mod : [2, 0]}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$ne\"><span class=\"type-signature\">(static) </span>$ne<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line369\">line 369</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p><code>$ne</code> performs a <code>!==</code> comparison by comparing the value directly if it is an atomic value. Otherwise, if it is an array<br>this is performs a &quot;not in array&quot;.<br>'{field: {$ne : value}}<code>or '{array: {$ne : value}}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {\"name.first\" : {$ne : \"Sheryl\"}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$nin\"><span class=\"type-signature\">(static) </span>$nin<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line477\">line 477</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p><code>$nin</code> Sees if a field has none of the values in the query<br><code>{field: {$nin: [test1, test2, test3,...]}}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {\"age\" : {$nin : [24, 28, 60]}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$nor\"><span class=\"type-signature\">(static) </span>$nor<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line635\">line 635</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if none of the conditions of the query are met<br><code>{$nor: [query1, query2, query3]}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {$nor : [\r     {\"age\" : {$in : [24, 28, 60]}},\r     {categories : \"cat1\"}\r]} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$not\"><span class=\"type-signature\">(static) </span>$not<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line662\">line 662</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Logical NOT on the conditions of the query<br><code>{$not: [query1, query2, query3]}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {$not : {\"age\" : {$lt : 24}}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$or\"><span class=\"type-signature\">(static) </span>$or<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line608\">line 608</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if any of the conditions of the query are met<br><code>{$or: [query1, query2, query3]}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {$or : [\r     \"age\" : {$in : [24, 28, 60]}},\r     {categories : \"cat1\"}\r]} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$regex\"><span class=\"type-signature\">(static) </span>$regex<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line538\">line 538</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Performs a regular expression test againts the field<br><code>{field: {$regex: re, $options: reOptions}}</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {\"name.first\" : {$regex : \"m*\", $options : \"i\"}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$size\"><span class=\"type-signature\">(static) </span>$size<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line525\">line 525</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Compares the size of the field/array to the query. This can be used on arrays, strings and objects (where it will count keys)<br><code>{'field|array</code>: {$size: value}}`</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.find( data, {attr : {$size : 3}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Class","title":"updateOperators","docs":[{"comment":"/**\r\n * These are the supported update operators\r\n *\r\n * @memberOf module:documents/probe\r\n * @name updateOperators\r\n * @class This is not actually a class, but an artifact of the documentation system\r\n */","meta":{"filename":"probe.js","lineno":1007,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{},"shortpath":"documents/probe.js"},"description":"<p>These are the supported update operators</p>","memberof":"module:documents/probe","name":"updateOperators","kind":"class","classdesc":"<p>This is not actually a class, but an artifact of the documentation system</p>","scope":"static","longname":"module:documents/probe.updateOperators","___id":"T000003R000006","___s":true,"attribs":"<span class=\"type-signature\"></span>","id":"updateOperators","signature":"<span class=\"signature\">()</span><span class=\"type-signature\"></span>","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        <h2>\r\n            <span class=\"ancestors\"><a href=\"module-documents_probe.html\">documents/probe</a>.</span>\r\n        \r\n        updateOperators\r\n        </h2>\r\n        \r\n            <div class=\"class-description\"><p>This is not actually a class, but an artifact of the documentation system</p></div>\r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n\r\n    \r\n    <h2>Constructor</h2>\r\n    \r\n\r\n    <h4 class=\"name\" id=\"updateOperators\"><span class=\"type-signature\"></span>new updateOperators<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line1007\">line 1007</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>These are the supported update operators</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Members</h3>\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$dec\"><span class=\"type-signature\">(static) </span>$dec<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line245\">line 245</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Decrements a field by the amount you specify. It takes the form<br><code>{ $dec: { field1: amount }</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.update( obj, {'name.last' : 'Owen', 'name.first' : 'LeRoy'},\r{$dec : {'password.changes' : 2}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$inc\"><span class=\"type-signature\">(static) </span>$inc<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line225\">line 225</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Increments a field by the amount you specify. It takes the form<br><code>{ $inc: { field1: amount } }</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.update( obj, {'name.last' : 'Owen', 'name.first' : 'LeRoy'},\r{$inc : {'password.changes' : 2}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$pop\"><span class=\"type-signature\">(static) </span>$pop<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line277\">line 277</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>The $pop operator removes the first or last element of an array. Pass $pop a value of 1 to remove the last element<br>in an array and a value of -1 to remove the first element of an array. This will only work on arrays. Syntax:<br><code>{ $pop: { field: 1 } }</code> or <code>{ $pop: { field: -1 } }</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\r// attr is the name of the array field\rprobe.update( data, {_id : '511d18827da2b88b09000133'}, {$pop : {attr : 1}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$pull\"><span class=\"type-signature\">(static) </span>$pull<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line318\">line 318</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>The $pull operator removes all instances of a value from an existing array. It looks like this:<br><code>{ $pull: { field: &lt;query&gt; } }</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\r// attr is the name of the array field\rprobe.update( data, {'email' : 'EWallace.43@fauxprisons.com'},\r{$pull : {attr : {\"color\" : \"green\"}}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$push\"><span class=\"type-signature\">(static) </span>$push<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line301\">line 301</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>The $push operator appends a specified value to an array. It looks like this:<br><code>{ $push: { &lt;field&gt;: &lt;value&gt; } }</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\r// attr is the name of the array field\rprobe.update( data, {_id : '511d18827da2b88b09000133'},\r{$push : {attr : {\"hand\" : \"new\", \"color\" : \"new\"}}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".$unset\"><span class=\"type-signature\">(static) </span>$unset<span class=\"type-signature\"></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_probe.js.html\">documents/probe.js</a>, <a href=\"documents_probe.js.html#line265\">line 265</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Removes the field from the object. It takes the form<br><code>{ $unset: { field1: &quot;&quot; } }</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var probe = require(\"documents/probe\");\rprobe.update( data, {'name.first' : 'Yogi'}, {$unset : {'name.first' : ''}} );</code></pre>\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Module","title":"documents/schema","docs":[{"comment":"/**\r\n * @fileOverview Enables a schema and validation feature set to your document or other object.\r\n * @module documents/schema\r\n * @requires base\r\n * @requires jjv\r\n * @require lodash\r\n */","meta":{"filename":"schema.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{},"shortpath":"documents/schema.js"},"name":"documents/schema","kind":"module","description":"<p>Enables a schema and validation feature set to your document or other object.</p>","preserveName":true,"requires":["module:base","module:jjv"],"tags":[{"originalTitle":"require","title":"require","text":"lodash","value":"lodash"}],"longname":"module:documents/schema","___id":"T000004R000007","___s":true,"attribs":"","id":"documents/schema","ancestors":[],"modules":[{"comment":"/**\r\n * @fileOverview Enables a schema and validation feature set to your document or other object.\r\n * @module documents/schema\r\n * @requires base\r\n * @requires jjv\r\n * @require lodash\r\n */","meta":{"filename":"schema.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{},"shortpath":"documents/schema.js"},"name":"documents/schema","kind":"module","description":"<p>Enables a schema and validation feature set to your document or other object.</p>","preserveName":true,"requires":["module:base","module:jjv"],"tags":[{"originalTitle":"require","title":"require","text":"lodash","value":"lodash"}],"longname":"module:documents/schema","___id":"T000002R000451","___s":true,"attribs":"","id":"documents/schema","ancestors":[]}]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        \r\n            \r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n            <div class=\"description\"><p>Enables a schema and validation feature set to your document or other object.</p></div>\r\n        \r\n\r\n        \r\n            \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_schema.js.html\">documents/schema.js</a>, <a href=\"documents_schema.js.html#line2\">line 2</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Requires</h3>\r\n\r\n        <ul>\r\n            <li><a href=\"module-base.html\">module:base</a></li>\r\n        \r\n            <li>module:jjv</li>\r\n        </ul>\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Module","title":"ink/collector","docs":[{"comment":"/**\r\n @fileOverview An object and array collector\r\n @module ink/collector\r\n */","meta":{"filename":"collector.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{},"shortpath":"documents/collector.js"},"name":"ink/collector","kind":"module","description":"<p>An object and array collector</p>","preserveName":true,"longname":"module:ink/collector","___id":"T000004R000008","___s":true,"attribs":"","id":"ink/collector","ancestors":[],"modules":[{"comment":"/**\r\n @fileOverview An object and array collector\r\n @module ink/collector\r\n */","meta":{"filename":"collector.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{},"shortpath":"documents/collector.js"},"name":"ink/collector","kind":"module","description":"<p>An object and array collector</p>","preserveName":true,"longname":"module:ink/collector","___id":"T000002R000088","___s":true,"attribs":"","id":"ink/collector","ancestors":[]}]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        \r\n            \r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n            <div class=\"description\"><p>An object and array collector</p></div>\r\n        \r\n\r\n        \r\n            \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line2\">line 2</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Classes</h3>\r\n\r\n        <dl>\r\n            <dt><a href=\"module-ink_collector-ACollector.html\">ACollector</a></dt>\r\n            <dd></dd>\r\n        \r\n            <dt><a href=\"module-ink_collector-CollectorBase.html\">CollectorBase</a></dt>\r\n            <dd></dd>\r\n        \r\n            <dt><a href=\"module-ink_collector-OCollector.html\">OCollector</a></dt>\r\n            <dd></dd>\r\n        </dl>\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Methods</h3>\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\".collect\"><span class=\"type-signature\">(static) </span>collect<span class=\"signature\">(obj)</span><span class=\"type-signature\"> &rarr; {ACollector|OCollector}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line363\">line 363</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Collect an object</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>obj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n|\r\n\r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>What to collect</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">ACollector</span>\r\n|\r\n\r\n<span class=\"param-type\">OCollector</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~add\"><span class=\"type-signature\">(inner) </span>add<span class=\"signature\">(key, item)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line56\">line 56</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Adds an item to the collection</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>key</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The key to use for the item being added.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>item</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The item to add to the collection. The item is not iterated so that you could add bundled items to the collection</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~add\"><span class=\"type-signature\">(inner) </span>add<span class=\"signature\">(item)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line296\">line 296</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Adds to the top of the collection</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>item</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The item to add to the collection. Only one item at a time can be added</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~append\"><span class=\"type-signature\">(inner) </span>append<span class=\"signature\">(item)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line303\">line 303</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Add to the bottom of the list</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>item</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The item to add to the collection.  Only one item at a time can be added</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~at\"><span class=\"type-signature\">(inner) </span>at<span class=\"signature\">(args)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line324\">line 324</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Creates an array of elements from the specified indexes, or keys, of the collection. Indexes may be specified as<br>individual arguments or as arrays of indexes</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>args</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">indexes</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The indexes to use</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~compact\"><span class=\"type-signature\">(inner) </span>compact<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line316\">line 316</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Modifies the collection with all falsey values of array removed. The values false, null, 0, &quot;&quot;, undefined and NaN are all falsey.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~countBy\"><span class=\"type-signature\">(inner) </span>countBy<span class=\"signature\">(query<span class=\"signature-attributes\">opt</span>, iterator, thisobj<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line138\">line 138</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Creates an object composed of keys returned from running each element<br>of the collection through the given callback. The corresponding value of each key<br>is the number of times the key was returned by the callback.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>query</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A query to evaluate. If you pass in a query, only the items that match the query<br>are iterated over.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>iterator</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>thisobj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value of <code>this</code></p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~destroy\"><span class=\"type-signature\">(inner) </span>destroy<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line241\">line 241</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Destructor called when the object is destroyed.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~each\"><span class=\"type-signature\">(inner) </span>each<span class=\"signature\">(query<span class=\"signature-attributes\">opt</span>, iterator, thisobj<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line67\">line 67</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Iterate over each item in the collection, or a subset that matches a query. This supports two signatures:<br><code>.each(query, function)</code> and <code>.each(function)</code>. If you pass in a query, only the items that match the query<br>are iterated over.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>query</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A query to evaluate</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>iterator</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>Function to execute against each item in the collection</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>thisobj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value of <code>this</code></p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~flatten\"><span class=\"type-signature\">(inner) </span>flatten<span class=\"signature\">(query<span class=\"signature-attributes\">opt</span>, iterator,, thisobj<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {number}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line338\">line 338</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Flattens a nested array (the nesting can be to any depth). If isShallow is truthy, array will only be flattened a single level.<br>If callback is passed, each element of array is passed through a callback before flattening.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>query</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A query to evaluate . If you pass in a query, only the items that match the query<br>are iterated over.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>iterator,</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>thisobj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value of <code>this</code></p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">number</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~groupBy\"><span class=\"type-signature\">(inner) </span>groupBy<span class=\"signature\">(query<span class=\"signature-attributes\">opt</span>, iterator, thisobj<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line157\">line 157</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Creates an object composed of keys returned from running each element of the collection through the callback.<br>The corresponding value of each key is an array of elements passed to callback that returned the key.<br>The callback is invoked with three arguments: (value, index|key, collection).</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>query</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A query to evaluate . If you pass in a query, only the items that match the query<br>are iterated over.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>iterator</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>thisobj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value of <code>this</code></p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~index\"><span class=\"type-signature\">(inner) </span>index<span class=\"signature\">(key)</span><span class=\"type-signature\"> &rarr; {*}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line352\">line 352</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Gets an items by its index</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>key</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">number</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The index to get</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~key\"><span class=\"type-signature\">(inner) </span>key<span class=\"signature\">(key)</span><span class=\"type-signature\"> &rarr; {*}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line257\">line 257</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Get a record by key</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>key</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The key of the record to get</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~map\"><span class=\"type-signature\">(inner) </span>map<span class=\"signature\">(query<span class=\"signature-attributes\">opt</span>, iterator, thisobj<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line99\">line 99</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Maps the contents to an array by iterating over it and transforming it. You supply the iterator. Supports two signatures:<br><code>.map(query, function)</code> and <code>.map(function)</code>. If you pass in a query, only the items that match the query<br>are iterated over.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>query</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A query to evaluate</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>iterator</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>Function to execute against each item in the collection</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>thisobj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value of <code>this</code></p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~max\"><span class=\"type-signature\">(inner) </span>max<span class=\"signature\">(query<span class=\"signature-attributes\">opt</span>, iterator, thisobj<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {number}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line211\">line 211</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Retrieves the maximum value of an array. If callback is passed,<br>it will be executed for each value in the array to generate the criterion by which the value is ranked.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>query</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A query to evaluate . If you pass in a query, only the items that match the query<br>are iterated over.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>iterator</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>thisobj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value of <code>this</code></p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">number</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~min\"><span class=\"type-signature\">(inner) </span>min<span class=\"signature\">(query<span class=\"signature-attributes\">opt</span>, iterator, thisobj<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {number}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line229\">line 229</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Retrieves the minimum value of an array. If callback is passed,<br>it will be executed for each value in the array to generate the criterion by which the value is ranked.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>query</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A query to evaluate . If you pass in a query, only the items that match the query<br>are iterated over.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>iterator</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>thisobj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value of <code>this</code></p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">number</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~pluck\"><span class=\"type-signature\">(inner) </span>pluck<span class=\"signature\">(query<span class=\"signature-attributes\">opt</span>, property)</span><span class=\"type-signature\"> &rarr; {*}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line174\">line 174</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Reduce the collection to a single value. Supports two signatures:<br><code>.pluck(query, function)</code> and <code>.pluck(function)</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>query</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to evaluate. If you pass in a query, only the items that match the query<br>are iterated over.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>property</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The property that will be 'plucked' from the contents of the collection</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~push\"><span class=\"type-signature\">(inner) </span>push<span class=\"signature\">(item)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line310\">line 310</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Add an item to the top of the list. This is identical to <code>add</code>, but is provided for stack semantics</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>item</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The item to add to the collection. Only one item at a time can be added</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~reduce\"><span class=\"type-signature\">(inner) </span>reduce<span class=\"signature\">(query<span class=\"signature-attributes\">opt</span>, iterator, accumulator<span class=\"signature-attributes\">opt</span>, thisobj<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {*}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line119\">line 119</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Reduces a collection to a value which is the accumulated result of running each element in the collection through the<br>callback, where each successive callback execution consumes the return value of the previous execution. If accumulator<br>is not passed, the first element of the collection will be used as the initial accumulator value.<br>are iterated over.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>query</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A query to evaluate</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>iterator</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The function that will be executed in each item in the collection</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>accumulator</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>Initial value of the accumulator.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>thisobj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value of <code>this</code></p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">*</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~sortBy\"><span class=\"type-signature\">(inner) </span>sortBy<span class=\"signature\">(query<span class=\"signature-attributes\">opt</span>, iterator, thisobj<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line193\">line 193</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns a sorted copy of the collection.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>query</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to evaluate. If you pass in a query, only the items that match the query<br>are iterated over.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>iterator</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>thisobj</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The value of <code>this</code></p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~toArray\"><span class=\"type-signature\">(inner) </span>toArray<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line80\">line 80</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns the collection as an array. If it is already an array, it just returns that.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"~toJSON\"><span class=\"type-signature\">(inner) </span>toJSON<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {object|Object|array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line88\">line 88</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Supports conversion to a JSON string or for passing over the wire</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n<ul>\r\n        <li>\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n</li>\r\n    \r\n        <li>\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">Object</span>\r\n|\r\n\r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n</li>\r\n    </ul>\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Class","title":"ACollector","docs":[{"comment":"/**\r\n An array based collector\r\n @extends module:documents/collector~CollectorBase\r\n @constructor\r\n */","meta":{"range":[9599,12790],"filename":"collector.js","lineno":268,"columnno":4,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{"id":"astnode100001337","name":"ACollector","type":"CallExpression","value":""},"shortpath":"documents/collector.js"},"description":"<p>An array based collector</p>","augments":["module:documents/collector~CollectorBase"],"kind":"class","name":"ACollector","longname":"module:ink/collector~ACollector","scope":"inner","memberof":"module:ink/collector","params":[],"___id":"T000003R000007","___s":true,"attribs":"<span class=\"type-signature\"></span>","id":"ACollector","signature":"<span class=\"signature\">()</span><span class=\"type-signature\"></span>","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        <h2>\r\n            <span class=\"ancestors\"><a href=\"module-ink_collector.html\">ink/collector</a>~</span>\r\n        \r\n        ACollector\r\n        </h2>\r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"ACollector\"><span class=\"type-signature\"></span>new ACollector<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line268\">line 268</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>An array based collector</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    </div>\r\n\r\n    \r\n        <h3 class=\"subsection-title\">Extends</h3>\r\n\r\n        \r\n\r\n\r\n    <ul>\r\n        <li><a href=\"module-documents_collector-CollectorBase.html\">module:documents/collector~CollectorBase</a></li>\r\n    </ul>\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Members</h3>\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"length\"><span class=\"type-signature\"></span>length<span class=\"type-signature\"> :number</span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line29\">line 29</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#length\">module:documents/collector~CollectorBase#length</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Get the size of the collection</p>\r\n</div>\r\n\r\n\r\n\r\n    <h5>Type:</h5>\r\n    <ul>\r\n        <li>\r\n            \r\n<span class=\"param-type\">number</span>\r\n\r\n\r\n        </li>\r\n    </ul>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Methods</h3>\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"all\"><span class=\"type-signature\"></span>all<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line411\">line 411</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#all\">module:documents/collector~CollectorBase#all</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if all items match the query. Aliases as <code>every</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"any\"><span class=\"type-signature\"></span>any<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line422\">line 422</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#any\">module:documents/collector~CollectorBase#any</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if any of the items match the query. Aliases as <code>all</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"every\"><span class=\"type-signature\"></span>every<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line379\">line 379</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#every\">module:documents/collector~CollectorBase#every</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if all items match the query. Aliases as <code>all</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"find\"><span class=\"type-signature\"></span>find<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line478\">line 478</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#find\">module:documents/collector~CollectorBase#find</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Find all records that match a query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>The results</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"findKeys\"><span class=\"type-signature\"></span>findKeys<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line466\">line 466</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#findKeys\">module:documents/collector~CollectorBase#findKeys</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Find all records that match a query and returns the keys for those items. This is similar to {@link module:ink/probe.find} but instead of returning<br> records, returns the keys. If <code>obj</code> is an object it will return the hash key. If 'obj' is an array, it will return the index</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"findOne\"><span class=\"type-signature\"></span>findOne<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line455\">line 455</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#findOne\">module:documents/collector~CollectorBase#findOne</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns the first record that matches the query. Aliased as <code>seek</code>.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"findOneKey\"><span class=\"type-signature\"></span>findOneKey<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line443\">line 443</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#findOneKey\">module:documents/collector~CollectorBase#findOneKey</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns the first record that matches the query and returns its key or index depending on whether <code>obj</code> is an object or array respectively.<br> Aliased as <code>seekKey</code>.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"remove\"><span class=\"type-signature\"></span>remove<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {object|array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line433\">line 433</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#remove\">module:documents/collector~CollectorBase#remove</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Remove all items in the object/array that match the query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:ink/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>The array or object as appropriate without the records.</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n|\r\n\r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"some\"><span class=\"type-signature\"></span>some<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line390\">line 390</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#some\">module:documents/collector~CollectorBase#some</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if any of the items match the query. Aliases as <code>any</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"unique\"><span class=\"type-signature\"></span>unique<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line401\">line 401</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#unique\">module:documents/collector~CollectorBase#unique</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns the set of unique records that match a query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"update\"><span class=\"type-signature\"></span>update<span class=\"signature\">(qu, setDocument)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line488\">line 488</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#update\">module:documents/collector~CollectorBase#update</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Updates all records in obj that match the query. See {@link module:ink/probe.updateOperators} for the operators that are supported.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query which will be used to identify the records to updated</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>setDocument</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The update operator. See {@link module:ink/probe.updateOperators}</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Class","title":"CollectorBase","docs":[{"comment":"/**\r\n * A collector\r\n * @constructor\r\n */","meta":{"range":[244,9125],"filename":"collector.js","lineno":15,"columnno":4,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{"id":"astnode100000759","name":"CollectorBase","type":"CallExpression","value":""},"shortpath":"documents/collector.js"},"description":"<p>A collector</p>","kind":"class","name":"CollectorBase","longname":"module:ink/collector~CollectorBase","scope":"inner","memberof":"module:ink/collector","params":[],"___id":"T000003R000008","___s":true,"attribs":"<span class=\"type-signature\"></span>","id":"CollectorBase","signature":"<span class=\"signature\">()</span><span class=\"type-signature\"></span>","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        <h2>\r\n            <span class=\"ancestors\"><a href=\"module-ink_collector.html\">ink/collector</a>~</span>\r\n        \r\n        CollectorBase\r\n        </h2>\r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"CollectorBase\"><span class=\"type-signature\"></span>new CollectorBase<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line15\">line 15</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>A collector</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Class","title":"OCollector","docs":[{"comment":"/**\r\n * An object based collector\r\n * @extends module:documents/collector~CollectorBase\r\n * @constructor\r\n */","meta":{"range":[9245,9444],"filename":"collector.js","lineno":251,"columnno":4,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\documents","code":{"id":"astnode100001320","name":"OCollector","type":"CallExpression","value":""},"shortpath":"documents/collector.js"},"description":"<p>An object based collector</p>","augments":["module:documents/collector~CollectorBase"],"kind":"class","name":"OCollector","longname":"module:ink/collector~OCollector","scope":"inner","memberof":"module:ink/collector","params":[],"___id":"T000003R000009","___s":true,"attribs":"<span class=\"type-signature\"></span>","id":"OCollector","signature":"<span class=\"signature\">()</span><span class=\"type-signature\"></span>","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        <h2>\r\n            <span class=\"ancestors\"><a href=\"module-ink_collector.html\">ink/collector</a>~</span>\r\n        \r\n        OCollector\r\n        </h2>\r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"OCollector\"><span class=\"type-signature\"></span>new OCollector<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line251\">line 251</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>An object based collector</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    </div>\r\n\r\n    \r\n        <h3 class=\"subsection-title\">Extends</h3>\r\n\r\n        \r\n\r\n\r\n    <ul>\r\n        <li><a href=\"module-documents_collector-CollectorBase.html\">module:documents/collector~CollectorBase</a></li>\r\n    </ul>\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Members</h3>\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\"length\"><span class=\"type-signature\"></span>length<span class=\"type-signature\"> :number</span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line29\">line 29</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#length\">module:documents/collector~CollectorBase#length</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Get the size of the collection</p>\r\n</div>\r\n\r\n\r\n\r\n    <h5>Type:</h5>\r\n    <ul>\r\n        <li>\r\n            \r\n<span class=\"param-type\">number</span>\r\n\r\n\r\n        </li>\r\n    </ul>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Methods</h3>\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"all\"><span class=\"type-signature\"></span>all<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line411\">line 411</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#all\">module:documents/collector~CollectorBase#all</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if all items match the query. Aliases as <code>every</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"any\"><span class=\"type-signature\"></span>any<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line422\">line 422</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#any\">module:documents/collector~CollectorBase#any</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if any of the items match the query. Aliases as <code>all</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"every\"><span class=\"type-signature\"></span>every<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line379\">line 379</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#every\">module:documents/collector~CollectorBase#every</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if all items match the query. Aliases as <code>all</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"find\"><span class=\"type-signature\"></span>find<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line478\">line 478</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#find\">module:documents/collector~CollectorBase#find</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Find all records that match a query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>The results</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"findKeys\"><span class=\"type-signature\"></span>findKeys<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line466\">line 466</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#findKeys\">module:documents/collector~CollectorBase#findKeys</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Find all records that match a query and returns the keys for those items. This is similar to {@link module:ink/probe.find} but instead of returning<br> records, returns the keys. If <code>obj</code> is an object it will return the hash key. If 'obj' is an array, it will return the index</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"findOne\"><span class=\"type-signature\"></span>findOne<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line455\">line 455</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#findOne\">module:documents/collector~CollectorBase#findOne</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns the first record that matches the query. Aliased as <code>seek</code>.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"findOneKey\"><span class=\"type-signature\"></span>findOneKey<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {object}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line443\">line 443</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#findOneKey\">module:documents/collector~CollectorBase#findOneKey</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns the first record that matches the query and returns its key or index depending on whether <code>obj</code> is an object or array respectively.<br> Aliased as <code>seekKey</code>.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"remove\"><span class=\"type-signature\"></span>remove<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {object|array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line433\">line 433</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#remove\">module:documents/collector~CollectorBase#remove</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Remove all items in the object/array that match the query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute. See {@link module:ink/probe.queryOperators} for the operators you can use.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n<div class=\"param-desc\">\r\n    <p>The array or object as appropriate without the records.</p>\r\n</div>\r\n\r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">object</span>\r\n|\r\n\r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"some\"><span class=\"type-signature\"></span>some<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line390\">line 390</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#some\">module:documents/collector~CollectorBase#some</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns true if any of the items match the query. Aliases as <code>any</code></p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"unique\"><span class=\"type-signature\"></span>unique<span class=\"signature\">(qu)</span><span class=\"type-signature\"> &rarr; {array}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line401\">line 401</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#unique\">module:documents/collector~CollectorBase#unique</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Returns the set of unique records that match a query</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query to execute.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"update\"><span class=\"type-signature\"></span>update<span class=\"signature\">(qu, setDocument)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"documents_collector.js.html\">documents/collector.js</a>, <a href=\"documents_collector.js.html#line488\">line 488</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"inherited-from\">Inherited From:</dt>\r\n    <dd class=\"inherited-from\"><ul class=\"dummy\"><li>\r\n        <a href=\"module-documents_collector-CollectorBase.html#update\">module:documents/collector~CollectorBase#update</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Updates all records in obj that match the query. See {@link module:ink/probe.updateOperators} for the operators that are supported.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>qu</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The query which will be used to identify the records to updated</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>setDocument</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The update operator. See {@link module:ink/probe.updateOperators}</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Module","title":"mixins/bussable","docs":[{"comment":"/**\r\n * @fileOverview Provides easy access to the system bus and provides some helper methods for doing so\r\n * @module mixins/bussable\r\n * @requires postal\r\n * @requires lodash\r\n * @requires base\r\n */","meta":{"filename":"bussable.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\mixins","code":{},"shortpath":"mixins/bussable.js"},"name":"mixins/bussable","kind":"module","description":"<p>Provides easy access to the system bus and provides some helper methods for doing so</p>","preserveName":true,"requires":["module:postal","module:lodash","module:base"],"longname":"module:mixins/bussable","___id":"T000004R000009","___s":true,"attribs":"","id":"mixins/bussable","ancestors":[],"modules":[{"comment":"/**\r\n * @fileOverview Provides easy access to the system bus and provides some helper methods for doing so\r\n * @module mixins/bussable\r\n * @requires postal\r\n * @requires lodash\r\n * @requires base\r\n */","meta":{"filename":"bussable.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\mixins","code":{},"shortpath":"mixins/bussable.js"},"name":"mixins/bussable","kind":"module","description":"<p>Provides easy access to the system bus and provides some helper methods for doing so</p>","preserveName":true,"requires":["module:postal","module:lodash","module:base"],"longname":"module:mixins/bussable","___id":"T000002R000519","___s":true,"attribs":"","id":"mixins/bussable","ancestors":[]}]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        \r\n            \r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n            <div class=\"description\"><p>Provides easy access to the system bus and provides some helper methods for doing so</p></div>\r\n        \r\n\r\n        \r\n            \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_bussable.js.html\">mixins/bussable.js</a>, <a href=\"mixins_bussable.js.html#line2\">line 2</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Requires</h3>\r\n\r\n        <ul>\r\n            <li>module:postal</li>\r\n        \r\n            <li>module:lodash</li>\r\n        \r\n            <li><a href=\"module-base.html\">module:base</a></li>\r\n        </ul>\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Module","title":"mixins/signalable","docs":[{"comment":"/**\r\n * @fileOverview Add the ability to fire signals on your objects. Signals are events, but hard coded into the object\r\n * and don't rely on strings like other events and `eventables`\r\n * @module mixins/signalable\r\n * @requires base\r\n * @requires signals\r\n * @requires base/logger\r\n */","meta":{"filename":"signalable.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\mixins","code":{},"shortpath":"mixins/signalable.js"},"name":"mixins/signalable","kind":"module","description":"<p>Add the ability to fire signals on your objects. Signals are events, but hard coded into the object<br>and don't rely on strings like other events and <code>eventables</code></p>","preserveName":true,"requires":["module:base","module:signals","module:base/logger"],"longname":"module:mixins/signalable","___id":"T000004R000010","___s":true,"attribs":"","id":"mixins/signalable","ancestors":[],"modules":[{"comment":"/**\r\n * @fileOverview Add the ability to fire signals on your objects. Signals are events, but hard coded into the object\r\n * and don't rely on strings like other events and `eventables`\r\n * @module mixins/signalable\r\n * @requires base\r\n * @requires signals\r\n * @requires base/logger\r\n */","meta":{"filename":"signalable.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\mixins","code":{},"shortpath":"mixins/signalable.js"},"name":"mixins/signalable","kind":"module","description":"<p>Add the ability to fire signals on your objects. Signals are events, but hard coded into the object<br>and don't rely on strings like other events and <code>eventables</code></p>","preserveName":true,"requires":["module:base","module:signals","module:base/logger"],"longname":"module:mixins/signalable","___id":"T000002R000546","___s":true,"attribs":"","id":"mixins/signalable","ancestors":[]}]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        \r\n            \r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n            <div class=\"description\"><p>Add the ability to fire signals on your objects. Signals are events, but hard coded into the object<br>and don't rely on strings like other events and <code>eventables</code></p></div>\r\n        \r\n\r\n        \r\n            \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_signalable.js.html\">mixins/signalable.js</a>, <a href=\"mixins_signalable.js.html#line2\">line 2</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Requires</h3>\r\n\r\n        <ul>\r\n            <li><a href=\"module-base.html\">module:base</a></li>\r\n        \r\n            <li>module:signals</li>\r\n        \r\n            <li>module:base/logger</li>\r\n        </ul>\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Classes</h3>\r\n\r\n        <dl>\r\n            <dt><a href=\"module-mixins_signalable-Signal.html\">Signal</a></dt>\r\n            <dd></dd>\r\n        </dl>\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Type Definitions</h3>\r\n\r\n        \r\n                \r\n<h4 class=\"name\" id=\".SignalOptions\">SignalOptions</h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_signalable.js.html\">mixins/signalable.js</a>, <a href=\"mixins_signalable.js.html#line16\">line 16</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n    <h5 class=\"subsection-title\">Properties:</h5>\r\n\r\n    \r\n\r\n<table class=\"props\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>memorize</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>If Signal should keep record of previously dispatched parameters and automatically execute listener. Defaults to <code>false</code></p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>params</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">array</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>Default parameters passed to listener during <code>Signal.raise</code>/<code>Signal.fire</code>/<code>Signal.trigger</code> and SignalBinding.execute. (curried parameters). Defaults to <code>null</code></p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>context</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n                    &lt;optional><br>\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>When provided the signal will be raised in the context of this object. Defaults to <code>this</code> - the signal host</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Example</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>signals:{\r     opened: null,\r     twisted: { memorize:true },\r     applied: { memorize: false, params:[one, two] }\r }\r\r // Setting the context initially can be a hassle, so this also supports a function that returns a hash\r\r signals: function(){\r     return {\r     opened: null,\r     twisted: { memorize:true },\r     applied: { memorize: false, params:[one, two] },\r     reversed: {context: someOtherRuntimeObject}\r     };\r }</code></pre>\r\n\r\n\r\n\r\n            \r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Class","title":"Signal","docs":[{"comment":"/**\r\n * @classDesc A signal that can be raised on an object. When you deploy the `Signalable` mixin, it\r\n * creates instances of these for you.\r\n *\r\n * @constructor\r\n * @param {?object} host If hosted, you can identify the host here.\r\n * @param {?string} name The name of the signal\r\n * @type module:mixins/signalable.SignalOptions\r\n */","meta":{"range":[1882,4992],"filename":"signalable.js","lineno":53,"columnno":4,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\mixins","code":{"id":"astnode100005146","name":"Signal","type":"CallExpression","value":""},"shortpath":"mixins/signalable.js"},"classdesc":"<p>A signal that can be raised on an object. When you deploy the <code>Signalable</code> mixin, it<br>creates instances of these for you.</p>","kind":"class","params":[{"type":{"names":["object"]},"nullable":true,"description":"<p>If hosted, you can identify the host here.</p>","name":"host"},{"type":{"names":["string"]},"nullable":true,"description":"<p>The name of the signal</p>","name":"name"}],"type":{"names":["module:mixins/signalable.SignalOptions"]},"name":"Signal","longname":"module:mixins/signalable~Signal","scope":"inner","memberof":"module:mixins/signalable","___id":"T000003R000010","___s":true,"attribs":"<span class=\"type-signature\"></span>","id":"Signal","signature":"<span class=\"signature\">(host<span class=\"signature-attributes\">nullable</span>, name<span class=\"signature-attributes\">nullable</span>)</span><span class=\"type-signature\"></span>","ancestors":["<a href=\"module-mixins_signalable.html\">mixins/signalable</a>~"]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        <h2>\r\n            <span class=\"ancestors\"><a href=\"module-mixins_signalable.html\">mixins/signalable</a>~</span>\r\n        \r\n        Signal\r\n        </h2>\r\n        \r\n            <div class=\"class-description\"><p>A signal that can be raised on an object. When you deploy the <code>Signalable</code> mixin, it<br>creates instances of these for you.</p></div>\r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n\r\n    \r\n    <h2>Constructor</h2>\r\n    \r\n\r\n    <h4 class=\"name\" id=\"Signal\"><span class=\"type-signature\"></span>new Signal<span class=\"signature\">(host<span class=\"signature-attributes\">nullable</span>, name<span class=\"signature-attributes\">nullable</span>)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_signalable.js.html\">mixins/signalable.js</a>, <a href=\"mixins_signalable.js.html#line53\">line 53</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>host</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n                    &lt;nullable><br>\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>If hosted, you can identify the host here.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>name</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n                    &lt;nullable><br>\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The name of the signal</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Methods</h3>\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"has\"><span class=\"type-signature\"></span>has<span class=\"signature\">(listener, listenerContext<span class=\"signature-attributes\">nullable</span>)</span><span class=\"type-signature\"> &rarr; {boolean}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_signalable.js.html\">mixins/signalable.js</a>, <a href=\"mixins_signalable.js.html#line130\">line 130</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Check if listener was attached to Signal.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>listener</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The function to check</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>listenerContext</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n                    &lt;nullable><br>\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The context that was bound</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">boolean</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"off\"><span class=\"type-signature\"></span>off<span class=\"signature\">(listener, listenerContext<span class=\"signature-attributes\">nullable</span>)</span><span class=\"type-signature\"> &rarr; {function}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_signalable.js.html\">mixins/signalable.js</a>, <a href=\"mixins_signalable.js.html#line120\">line 120</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Unbinds a listener to a signal.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>listener</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The function to unbind</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>listenerContext</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n                    &lt;nullable><br>\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The context that was bound</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"on\"><span class=\"type-signature\"></span>on<span class=\"signature\">(listener, listenerContext<span class=\"signature-attributes\">nullable</span>, priority<span class=\"signature-attributes\">nullable</span>)</span><span class=\"type-signature\"> &rarr; {SignalBinding}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_signalable.js.html\">mixins/signalable.js</a>, <a href=\"mixins_signalable.js.html#line83\">line 83</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Ties a listener to a signal.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>listener</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The function to call when the signal is raised</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>listenerContext</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n                    &lt;nullable><br>\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A context to set for the listener. The event host may set a default for this value, but you may override that here.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>priority</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">number</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n                    &lt;nullable><br>\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A priority for the listener.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">SignalBinding</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"once\"><span class=\"type-signature\"></span>once<span class=\"signature\">(listener, listenerContext<span class=\"signature-attributes\">nullable</span>, priority<span class=\"signature-attributes\">nullable</span>)</span><span class=\"type-signature\"> &rarr; {SignalBinding}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_signalable.js.html\">mixins/signalable.js</a>, <a href=\"mixins_signalable.js.html#line102\">line 102</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Ties a listener to for a signal for one execution.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>listener</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">function</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The function to call when the signal is raised</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>listenerContext</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">object</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n                    &lt;nullable><br>\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A context to set for the listener. The event host may set a default for this value, but you may override that here.</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>priority</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">number</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n                    &lt;nullable><br>\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A priority for the listener.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">SignalBinding</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"toString\"><span class=\"type-signature\"></span>toString<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"mixins_signalable.js.html\">mixins/signalable.js</a>, <a href=\"mixins_signalable.js.html#line137\">line 137</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Strings!</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Module","title":"strings/format","docs":[{"comment":"/**\r\n * @fileOverview String helper methods\r\n *\r\n * @module strings/format\r\n */","meta":{"filename":"format.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\strings","code":{},"shortpath":"strings/format.js"},"name":"strings/format","kind":"module","description":"<p>String helper methods</p>","preserveName":true,"longname":"module:strings/format","___id":"T000004R000011","___s":true,"attribs":"","id":"strings/format","ancestors":[],"modules":[{"comment":"/**\r\n * @fileOverview String helper methods\r\n *\r\n * @module strings/format\r\n */","meta":{"filename":"format.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\strings","code":{},"shortpath":"strings/format.js"},"name":"strings/format","kind":"module","description":"<p>String helper methods</p>","preserveName":true,"longname":"module:strings/format","___id":"T000002R000604","___s":true,"attribs":"","id":"strings/format","ancestors":[]},{"comment":"/**\r\n * Format a string quickly and easily using .net style format strings\r\n * @param {string} format A string format like \"Hello {0}, now take off your {1}!\"\r\n * @param {...?} args One argument per `{}` in the string, positionally replaced\r\n * @returns {string}\r\n *\r\n * @example\r\n * var strings = require(\"papyrus/strings\");\r\n * var s = strings.format(\"Hello {0}\", \"Madame Vastra\");\r\n * // s = \"Hello Madame Vastra\"\r\n *\r\n * @example {@lang xml}\r\n * <span>\r\n *      <%= strings.format(\"Hello {0}\", \"Madame Vastra\") %>\r\n * </span>\r\n */","meta":{"range":[634,887],"filename":"format.js","lineno":24,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\strings","code":{"id":"astnode100005693","name":"module.exports","type":"FunctionExpression","paramnames":["format"]},"vars":{"args":"module:strings/format~args","":null},"shortpath":"strings/format.js"},"description":"<p>Format a string quickly and easily using .net style format strings</p>","params":[{"type":{"names":["string"]},"description":"<p>A string format like &quot;Hello {0}, now take off your {1}!&quot;</p>","name":"format"},{"type":{"names":["?"]},"variable":true,"description":"<p>One argument per <code>{}</code> in the string, positionally replaced</p>","name":"args"}],"returns":[{"type":{"names":["string"]}}],"examples":[{"caption":"","code":"var strings = require(\"papyrus/strings\");\rvar s = strings.format(\"Hello {0}\", \"Madame Vastra\");\r// s = \"Hello Madame Vastra\""},{"caption":"","code":"{@lang xml}\r<span>\r     <%= strings.format(\"Hello {0}\", \"Madame Vastra\") %>\r</span>"}],"name":"(require(\"strings/format\"))","longname":"module:strings/format","kind":"function","___id":"T000002R000605","___s":true,"attribs":"<span class=\"type-signature\"></span>","id":"module:strings/format","signature":"<span class=\"signature\">(format, &hellip;args)</span><span class=\"type-signature\"> &rarr; {string}</span>","ancestors":[]}]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        \r\n            \r\n        \r\n            \r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n            <div class=\"description\"><p>String helper methods</p></div>\r\n        \r\n\r\n        \r\n            \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"strings_format.js.html\">strings/format.js</a>, <a href=\"strings_format.js.html#line2\">line 2</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"module:strings/format\"><span class=\"type-signature\"></span>(require(\"strings/format\"))<span class=\"signature\">(format, &hellip;args)</span><span class=\"type-signature\"> &rarr; {string}</span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"strings_format.js.html\">strings/format.js</a>, <a href=\"strings_format.js.html#line24\">line 24</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Format a string quickly and easily using .net style format strings</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Examples</h5>\r\n    \r\n    <pre class=\"prettyprint\"><code>var strings = require(\"papyrus/strings\");\rvar s = strings.format(\"Hello {0}\", \"Madame Vastra\");\r// s = \"Hello Madame Vastra\"</code></pre>\r\n\r\n    <pre class=\"prettyprint\"><code>{@lang xml}\r&lt;span>\r     &lt;%= strings.format(\"Hello {0}\", \"Madame Vastra\") %>\r&lt;/span></code></pre>\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n        <th>Attributes</th>\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>format</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>A string format like &quot;Hello {0}, now take off your {1}!&quot;</p></td>\r\n        </tr>\r\n\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>args</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">?</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n                <td class=\"attributes\">\r\n                \r\n\r\n                \r\n\r\n                \r\n                    &lt;repeatable><br>\r\n                \r\n                </td>\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>One argument per <code>{}</code> in the string, positionally replaced</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h5>Returns:</h5>\r\n\r\n        \r\n\r\n\r\n<dl class=\"param-type\">\r\n    <dt>\r\n        Type\r\n    </dt>\r\n    <dd>\r\n        \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n    </dd>\r\n</dl>\r\n\r\n    \r\n\r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Module","title":"utils/logger","docs":[{"comment":"/**\r\n * @fileOverview The logging system for papyrus is based on [http://pimterry.github.io/loglevel/](loglevel) and slightly decorated\r\n * @module utils/logger\r\n * @requires dcl\r\n * @requires loglevel\r\n */","meta":{"filename":"logger.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\utils","code":{},"shortpath":"utils/logger.js"},"name":"utils/logger","kind":"module","description":"<p>The logging system for papyrus is based on <a href=\"loglevel\">http://pimterry.github.io/loglevel/</a> and slightly decorated</p>","preserveName":true,"requires":["module:dcl","module:loglevel"],"longname":"module:utils/logger","___id":"T000004R000012","___s":true,"attribs":"","id":"utils/logger","ancestors":[],"modules":[{"comment":"/**\r\n * @fileOverview The logging system for papyrus is based on [http://pimterry.github.io/loglevel/](loglevel) and slightly decorated\r\n * @module utils/logger\r\n * @requires dcl\r\n * @requires loglevel\r\n */","meta":{"filename":"logger.js","lineno":2,"columnno":0,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\utils","code":{},"shortpath":"utils/logger.js"},"name":"utils/logger","kind":"module","description":"<p>The logging system for papyrus is based on <a href=\"loglevel\">http://pimterry.github.io/loglevel/</a> and slightly decorated</p>","preserveName":true,"requires":["module:dcl","module:loglevel"],"longname":"module:utils/logger","___id":"T000002R000607","___s":true,"attribs":"","id":"utils/logger","ancestors":[]}]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        \r\n            \r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n            <div class=\"description\"><p>The logging system for papyrus is based on <a href=\"loglevel\">http://pimterry.github.io/loglevel/</a> and slightly decorated</p></div>\r\n        \r\n\r\n        \r\n            \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"utils_logger.js.html\">utils/logger.js</a>, <a href=\"utils_logger.js.html#line2\">line 2</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Requires</h3>\r\n\r\n        <ul>\r\n            <li>module:dcl</li>\r\n        \r\n            <li>module:loglevel</li>\r\n        </ul>\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Members</h3>\r\n\r\n        \r\n            \r\n<h4 class=\"name\" id=\".utils/logger\"><span class=\"type-signature\">(static) </span>utils/logger<span class=\"type-signature\"> :<a href=\"utils_logger.Logger.html\">utils/logger.Logger</a></span></h4>\r\n\r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"utils_logger.js.html\">utils/logger.js</a>, <a href=\"utils_logger.js.html#line83\">line 83</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>The system global, cross-platform logger</p>\r\n</div>\r\n\r\n\r\n\r\n    <h5>Type:</h5>\r\n    <ul>\r\n        <li>\r\n            \r\n<span class=\"param-type\"><a href=\"utils_logger.Logger.html\">utils/logger.Logger</a></span>\r\n\r\n\r\n        </li>\r\n    </ul>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}{"type":"Class","title":"Logger","docs":[{"comment":"/**\r\n * A logger class that you can mix into your classes to handle logging settings and state at an object level.\r\n * See {@link utils/logger} for the members of this class\r\n *\r\n * @exports utils/logger.Logger\r\n * @class\r\n * @see utils/logger\r\n */","meta":{"range":[544,1827],"filename":"logger.js","lineno":20,"columnno":4,"path":"G:\\Program\\Github\\my\\docdash-with-search\\fixtures\\utils","code":{"id":"astnode100005752","name":"Logger","type":"CallExpression","value":""},"shortpath":"utils/logger.js"},"description":"<p>A logger class that you can mix into your classes to handle logging settings and state at an object level.<br>See {@link utils/logger} for the members of this class</p>","alias":"utils/logger.Logger","kind":"class","see":["utils/logger"],"name":"Logger","longname":"utils/logger.Logger","memberof":"utils/logger","scope":"static","params":[],"___id":"T000003R000011","___s":true,"attribs":"<span class=\"type-signature\"></span>","id":"Logger","signature":"<span class=\"signature\">()</span><span class=\"type-signature\"></span>","ancestors":[]}],"content":"\r\n\r\n\r\n\r\n\r\n<section>\r\n\r\n<header>\r\n    \r\n        <h2>\r\n        Logger\r\n        </h2>\r\n        \r\n    \r\n</header>\r\n\r\n<article>\r\n    <div class=\"container-overview\">\r\n    \r\n        \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"Logger\"><span class=\"type-signature\"></span>new Logger<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"utils_logger.js.html\">utils/logger.js</a>, <a href=\"utils_logger.js.html#line20\">line 20</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    <dt class=\"tag-see\">See:</dt>\r\n    <dd class=\"tag-see\">\r\n        <ul>\r\n            <li>utils/logger</li>\r\n        </ul>\r\n    </dd>\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>A logger class that you can mix into your classes to handle logging settings and state at an object level.<br>See {@link utils/logger} for the members of this class</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    </div>\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n        <h3 class=\"subsection-title\">Methods</h3>\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"all\"><span class=\"type-signature\"></span>all<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"utils_logger.js.html\">utils/logger.js</a>, <a href=\"utils_logger.js.html#line35\">line 35</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Turns on all logging levels</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"debug\"><span class=\"type-signature\"></span>debug<span class=\"signature\">(The)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"utils_logger.js.html\">utils/logger.js</a>, <a href=\"utils_logger.js.html#line61\">line 61</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Log a <code>debug</code> call</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>The</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>value to log</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"error\"><span class=\"type-signature\"></span>error<span class=\"signature\">(The)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"utils_logger.js.html\">utils/logger.js</a>, <a href=\"utils_logger.js.html#line79\">line 79</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Log a <code>error</code> call</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>The</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>value to log</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"info\"><span class=\"type-signature\"></span>info<span class=\"signature\">(The)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"utils_logger.js.html\">utils/logger.js</a>, <a href=\"utils_logger.js.html#line67\">line 67</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Log a <code>info</code> call</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>The</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>value to log</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"level\"><span class=\"type-signature\"></span>level<span class=\"signature\">(lvl)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"utils_logger.js.html\">utils/logger.js</a>, <a href=\"utils_logger.js.html#line43\">line 43</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Sets the logging level to one of <code>trace</code>, <code>debug</code>, <code>info</code>, <code>warn</code>, <code>error</code>.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>lvl</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>The level to set it to. Can be  one of <code>trace</code>, <code>debug</code>, <code>info</code>, <code>warn</code>, <code>error</code>.</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"silent\"><span class=\"type-signature\"></span>silent<span class=\"signature\">()</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"utils_logger.js.html\">utils/logger.js</a>, <a href=\"utils_logger.js.html#line28\">line 28</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Turn off all logging. If you log something, it will not error, but will not do anything either<br>and the cycles are minimal.</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"trace\"><span class=\"type-signature\"></span>trace<span class=\"signature\">(The)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"utils_logger.js.html\">utils/logger.js</a>, <a href=\"utils_logger.js.html#line55\">line 55</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Log a <code>trace</code> call</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>The</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>value to log</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n            \r\n\r\n    \r\n\r\n    <h4 class=\"name\" id=\"warn\"><span class=\"type-signature\"></span>warn<span class=\"signature\">(The)</span><span class=\"type-signature\"></span></h4>\r\n\r\n    \r\n\r\n\r\n\r\n\r\n<dl class=\"details\">\r\n\r\n    \r\n    <dt class=\"tag-source\">Source:</dt>\r\n    <dd class=\"tag-source\"><ul class=\"dummy\"><li>\r\n        <a href=\"utils_logger.js.html\">utils/logger.js</a>, <a href=\"utils_logger.js.html#line73\">line 73</a>\r\n    </li></ul></dd>\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n</dl>\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"description\">\r\n    <p>Log a <code>warn</code> call</p>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <h5>Parameters:</h5>\r\n    \r\n\r\n<table class=\"params\">\r\n    <thead>\r\n    <tr>\r\n        \r\n        <th>Name</th>\r\n        \r\n\r\n        <th>Type</th>\r\n\r\n        \r\n\r\n        \r\n\r\n        <th class=\"last\">Description</th>\r\n    </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n    \r\n\r\n        <tr>\r\n            \r\n                <td class=\"name\"><code>The</code></td>\r\n            \r\n\r\n            <td class=\"type\">\r\n            \r\n                \r\n<span class=\"param-type\">string</span>\r\n\r\n\r\n            \r\n            </td>\r\n\r\n            \r\n\r\n            \r\n\r\n            <td class=\"description last\"><p>value to log</p></td>\r\n        </tr>\r\n\r\n    \r\n    </tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    \r\n\r\n    \r\n</article>\r\n\r\n</section>\r\n\r\n\r\n\r\n"}