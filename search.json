[{"comment":"/**\n * @classdesc The base of all classes in the system, this is one of the few pure \"classes\" in core the of the system. It is a\n * pretty clean little class whose primary purpose is to surface the composition chains and a basis for storing\n * options on mixin and subclass instances. Options are handled at the instance rather than the prototype level\n * so that multiple instances don't compete for default values.\n *\n * @exports base\n * @constructor\n * @extends base/chains\n */","name":"base","alias":"base","kind":"class","longname":"base","scope":"global","id":"base","path":"base.html","ancestors":[]},{"comment":"/**\n\t * Add a default option to a class. The default options are only set if there is not already a\n\t * value for the option.\n\t * @param {hash} options A hash of options you want to set\n\t * @see {base#addOptions}\n\t */","name":"addDefaultOptions","kind":"function","longname":"base#addDefaultOptions","scope":"instance","id":"addDefaultOptions","path":"base.html#addDefaultOptions","ancestors":["<a href=\"base.html\">base</a>#"]},{"comment":"/**\n\t * Add an option to a class. If any members of the hash already exist in `this.options`, they will be overwritten.\n\t * @param {hash} options A hash of options you want to set\n\t * @see {base#addDefaultOptions}\n\t */","name":"addOptions","kind":"function","longname":"base#addOptions","scope":"instance","id":"addOptions","path":"base.html#addOptions","ancestors":["<a href=\"base.html\">base</a>#"]},{"comment":"/**\n * The `close` method asks an object to shut itself down in a way that will allow it to be reopened, unlike the\n * [end method]{@link base/chains#end} which will call the destroy method which should make the object unusable, but also\n * devoid of all resources whereas `close` may still keep some resources open.\n *\n * | Heading 1 | Heading 2 | Heading 3       |\n * |-----------|-----------|-----------------|\n * | Bar       | Food      | This is a table |\n *\n * This uses the `before` chain which means the last one defined in the first one destroyed\n * @memberOf base/chains#\n * @name close\n * @see base/chains#open\n */","name":"close","kind":"member","longname":"base#close","scope":"instance","id":"close","path":"base.html#close","ancestors":["<a href=\"base.html\">base</a>#"]},{"comment":"/**\n\t * Called when it is time to get rid of all of your instance level references and objects and events. You can\n\t * define this method on your own classes without having to call the superclass instance. It is called by\n\t * `instance.end()` automatically\n\t * @see {base/chains#end}\n\t * @see {base/chains#destroy}\n\t */","name":"destroy","kind":"function","longname":"base#destroy","scope":"instance","id":"destroy","path":"base.html#destroy","ancestors":["<a href=\"base.html\">base</a>#"]},{"comment":"/**\n\t * Call this to close your object and dispose of all maintained resources. You can define this method on your\n\t * own classes without having to call the superclass instance, however it is reccomended that you put\n\t * all disposal code in `destroy()`. You must be disciplined about calling this on your instances.\n\t * @see {base/chains#end}\n\t * @see {base/chains#destroy}\n\t */","name":"end","kind":"function","longname":"base#end","scope":"instance","id":"end","path":"base.html#end","ancestors":["<a href=\"base.html\">base</a>#"]},{"comment":"/**\n * If you are using the open/close paradigm for an object that can kind of go dormant on {@link base/chains#close} and can be \"reopened\"\n * again later, here is where the \"open\" code will go.\n *\n * This used the `after` chain which means that the first one defined is the first one destroyed.\n *\n * @memberOf base/chains#\n * @name open\n * @see base/chains#close\n */","name":"open","kind":"member","longname":"base#open","scope":"instance","id":"open","path":"base.html#open","ancestors":["<a href=\"base.html\">base</a>#"]},{"comment":"/**\n * @classDesc Chains define the primary composition elements (functions) that determine the order of execution.\n * @exports base/chains\n * @constructor\n */","name":"base/chains","alias":"base/chains","kind":"class","longname":"base/chains","scope":"global","id":"base/chains","path":"base_chains.html","ancestors":[]},{"comment":"/**\n * The `close` method asks an object to shut itself down in a way that will allow it to be reopened, unlike the\n * [end method]{@link base/chains#end} which will call the destroy method which should make the object unusable, but also\n * devoid of all resources whereas `close` may still keep some resources open.\n *\n * | Heading 1 | Heading 2 | Heading 3       |\n * |-----------|-----------|-----------------|\n * | Bar       | Food      | This is a table |\n *\n * This uses the `before` chain which means the last one defined in the first one destroyed\n * @memberOf base/chains#\n * @name close\n * @see base/chains#open\n */","name":"close","kind":"member","longname":"base/chains#close","scope":"instance","id":"close","path":"base_chains.html#close","ancestors":["<a href=\"base_chains.html\">base/chains</a>#"]},{"comment":"/**\n * The `end` method will call the destroy method which should make the object unusable and\n * devoid of all resources, unlike the\n * [close method]{@link base/chains#close} asks an object to shut itself down in a way that will allow it to be reopened.\n *\n * This uses the `before` chain which means the last one defined in the first one destroyed\n * @memberOf base/chains#\n * @name end\n *\n * @example  <caption>Add *this* to your application.properties.</caption>\n * {@lang bash}\n * foo=bar\n *\n */","name":"end","kind":"member","longname":"base/chains#end","scope":"instance","id":"end","path":"base_chains.html#end","ancestors":["<a href=\"base_chains.html\">base/chains</a>#"]},{"comment":"/**\n * If you are using the open/close paradigm for an object that can kind of go dormant on {@link base/chains#close} and can be \"reopened\"\n * again later, here is where the \"open\" code will go.\n *\n * This used the `after` chain which means that the first one defined is the first one destroyed.\n *\n * @memberOf base/chains#\n * @name open\n * @see base/chains#close\n */","name":"open","kind":"member","longname":"base/chains#open","scope":"instance","id":"open","path":"base_chains.html#open","ancestors":["<a href=\"base_chains.html\">base/chains</a>#"]},{"comment":"/**\n * A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like\n * that, it is a pure, in memory data container\n * @exports documents/model\n * @constructor\n * @borrows module:documents/probe.get as get\n * @borrows module:documents/probe.set as set\n * @borrows module:documents/probe.any as any\n * @borrows module:documents/probe.all as all\n * @borrows module:documents/probe.remove as remove\n * @borrows module:documents/probe.seekKey as seekKey\n * @borrows module:documents/probe.seek as seek\n * @borrows module:documents/probe.findOne as findOne\n * @borrows module:documents/probe.findOneKey as findOneKey\n * @borrows module:documents/probe.findKeys as findKeys\n * @borrows module:documents/probe.find as find\n * @borrows module:documents/probe.update as update\n * @borrows module:documents/probe.some as some\n * @borrows module:documents/probe.every as every\n */","name":"documents/model","alias":"documents/model","kind":"class","longname":"documents/model","scope":"global","id":"documents/model","path":"documents_model.html","ancestors":[]},{"comment":"/**\n Returns true if all items match the query\n\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @returns {boolean}\n **/","name":"all","kind":"function","longname":"documents/model.all","scope":"static","id":".all","path":"documents_model.html#.all","ancestors":["<a href=\"documents_model.html\">documents/model</a>."]},{"comment":"/**\n Returns true if any of the items match the query\n\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @returns {boolean}\n **/","name":"any","kind":"function","longname":"documents/model.any","scope":"static","id":".any","path":"documents_model.html#.any","ancestors":["<a href=\"documents_model.html\">documents/model</a>."]},{"comment":"/**\n Returns true if all items match the query. Aliases as `all`\n @function\n @param {array|object} obj The object to query\n @param {object} qu The query to execute\n @returns {boolean}\n */","name":"every","kind":"function","longname":"documents/model.every","scope":"static","id":".every","path":"documents_model.html#.every","ancestors":["<a href=\"documents_model.html\">documents/model</a>."]},{"comment":"/**\n Find all records that match a query\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @returns {array} The results\n **/","name":"find","kind":"function","longname":"documents/model.find","scope":"static","id":".find","path":"documents_model.html#.find","ancestors":["<a href=\"documents_model.html\">documents/model</a>."]},{"comment":"/**\n Find all records that match a query and returns the keys for those items. This is similar to {@link module:documents/probe.find} but instead of returning\n records, returns the keys. If `obj` is an object it will return the hash key. If 'obj' is an array, it will return the index\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @returns {array}\n */","name":"findKeys","kind":"function","longname":"documents/model.findKeys","scope":"static","id":".findKeys","path":"documents_model.html#.findKeys","ancestors":["<a href=\"documents_model.html\">documents/model</a>."]},{"comment":"/**\n Returns the first record that matches the query. Aliased as `seek`.\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @returns {object}\n */","name":"findOne","kind":"function","longname":"documents/model.findOne","scope":"static","id":".findOne","path":"documents_model.html#.findOne","ancestors":["<a href=\"documents_model.html\">documents/model</a>."]},{"comment":"/**\n Returns the first record that matches the query and returns its key or index depending on whether `obj` is an object or array respectively.\n Aliased as `seekKey`.\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @returns {object}\n */","name":"findOneKey","kind":"function","longname":"documents/model.findOneKey","scope":"static","id":".findOneKey","path":"documents_model.html#.findOneKey","ancestors":["<a href=\"documents_model.html\">documents/model</a>."]},{"comment":"/**\n Reaches into an object and allows you to get at a value deeply nested in an object. This is not a query, but a\n straight reach in, useful for event bindings\n\n @param {array} path The split path of the element to work with\n @param {object} record The record to reach into\n @return {*} Whatever was found in the record\n **/","name":"get","kind":"function","longname":"documents/model.get","scope":"static","id":".get","path":"documents_model.html#.get","ancestors":["<a href=\"documents_model.html\">documents/model</a>."]},{"comment":"/**\n Remove all items in the object/array that match the query\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @return {object|array} The array or object as appropriate without the records.\n **/","name":"remove","kind":"function","longname":"documents/model.remove","scope":"static","id":".remove","path":"documents_model.html#.remove","ancestors":["<a href=\"documents_model.html\">documents/model</a>."]},{"comment":"/**\n This will write the value into a record at the path, creating intervening objects if they don't exist. This does not work as filtered\n update and is meant to be used on a single record. It is a nice way of setting a property at an arbitrary depth at will.\n\n @param {array} path The split path of the element to work with\n @param {object} record The record to reach into\n @param {string} setter The set operation.  See {@link module:documents/probe.updateOperators} for the operators you can use.\n @param {object} newValue The value to write to the, or if the operator is $pull, the query of items to look for\n */","name":"set","kind":"function","longname":"documents/model.set","scope":"static","id":".set","path":"documents_model.html#.set","ancestors":["<a href=\"documents_model.html\">documents/model</a>."]},{"comment":"/**\n Returns true if any of the items match the query. Aliases as `any`\n @function\n @param {array|object} obj The object to query\n @param {object} qu The query to execute\n @returns {boolean}\n */","name":"some","kind":"function","longname":"documents/model.some","scope":"static","id":".some","path":"documents_model.html#.some","ancestors":["<a href=\"documents_model.html\">documents/model</a>."]},{"comment":"/**\n Updates all records in obj that match the query. See {@link module:documents/probe.updateOperators} for the operators that are supported.\n @param {object|array} obj The object to update\n @param {object} qu The query which will be used to identify the records to updated\n @param {object} setDocument The update operator. See {@link module:documents/probe.updateOperators}\n */","name":"update","kind":"function","longname":"documents/model.update","scope":"static","id":".update","path":"documents_model.html#.update","ancestors":["<a href=\"documents_model.html\">documents/model</a>."]},{"comment":"/**\n\t\t * Returns true if this instance is empty\n\t\t * @type {boolean}\n\t\t * @name isEmpty\n\t\t * @memberOf  documents/model#\n\t\t */","name":"isEmpty","kind":"member","longname":"documents/model#isEmpty","scope":"instance","id":"isEmpty","path":"documents_model.html#isEmpty","ancestors":["<a href=\"documents_model.html\">documents/model</a>#"]},{"comment":"/**\n\t\t * If {@link documents/model#_idField} is filled in and it's value is empty this will be true.\n\t\t * @type {boolean}\n\t\t * @name isNew\n\t\t * @memberOf  documents/model#\n\t\t */","name":"isNew","kind":"member","longname":"documents/model#isNew","scope":"instance","id":"isNew","path":"documents_model.html#isNew","ancestors":["<a href=\"documents_model.html\">documents/model</a>#"]},{"comment":"/**\n * The validator mixin provides access to the features of the JSON validation system\n * @exports documents/schema\n * @mixin\n */","name":"documents/schema","alias":"documents/schema","kind":"mixin","longname":"documents/schema","scope":"global","id":"documents/schema","path":"documents_schema.html","ancestors":[]},{"comment":"/**\n\t\t * The default name of the scheman when you use anonymous schemas. You can define this at the prototype for classified\n\t\t * schemas. The can also\n\t\t *\n\t\t * @type {string|function():{string}}\n\t\t * @memberOf documents/schema#\n\t\t * @name _defaultSchemaName\n\t\t */","name":"_defaultSchemaName","kind":"member","longname":"documents/schema#_defaultSchemaName","scope":"instance","id":"_defaultSchemaName","path":"documents_schema.html#_defaultSchemaName","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n\t\t * It is possible to add support for custom checks (i.e., minItems, maxItems, minLength, maxLength, etc.) through the addCheck function\n\t\t * @memberOf documents/schema#\n\t\t * @name addCheck\n\t\t * @method\n\t\t * @param {string} name The name of the check\n\t\t * @param {function(...object)} formatter Perform the check\n\t\t * @param {object} formatter.value The value to check followed by any parameters from the schema\n\t\t * @returns {boolean}\n\t\t */","name":"addCheck","kind":"function","longname":"documents/schema#addCheck","scope":"instance","id":"addCheck","path":"documents_schema.html#addCheck","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n\t\t * It is also possible to add support for additional string formats through the addFormat function.\n\t\t * @memberOf documents/schema#\n\t\t * @name addFormat\n\t\t * @method\n\t\t * @param {string} name The name of the formatter\n\t\t * @param {function(object)} formatter How to format it\n\t\t * @param {object} formatter.value The value to format\n\t\t * @returns {boolean}\n\t\t */","name":"addFormat","kind":"function","longname":"documents/schema#addFormat","scope":"instance","id":"addFormat","path":"documents_schema.html#addFormat","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n\t\t * Create a type to be used in your schemas to define new validators\n\t\t * @memberOf documents/schema#\n\t\t * @name addType\n\t\t * @method\n\t\t * @param {string} name The name of the type\n\t\t * @param {function(object)} operation What to do with the type.\n\t\t * @param {object} operation.value The value to validation\n\t\t * @returns {boolean}\n\t\t */","name":"addType","kind":"function","longname":"documents/schema#addType","scope":"instance","id":"addType","path":"documents_schema.html#addType","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n\t\t * Custom coercion rules\n\t\t *\n\t\t * @memberOf documents/schema#\n\t\t * @name addTypeCoercion\n\t\t * @method\n\t\t * @param {string} name The name of the coercion\n\t\t * @param {function(object)} coercer Perform the coercion\n\t\t * @param {object} coercer.value The value to coerce\n\t\t * @returns {boolean}\n\t\t */","name":"addTypeCoercion","kind":"function","longname":"documents/schema#addTypeCoercion","scope":"instance","id":"addTypeCoercion","path":"documents_schema.html#addTypeCoercion","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n\t * Builds a default document based on the schema. What this does is create a document from schema and for each property\n\t * that has a default value or is required, the resultant object will contain that property. It is useful for extending\n\t * values from some source that may be incomplete, like options or some such.\n\t * @param {json-schema} schema A schema to use to create the default document\n\t * @returns {object?}\n\t * @name defaultDoc\n\t * @memberOf documents/schema#\n\t * @method\n\t */","name":"defaultDoc","kind":"function","longname":"documents/schema#defaultDoc","scope":"instance","id":"defaultDoc","path":"documents_schema.html#defaultDoc","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n\t * This method will create a new object that contains only the fields and no methods or other artifacts. This is useful\n\t * for creating objects to pass over the wire or save in a table. This is not deeply copied, so changes made to the\n\t * extracted object will be represented in this class for reference objects.\n\t *\n\t * @param {string=} schema The schema name to use\n\t * @param {object=} src The object to extract fields from\n\t * @return {object} Data-only version of the class instance.\n\t */","name":"extract","kind":"function","longname":"documents/schema#extract","scope":"instance","id":"extract","path":"documents_schema.html#extract","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n\t\t * Extracts only the elements of the object that are defined in the schema\n\t\t * @memberOf documents/schema#\n\t\t * @name extract\n\t\t * @param {object=} record The record to extract from\n\t\t * @param {string=} schema The name of the schema to attach\n\t\t * @method\n\t\t */","name":"extract","kind":"function","longname":"documents/schema#extract","scope":"instance","id":"extract","path":"documents_schema.html#extract","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n\t\t * Get a registered schema by name\n\t\t * @param {string=} schemaName\n\t\t * @returns {object?}\n\t\t * @memberOf documents/schema#\n\t\t * @name getSchema\n\t\t * @method\n\t\t */","name":"getSchema","kind":"function","longname":"documents/schema#getSchema","scope":"instance","id":"getSchema","path":"documents_schema.html#getSchema","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n\t\t * Initialize the schema collection by registering the with the handler. You can call this at any time and as often as you like. It will be called once\n\t\t * by the constructor on any instance schemas\n\t\t * @method\n\t\t * @name registerSchemas\n\t\t * @memberOf documents/schema#\n\t\t * @param {hash} schemas A hash of schemas where the key is the name of the schema\n\t\t */","name":"registerSchemas","kind":"function","longname":"documents/schema#registerSchemas","scope":"instance","id":"registerSchemas","path":"documents_schema.html#registerSchemas","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n\t\t * The schema that defines the validation rules. This should probably be defined at the prototype for each\n\t\t * object or model classification. It can be an anonymous schema defined right here, or this can be\n\t\t * registered schema names to use, or just a single name\n\t\t *\n\t\t * @type {object}\n\t\t * @memberOf documents/schema#\n\t\t * @name schema\n\t\t */","name":"schema","kind":"member","longname":"documents/schema#schema","scope":"instance","id":"schema","path":"documents_schema.html#schema","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n\t\t * If you want to register multiple schemas, use this property instead\n\t\t *\n\t\t * @type {object}\n\t\t * @memberOf documents/schema#\n\t\t * @name schemas\n\t\t */","name":"schemas","kind":"member","longname":"documents/schema#schemas","scope":"instance","id":"schemas","path":"documents_schema.html#schemas","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n\t\t * Validate an object against the schema\n\t\t * @returns {object?}\n\t\t * @method\n\t\t * @name validate\n\t\t * @memberOf documents/schema#\n\t\t * @param {object=} record The record to validate\n\t\t * @param {string|object=} schemaName The name of a previously registered schema\n\t\t * @param {object=} options Options to pass to the validator\n\t\t * @example\n\t\t * // This supports these signatures:\n\t\t *\n\t\t * instance.validate(record, schemaName, options);\n\t\t *\n\t\t *\n\t\t * instance.validate(); // this, this._defaultSchemaName, this.validationOptions\n\t\t * instance.validate(record); // record, this._defaultSchemaName, this.validationOptions\n\t\t * instance.validate(schemaName); //this, schemaName, this.validationOptions\n\t\t * instance.validate(record, schemaName); //record, schemaName, this.validationOptions\n\t\t * instance.validate(schemaName, options); //this, schemaName, this.validationOptions\n\t\t */","name":"validate","kind":"function","longname":"documents/schema#validate","scope":"instance","id":"validate","path":"documents_schema.html#validate","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n\t\t * The options to pass to the validator when it runs\n\t\t * @type {object|function():{object}}\n\t\t * @name validationOptions\n\t\t * @memberOf documents/schema#\n\t\t */","name":"validationOptions","kind":"member","longname":"documents/schema#validationOptions","scope":"instance","id":"validationOptions","path":"documents_schema.html#validationOptions","ancestors":["<a href=\"documents_schema.html\">documents/schema</a>#"]},{"comment":"/**\n *  @classDesc Provides easy access to the system bus and provides some helper methods for doing so\n *  @exports mixins/bussable\n *  @mixin\n */","name":"mixins/bussable","alias":"mixins/bussable","kind":"mixin","longname":"mixins/bussable","scope":"global","id":"mixins/bussable","path":"mixins_bussable.html","ancestors":[]},{"comment":"/**\n\t * Get a subscription definition\n\t *\n\t * @param {string} channel\n\t * @param {string} topic\n\t * @returns {object=} The subscription definition\n\t */","name":"getSubscription","kind":"function","longname":"mixins/bussable#getSubscription","scope":"instance","id":"getSubscription","path":"mixins_bussable.html#getSubscription","ancestors":["<a href=\"mixins_bussable.html\">mixins/bussable</a>#"]},{"comment":"/**\n\t * Subscribe to an event once\n\t * @param {string} channel The channel to subscribe to\n\t * @param {string} topic The topic to subscribe to\n\t * @param {callback} callback What to do when you get the event\n\t * @returns {object} The subscription definition\n\t */","name":"once","kind":"function","longname":"mixins/bussable#once","scope":"instance","id":"once","path":"mixins_bussable.html#once","ancestors":["<a href=\"mixins_bussable.html\">mixins/bussable</a>#"]},{"comment":"/**\n\t * Publish an event on the system bus\n\t * @param {string} channel The channel to publish to\n\t * @param {string} topic The topic to publish to\n\t * @param {object=} options What to pass to the event\n\t */","name":"publish","kind":"function","longname":"mixins/bussable#publish","scope":"instance","id":"publish","path":"mixins_bussable.html#publish","ancestors":["<a href=\"mixins_bussable.html\">mixins/bussable</a>#"]},{"comment":"/**\n\t * Subscribe to an event\n\t * @param {string} channel The channel to subscribe to\n\t * @param {string} topic The topic to subscribe to\n\t * @param {callback} callback What to do when you get the event\n\t * @returns {object} The subscription definition\n\t */","name":"subscribe","kind":"function","longname":"mixins/bussable#subscribe","scope":"instance","id":"subscribe","path":"mixins_bussable.html#subscribe","ancestors":["<a href=\"mixins_bussable.html\">mixins/bussable</a>#"]},{"comment":"/**\n * @classDesc Make an object capable of handling a signal. Or many signals.\n * @exports mixins/signalable\n * @mixin\n * @extends base\n */","name":"mixins/signalable","alias":"mixins/signalable","kind":"mixin","longname":"mixins/signalable","scope":"global","id":"mixins/signalable","path":"mixins_signalable.html","ancestors":[]},{"comment":"/**\n * When true, the class will load the `signals` hash and create the signal definitions during construction\n * @memberOf mixins/signalable#\n * @name autoLoadSignals\n * @type boolean\n */","name":"autoLoadSignals","kind":"member","longname":"mixins/signalable#autoLoadSignals","scope":"instance","id":"autoLoadSignals","path":"mixins_signalable.html#autoLoadSignals","ancestors":["<a href=\"mixins_signalable.html\">mixins/signalable</a>#"]},{"comment":"/**\n\t * When you make a change to the signals hash after loading, then you can make it reload\n\t */","name":"refreshSignals","kind":"function","longname":"mixins/signalable#refreshSignals","scope":"instance","id":"refreshSignals","path":"mixins_signalable.html#refreshSignals","ancestors":["<a href=\"mixins_signalable.html\">mixins/signalable</a>#"]},{"comment":"/**\n * A hash of signals to create automatically. Each definition consists of a name for the signal as the key\n * and then a hash of options (nullable) for each signal\n * @type {hash|function():hash}\n * @memberOf mixins/signalable#\n * @name signals\n * @type module:mixins/signalable.SignalOptions\n */","name":"signals","kind":"member","longname":"mixins/signalable#signals","scope":"instance","id":"signals","path":"mixins_signalable.html#signals","ancestors":["<a href=\"mixins_signalable.html\">mixins/signalable</a>#"]},{"comment":"/**\n * @fileOverview This is base definition for all composed classes defined by the system\n * @module base\n * @requires base/chains\n * @requires dcl\n */","name":"base","kind":"module","longname":"module:base","id":"base","path":"module-base.html","ancestors":[]},{"comment":"/**\n * @fileOverview The chains define the primary composition elements (functions) that determine the order of execution.\n *\n * @module base/chains\n * @requires dcl\n */","name":"base/chains","kind":"module","longname":"module:base/chains","id":"base/chains","path":"module-base_chains.html","ancestors":[]},{"comment":"/**\n * @fileOverview allows you to bind a change watcher that looks for get and set operations on an arbitrary\n * property of an object at at any depth. This allows you to look for changes or intercept values asynchronously or otherwise.\n * @module documents/binder\n * @requires async\n * @requires documents/probe\n * @requires lodash\n * @requires promise\n */","name":"documents/binder","kind":"module","longname":"module:documents/binder","id":"documents/binder","path":"module-documents_binder.html","ancestors":[]},{"comment":"/**\n * Bind to a property somewhere in an object. The property is found using dot notation and can be arbitrarily deep.\n * @param {string} path The path into the object to locate the property. For instance this could be `\"_id\"`, `\"name.last\"`.\n * or `\"some.really.really.long.path.including.an.array.2.name\"`\n * @param {object} record Anything you can hang a property off of\n * @param {options} options What you wanna do with the doohicky when yoyu bind it.\n * @param {function(*):Promise|*=} options.getter This is the method to run when getting the value. When it runs, you will receive\n * a single parameter which is the current value as the object understands it. You can return the value directly, just raise an event or\n * whatever your little heart demands. However, if you are asynchronous, this will turn your return value into a promise, one of the\n * few places this system will embrace promises over node-like error passing and that is mainly because this is a getter so a return value\n * is particularly important. *\n * @param {*} options.getter.value The current value of the record\n * @param {function(err, value)=} options.getter.callback When asynchronous, return you value through this method using node style\n * error passing (the promise is handled for you by this method).\n * @param {boolean=} options.getterAsync When true (not truthy) the getter is treated asynchronously and returns a promise with your value.\n * @param {function(*, *, *)=} options.setter A setter method\n * @param {*} options.setter.newVal The new value\n * @param {*} options.setter.oldVal The old value\n * @param {*} options.setter.record The record hosting the change\n * @param {function(*, *, *, function=)=} options.validator If you want a validator to run before settings values, pass this guy in\n * @param {*} options.validator.newVal The new value\n * @param {*} options.validator.oldVal The old value\n * @param {*} options.validator.record The record hosting the change\n * @param {function(err)=} options.validator.callback If the validator is asynchronous, then pass your value back here, otherwise pass it back as a return value.\n * When you use an asynchronous instance, pass the error in the first value and then the rest of the parameters are yours to play with\n * @param {boolean=} options.validatorAsync When true (not truthy) the validator is treated asynchornously and returns a promise with your value.\n * @returns {*}\n */","name":"bind","kind":"function","longname":"module:documents/binder.bind","scope":"static","id":".bind","path":"module-documents_binder.html#.bind","ancestors":["<a href=\"module-documents_binder.html\">documents/binder</a>."]},{"comment":"/**\n * You can unbind previously bound objects from here.\n *\n * @param {string} path The path that was bound using {@link module:documents/binder.bind}\n * @param {*} record The object that was bound\n */","name":"unbind","kind":"function","longname":"module:documents/binder.unbind","scope":"static","id":".unbind","path":"module-documents_binder.html#.unbind","ancestors":["<a href=\"module-documents_binder.html\">documents/binder</a>."]},{"comment":"/**\n Returns true if all items match the query. Aliases as `every`\n @function\n\n @param {object} qu The query to execute\n @returns {boolean}\n @name all\n @memberOf module:documents/collector~CollectorBase#\n */","name":"all","kind":"function","longname":"module:documents/collector~CollectorBase#all","scope":"instance","id":"all","path":"module-documents_collector-CollectorBase.html#all","ancestors":[]},{"comment":"/**\n Returns true if any of the items match the query. Aliases as `all`\n @function\n\n @param {object} qu The query to execute\n @returns {boolean}\n @memberOf module:documents/collector~CollectorBase#\n @name any\n */","name":"any","kind":"function","longname":"module:documents/collector~CollectorBase#any","scope":"instance","id":"any","path":"module-documents_collector-CollectorBase.html#any","ancestors":[]},{"comment":"/**\n Returns true if all items match the query. Aliases as `all`\n @function\n\n @param {object} qu The query to execute\n @returns {boolean}\n @name every\n @memberOf module:documents/collector~CollectorBase#\n */","name":"every","kind":"function","longname":"module:documents/collector~CollectorBase#every","scope":"instance","id":"every","path":"module-documents_collector-CollectorBase.html#every","ancestors":[]},{"comment":"/**\n Find all records that match a query\n\n @param {object} qu The query to execute.\n @returns {array} The results\n @memberOf module:documents/collector~CollectorBase#\n @name find\n @method\n **/","name":"find","kind":"function","longname":"module:documents/collector~CollectorBase#find","scope":"instance","id":"find","path":"module-documents_collector-CollectorBase.html#find","ancestors":[]},{"comment":"/**\n Find all records that match a query and returns the keys for those items. This is similar to {@link module:ink/probe.find} but instead of returning\n records, returns the keys. If `obj` is an object it will return the hash key. If 'obj' is an array, it will return the index\n\n @param {object} qu The query to execute.\n @returns {array}\n @memberOf module:documents/collector~CollectorBase#\n @name findKeys\n @method\n */","name":"findKeys","kind":"function","longname":"module:documents/collector~CollectorBase#findKeys","scope":"instance","id":"findKeys","path":"module-documents_collector-CollectorBase.html#findKeys","ancestors":[]},{"comment":"/**\n Returns the first record that matches the query. Aliased as `seek`.\n\n @param {object} qu The query to execute.\n @returns {object}\n @memberOf module:documents/collector~CollectorBase#\n @name findOne\n @method\n */","name":"findOne","kind":"function","longname":"module:documents/collector~CollectorBase#findOne","scope":"instance","id":"findOne","path":"module-documents_collector-CollectorBase.html#findOne","ancestors":[]},{"comment":"/**\n Returns the first record that matches the query and returns its key or index depending on whether `obj` is an object or array respectively.\n Aliased as `seekKey`.\n\n @param {object} qu The query to execute.\n @returns {object}\n @memberOf module:documents/collector~CollectorBase#\n @name findOneKey\n @method\n */","name":"findOneKey","kind":"function","longname":"module:documents/collector~CollectorBase#findOneKey","scope":"instance","id":"findOneKey","path":"module-documents_collector-CollectorBase.html#findOneKey","ancestors":[]},{"comment":"/**\n\t\t * Get the size of the collection\n\t\t * @name length\n\t\t * @type {number}\n\t\t * @memberOf module:documents/collector~CollectorBase#\n\t\t */","name":"length","kind":"member","longname":"module:documents/collector~CollectorBase#length","scope":"instance","id":"length","path":"module-documents_collector-CollectorBase.html#length","ancestors":[]},{"comment":"/**\n Remove all items in the object/array that match the query\n\n @param {object} qu The query to execute. See {@link module:ink/probe.queryOperators} for the operators you can use.\n @return {object|array} The array or object as appropriate without the records.\n @memberOf module:documents/collector~CollectorBase#\n @name remove\n @method\n **/","name":"remove","kind":"function","longname":"module:documents/collector~CollectorBase#remove","scope":"instance","id":"remove","path":"module-documents_collector-CollectorBase.html#remove","ancestors":[]},{"comment":"/**\n Returns true if any of the items match the query. Aliases as `any`\n @function\n\n @param {object} qu The query to execute\n @returns {boolean}\n @memberOf module:documents/collector~CollectorBase#\n @name some\n */","name":"some","kind":"function","longname":"module:documents/collector~CollectorBase#some","scope":"instance","id":"some","path":"module-documents_collector-CollectorBase.html#some","ancestors":[]},{"comment":"/**\n\t\t * Creates an array of shuffled array values, using a version of the Fisher-Yates shuffle.\n\t\t * See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\n\t\t * @function\n\t\t * @memberOf module:documents/collector~CollectorBase#\n\t\t * @returns {array}\n\t\t */","name":"shuffle","kind":"function","longname":"module:documents/collector~CollectorBase#this.shuffle","scope":"static","id":".shuffle","path":"module-documents_collector-CollectorBase_this.html#.shuffle","ancestors":[]},{"comment":"/**\n Returns the set of unique records that match a query\n\n @param {object} qu The query to execute.\n @return {array}\n @memberOf module:documents/collector~CollectorBase#\n @name unique\n @method\n **/","name":"unique","kind":"function","longname":"module:documents/collector~CollectorBase#unique","scope":"instance","id":"unique","path":"module-documents_collector-CollectorBase.html#unique","ancestors":[]},{"comment":"/**\n Updates all records in obj that match the query. See {@link module:ink/probe.updateOperators} for the operators that are supported.\n\n @param {object} qu The query which will be used to identify the records to updated\n @param {object} setDocument The update operator. See {@link module:ink/probe.updateOperators}\n @memberOf module:documents/collector~CollectorBase#\n @name update\n @method\n */","name":"update","kind":"function","longname":"module:documents/collector~CollectorBase#update","scope":"instance","id":"update","path":"module-documents_collector-CollectorBase.html#update","ancestors":[]},{"comment":"/**\n * @fileOverview A model is the first level if usable data-bearing entity in the system. It does NOT include any verbs for saving or anything like\n * that, it is a pure, in memory data container\n * @module documents/model\n * @require base\n * @require documents/probe\n * @require lodash\n */","name":"documents/model","kind":"module","longname":"module:documents/model","id":"documents/model","path":"module-documents_model.html","ancestors":[]},{"comment":"/**\n @fileOverview Queries objects in memory using a mongo-like notation for reaching into objects and filtering for records\n\n @module documents/probe\n @author Terry Weiss\n @license MIT\n @requires lodash\n */","name":"documents/probe","kind":"module","longname":"module:documents/probe","id":"documents/probe","path":"module-documents_probe.html","ancestors":[]},{"comment":"/**\n Returns true if all items match the query\n\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @returns {boolean}\n **/","name":"all","kind":"function","longname":"module:documents/probe.all","scope":"static","id":".all","path":"module-documents_probe.html#.all","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n Returns true if any of the items match the query\n\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @returns {boolean}\n **/","name":"any","kind":"function","longname":"module:documents/probe.any","scope":"static","id":".any","path":"module-documents_probe.html#.any","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n The delimiter to use when splitting an expression\n @type {string}\n @static\n @default '.'\n **/","name":"delimiter","kind":"member","longname":"module:documents/probe.delimiter","scope":"static","id":".delimiter","path":"module-documents_probe.html#.delimiter","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n Returns true if all items match the query. Aliases as `all`\n @function\n @param {array|object} obj The object to query\n @param {object} qu The query to execute\n @returns {boolean}\n */","name":"every","kind":"function","longname":"module:documents/probe.every","scope":"static","id":".every","path":"module-documents_probe.html#.every","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n Find all records that match a query\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @returns {array} The results\n **/","name":"find","kind":"function","longname":"module:documents/probe.find","scope":"static","id":".find","path":"module-documents_probe.html#.find","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n Find all records that match a query and returns the keys for those items. This is similar to {@link module:documents/probe.find} but instead of returning\n records, returns the keys. If `obj` is an object it will return the hash key. If 'obj' is an array, it will return the index\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @returns {array}\n */","name":"findKeys","kind":"function","longname":"module:documents/probe.findKeys","scope":"static","id":".findKeys","path":"module-documents_probe.html#.findKeys","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n Returns the first record that matches the query. Aliased as `seek`.\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @returns {object}\n */","name":"findOne","kind":"function","longname":"module:documents/probe.findOne","scope":"static","id":".findOne","path":"module-documents_probe.html#.findOne","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n Returns the first record that matches the query and returns its key or index depending on whether `obj` is an object or array respectively.\n Aliased as `seekKey`.\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @returns {object}\n */","name":"findOneKey","kind":"function","longname":"module:documents/probe.findOneKey","scope":"static","id":".findOneKey","path":"module-documents_probe.html#.findOneKey","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n Reaches into an object and allows you to get at a value deeply nested in an object. This is not a query, but a\n straight reach in, useful for event bindings\n\n @param {array} path The split path of the element to work with\n @param {object} record The record to reach into\n @return {*} Whatever was found in the record\n **/","name":"get","kind":"function","longname":"module:documents/probe.get","scope":"static","id":".get","path":"module-documents_probe.html#.get","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n Binds the query and update methods to a specific object and adds the methods to that object. When called these\n methods can skip the first parameter so that find(object, query) can just be called as object.find(query)\n @param {object|array} obj The object or array to bind to\n @param {object|array=} collection If the collection is not the same as <code>this</code> but is a property, or even\n a whole other object, you specify that here. Otherwise the <code>obj</code> is assumed to be the same as the collecion\n **/","name":"mixin","kind":"function","longname":"module:documents/probe.mixin","scope":"static","id":".mixin","path":"module-documents_probe.html#.mixin","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n Binds the query and update methods to a new object. When called these\n methods can skip the first parameter so that find(object, query) can just be called as find(query)\n @param {object|array} obj The object or array to bind to\n @return {object} An object with method bindings in place\n **/","name":"proxy","kind":"function","longname":"module:documents/probe.proxy","scope":"static","id":".proxy","path":"module-documents_probe.html#.proxy","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n * These are the supported query operators\n *\n * @memberOf module:documents/probe\n * @name queryOperators\n * @class This is not actually a class, but an artifact of the documentation system\n */","name":"queryOperators","kind":"class","longname":"module:documents/probe.queryOperators","scope":"static","id":"queryOperators","path":"module-documents_probe.queryOperators.html","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n\t * `$all` checks to see if all of the members of the query are included in an array\n\t * `{array: {$all: [val1, val2, val3]}}`\n\t * @name $all\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {\"categories\" : {$all : [\"cat4\", \"cat2\", \"cat1\"]}} );\n\t */","name":"$all","kind":"member","longname":"module:documents/probe.queryOperators.$all","scope":"static","id":".$all","path":"module-documents_probe.queryOperators.html#.$all","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * Returns true if all of the conditions of the query are met\n\t * `{$and: [query1, query2, query3]}`\n\t * @name $and\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {$and : [\n     *      {\"name.first\" : \"Mildred\"},\n     *      {\"name.last\" : \"Graves\"}\n     * ]} );\n\t */","name":"$and","kind":"member","longname":"module:documents/probe.queryOperators.$and","scope":"static","id":".$and","path":"module-documents_probe.queryOperators.html#.$and","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * This is like $all except that it works with an array of objects or value. It checks to see the array matches all\n\t * of the conditions of the query\n\t * `{array: {$elemMatch: {path: value, path: {$operation: value2}}}`\n     * @name $elemMatch\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {attr : {$elemMatch : [\n     *  {color : \"red\", \"hand\" : \"left\"}\n     * ]}} );\n\t */","name":"$elemMatch","kind":"member","longname":"module:documents/probe.queryOperators.$elemMatch","scope":"static","id":".$elemMatch","path":"module-documents_probe.queryOperators.html#.$elemMatch","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * `$eq` performs a `===` comparison by comparing the value directly if it is an atomic value.\n\t * otherwise if it is an array, it checks to see if the value looked for is in the array.\n\t * `{field: value}` or `{field: {$eq : value}}` or `{array: value}` or `{array: {$eq : value}}`\n\t * @name $eq\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {categories : \"cat1\"} );\n\t * // is the same as\n\t * probe.find( data, {categories : {$eq: \"cat1\"}} );\n\t */","name":"$eq","kind":"member","longname":"module:documents/probe.queryOperators.$eq","scope":"static","id":".$eq","path":"module-documents_probe.queryOperators.html#.$eq","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * `$exists` Sees if a field exists.\n\t * `{field: {$exists: true|false}}`\n\t * @name $exists\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {\"name.middle\" : {$exists : true}} );\n\t */","name":"$exists","kind":"member","longname":"module:documents/probe.queryOperators.$exists","scope":"static","id":".$exists","path":"module-documents_probe.queryOperators.html#.$exists","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * `$gt` Sees if a field is greater than the value\n\t * `{field: {$gt: value}}`\n\t * @name $gt\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {\"age\" : {$gt : 24}} );\n\t */","name":"$gt","kind":"member","longname":"module:documents/probe.queryOperators.$gt","scope":"static","id":".$gt","path":"module-documents_probe.queryOperators.html#.$gt","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * `$gte` Sees if a field is greater than or equal to the value\n\t * `{field: {$gte: value}}`\n\t * @name $gte\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {\"age\" : {$gte : 50}} );\n\t */","name":"$gte","kind":"member","longname":"module:documents/probe.queryOperators.$gte","scope":"static","id":".$gte","path":"module-documents_probe.queryOperators.html#.$gte","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * `$in` Sees if a field has one of the values in the query\n\t * `{field: {$in: [test1, test2, test3,...]}}`\n\t * @name $in\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {\"age\" : {$in : [24, 28, 60]}} );\n\t */","name":"$in","kind":"member","longname":"module:documents/probe.queryOperators.$in","scope":"static","id":".$in","path":"module-documents_probe.queryOperators.html#.$in","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * `$lt` Sees if a field is less than the value\n\t * `{field: {$lt: value}}`\n\t * @name $lt\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {\"age\" : {$lt : 24}} );\n\t */","name":"$lt","kind":"member","longname":"module:documents/probe.queryOperators.$lt","scope":"static","id":".$lt","path":"module-documents_probe.queryOperators.html#.$lt","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * `$lte` Sees if a field is less than or equal to the value\n\t * `{field: {$lte: value}}`\n\t * @name $lte\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {\"age\" : {$lte : 50}} );\n\t */","name":"$lte","kind":"member","longname":"module:documents/probe.queryOperators.$lte","scope":"static","id":".$lte","path":"module-documents_probe.queryOperators.html#.$lte","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * Checks equality to a modulus operation on a field\n\t * `{field: {$mod: [divisor, remainder]}}`\n\t * @name $mod\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {\"age\" : {$mod : [2, 0]}} );\n\t */","name":"$mod","kind":"member","longname":"module:documents/probe.queryOperators.$mod","scope":"static","id":".$mod","path":"module-documents_probe.queryOperators.html#.$mod","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t *  `$ne` performs a `!==` comparison by comparing the value directly if it is an atomic value. Otherwise, if it is an array\n\t * this is performs a \"not in array\".\n\t * '{field: {$ne : value}}` or '{array: {$ne : value}}`\n\t * @name $ne\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {\"name.first\" : {$ne : \"Sheryl\"}} );\n\t */","name":"$ne","kind":"member","longname":"module:documents/probe.queryOperators.$ne","scope":"static","id":".$ne","path":"module-documents_probe.queryOperators.html#.$ne","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * `$nin` Sees if a field has none of the values in the query\n\t * `{field: {$nin: [test1, test2, test3,...]}}`\n\t * @name $nin\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {\"age\" : {$nin : [24, 28, 60]}} );\n\t */","name":"$nin","kind":"member","longname":"module:documents/probe.queryOperators.$nin","scope":"static","id":".$nin","path":"module-documents_probe.queryOperators.html#.$nin","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * Returns true if none of the conditions of the query are met\n\t * `{$nor: [query1, query2, query3]}`\n\t * @name $nor\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {$nor : [\n     *      {\"age\" : {$in : [24, 28, 60]}},\n     *      {categories : \"cat1\"}\n     * ]} );\n\t */","name":"$nor","kind":"member","longname":"module:documents/probe.queryOperators.$nor","scope":"static","id":".$nor","path":"module-documents_probe.queryOperators.html#.$nor","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * Logical NOT on the conditions of the query\n\t * `{$not: [query1, query2, query3]}`\n\t * @name $not\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {$not : {\"age\" : {$lt : 24}}} );\n\t */","name":"$not","kind":"member","longname":"module:documents/probe.queryOperators.$not","scope":"static","id":".$not","path":"module-documents_probe.queryOperators.html#.$not","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * Returns true if any of the conditions of the query are met\n\t * `{$or: [query1, query2, query3]}`\n\t * @name $or\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {$or : [\n     *      \"age\" : {$in : [24, 28, 60]}},\n\t *      {categories : \"cat1\"}\n\t * ]} );\n\t */","name":"$or","kind":"member","longname":"module:documents/probe.queryOperators.$or","scope":"static","id":".$or","path":"module-documents_probe.queryOperators.html#.$or","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * Performs a regular expression test againts the field\n\t * `{field: {$regex: re, $options: reOptions}}`\n\t * @name $regex\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {\"name.first\" : {$regex : \"m*\", $options : \"i\"}} );\n\t */","name":"$regex","kind":"member","longname":"module:documents/probe.queryOperators.$regex","scope":"static","id":".$regex","path":"module-documents_probe.queryOperators.html#.$regex","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n\t * Compares the size of the field/array to the query. This can be used on arrays, strings and objects (where it will count keys)\n\t * `{'field|array`: {$size: value}}`\n\t * @name $size\n\t * @memberOf module:documents/probe.queryOperators\n\t * @example\n\t * var probe = require(\"documents/probe\");\n\t * probe.find( data, {attr : {$size : 3}} );\n\t */","name":"$size","kind":"member","longname":"module:documents/probe.queryOperators.$size","scope":"static","id":".$size","path":"module-documents_probe.queryOperators.html#.$size","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.queryOperators.html\">.queryOperators</a>."]},{"comment":"/**\n Remove all items in the object/array that match the query\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @return {object|array} The array or object as appropriate without the records.\n **/","name":"remove","kind":"function","longname":"module:documents/probe.remove","scope":"static","id":".remove","path":"module-documents_probe.html#.remove","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n This will write the value into a record at the path, creating intervening objects if they don't exist. This does not work as filtered\n update and is meant to be used on a single record. It is a nice way of setting a property at an arbitrary depth at will.\n\n @param {array} path The split path of the element to work with\n @param {object} record The record to reach into\n @param {string} setter The set operation.  See {@link module:documents/probe.updateOperators} for the operators you can use.\n @param {object} newValue The value to write to the, or if the operator is $pull, the query of items to look for\n */","name":"set","kind":"function","longname":"module:documents/probe.set","scope":"static","id":".set","path":"module-documents_probe.html#.set","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n Returns true if any of the items match the query. Aliases as `any`\n @function\n @param {array|object} obj The object to query\n @param {object} qu The query to execute\n @returns {boolean}\n */","name":"some","kind":"function","longname":"module:documents/probe.some","scope":"static","id":".some","path":"module-documents_probe.html#.some","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n Returns the set of unique records that match a query\n @param {array|object} obj The object to query\n @param {object} qu The query to execute. See {@link module:documents/probe.queryOperators} for the operators you can use.\n @return {array}\n **/","name":"unique","kind":"function","longname":"module:documents/probe.unique","scope":"static","id":".unique","path":"module-documents_probe.html#.unique","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n Updates all records in obj that match the query. See {@link module:documents/probe.updateOperators} for the operators that are supported.\n @param {object|array} obj The object to update\n @param {object} qu The query which will be used to identify the records to updated\n @param {object} setDocument The update operator. See {@link module:documents/probe.updateOperators}\n */","name":"update","kind":"function","longname":"module:documents/probe.update","scope":"static","id":".update","path":"module-documents_probe.html#.update","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n * These are the supported update operators\n *\n * @memberOf module:documents/probe\n * @name updateOperators\n * @class This is not actually a class, but an artifact of the documentation system\n */","name":"updateOperators","kind":"class","longname":"module:documents/probe.updateOperators","scope":"static","id":"updateOperators","path":"module-documents_probe.updateOperators.html","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>."]},{"comment":"/**\n\t\t\t\t * Decrements a field by the amount you specify. It takes the form\n\t\t\t\t * `{ $dec: { field1: amount }`\n                 * @name $dec\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\n\t\t\t\t * @example\n\t\t\t\t *  var probe = require(\"documents/probe\");\n\t\t\t\t * probe.update( obj, {'name.last' : 'Owen', 'name.first' : 'LeRoy'},\n\t\t\t\t * {$dec : {'password.changes' : 2}} );\n\t\t\t\t */","name":"$dec","kind":"member","longname":"module:documents/probe.updateOperators.$dec","scope":"static","id":".$dec","path":"module-documents_probe.updateOperators.html#.$dec","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.updateOperators.html\">.updateOperators</a>."]},{"comment":"/**\n\t\t\t\t * Increments a field by the amount you specify. It takes the form\n\t\t\t\t * `{ $inc: { field1: amount } }`\n\t\t\t\t * @name $inc\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\n\t\t\t\t * @example\n\t\t\t\t * var probe = require(\"documents/probe\");\n\t\t\t\t * probe.update( obj, {'name.last' : 'Owen', 'name.first' : 'LeRoy'},\n\t\t\t\t * {$inc : {'password.changes' : 2}} );\n\t\t\t\t */","name":"$inc","kind":"member","longname":"module:documents/probe.updateOperators.$inc","scope":"static","id":".$inc","path":"module-documents_probe.updateOperators.html#.$inc","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.updateOperators.html\">.updateOperators</a>."]},{"comment":"/**\n\t\t\t\t * The $pop operator removes the first or last element of an array. Pass $pop a value of 1 to remove the last element\n\t\t\t\t * in an array and a value of -1 to remove the first element of an array. This will only work on arrays. Syntax:\n\t\t\t\t * `{ $pop: { field: 1 } }` or `{ $pop: { field: -1 } }`\n\t\t\t\t * @name $pop\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\n\t\t\t\t * @example\n\t\t\t\t * var probe = require(\"documents/probe\");\n\t\t\t\t * // attr is the name of the array field\n\t\t\t\t * probe.update( data, {_id : '511d18827da2b88b09000133'}, {$pop : {attr : 1}} );\n\t\t\t\t */","name":"$pop","kind":"member","longname":"module:documents/probe.updateOperators.$pop","scope":"static","id":".$pop","path":"module-documents_probe.updateOperators.html#.$pop","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.updateOperators.html\">.updateOperators</a>."]},{"comment":"/**\n\t\t\t\t * The $pull operator removes all instances of a value from an existing array. It looks like this:\n\t\t\t\t * `{ $pull: { field: <query> } }`\n\t\t\t\t * @name $pull\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\n\t\t\t\t * @example\n\t\t\t\t * var probe = require(\"documents/probe\");\n\t\t\t\t * // attr is the name of the array field\n\t\t\t\t * probe.update( data, {'email' : 'EWallace.43@fauxprisons.com'},\n\t\t\t\t * {$pull : {attr : {\"color\" : \"green\"}}} );\n\t\t\t\t */","name":"$pull","kind":"member","longname":"module:documents/probe.updateOperators.$pull","scope":"static","id":".$pull","path":"module-documents_probe.updateOperators.html#.$pull","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.updateOperators.html\">.updateOperators</a>."]},{"comment":"/**\n\t\t\t\t * The $push operator appends a specified value to an array. It looks like this:\n\t\t\t\t * `{ $push: { <field>: <value> } }`\n\t\t\t\t * @name $push\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\n\t\t\t\t * @example\n\t\t\t\t * var probe = require(\"documents/probe\");\n\t\t\t\t * // attr is the name of the array field\n\t\t\t\t * probe.update( data, {_id : '511d18827da2b88b09000133'},\n\t\t\t\t * {$push : {attr : {\"hand\" : \"new\", \"color\" : \"new\"}}} );\n\t\t\t\t */","name":"$push","kind":"member","longname":"module:documents/probe.updateOperators.$push","scope":"static","id":".$push","path":"module-documents_probe.updateOperators.html#.$push","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.updateOperators.html\">.updateOperators</a>."]},{"comment":"/**\n\t\t\t\t * Removes the field from the object. It takes the form\n\t\t\t\t * `{ $unset: { field1: \"\" } }`\n\t\t\t\t * @name $unset\n\t\t\t\t * @memberOf module:documents/probe.updateOperators\n\t\t\t\t * @example\n\t\t\t\t * var probe = require(\"documents/probe\");\n\t\t\t\t * probe.update( data, {'name.first' : 'Yogi'}, {$unset : {'name.first' : ''}} );\n\t\t\t\t */","name":"$unset","kind":"member","longname":"module:documents/probe.updateOperators.$unset","scope":"static","id":".$unset","path":"module-documents_probe.updateOperators.html#.$unset","ancestors":["<a href=\"module-documents_probe.html\">documents/probe</a>","<a href=\"module-documents_probe.updateOperators.html\">.updateOperators</a>."]},{"comment":"/**\n * @fileOverview Enables a schema and validation feature set to your document or other object.\n * @module documents/schema\n * @requires base\n * @requires jjv\n * @require lodash\n */","name":"documents/schema","kind":"module","longname":"module:documents/schema","id":"documents/schema","path":"module-documents_schema.html","ancestors":[]},{"comment":"/**\n @fileOverview An object and array collector\n @module ink/collector\n */","name":"ink/collector","kind":"module","longname":"module:ink/collector","id":"ink/collector","path":"module-ink_collector.html","ancestors":[]},{"comment":"/**\n Collect an object\n @param {array|object} obj What to collect\n @return {ACollector|OCollector}\n */","name":"collect","kind":"function","longname":"module:ink/collector.collect","scope":"static","id":".collect","path":"module-ink_collector.html#.collect","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>."]},{"comment":"/**\n An array based collector\n @extends module:documents/collector~CollectorBase\n @constructor\n */","name":"ACollector","kind":"class","longname":"module:ink/collector~ACollector","scope":"inner","id":"ACollector","path":"module-ink_collector-ACollector.html","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n Returns true if all items match the query. Aliases as `every`\n @function\n\n @param {object} qu The query to execute\n @returns {boolean}\n @name all\n @memberOf module:documents/collector~CollectorBase#\n */","name":"all","kind":"function","longname":"module:ink/collector~ACollector#all","scope":"instance","id":"all","path":"module-ink_collector-ACollector.html#all","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-ACollector.html\">~ACollector</a>#"]},{"comment":"/**\n Returns true if any of the items match the query. Aliases as `all`\n @function\n\n @param {object} qu The query to execute\n @returns {boolean}\n @memberOf module:documents/collector~CollectorBase#\n @name any\n */","name":"any","kind":"function","longname":"module:ink/collector~ACollector#any","scope":"instance","id":"any","path":"module-ink_collector-ACollector.html#any","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-ACollector.html\">~ACollector</a>#"]},{"comment":"/**\n Returns true if all items match the query. Aliases as `all`\n @function\n\n @param {object} qu The query to execute\n @returns {boolean}\n @name every\n @memberOf module:documents/collector~CollectorBase#\n */","name":"every","kind":"function","longname":"module:ink/collector~ACollector#every","scope":"instance","id":"every","path":"module-ink_collector-ACollector.html#every","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-ACollector.html\">~ACollector</a>#"]},{"comment":"/**\n Find all records that match a query\n\n @param {object} qu The query to execute.\n @returns {array} The results\n @memberOf module:documents/collector~CollectorBase#\n @name find\n @method\n **/","name":"find","kind":"function","longname":"module:ink/collector~ACollector#find","scope":"instance","id":"find","path":"module-ink_collector-ACollector.html#find","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-ACollector.html\">~ACollector</a>#"]},{"comment":"/**\n Find all records that match a query and returns the keys for those items. This is similar to {@link module:ink/probe.find} but instead of returning\n records, returns the keys. If `obj` is an object it will return the hash key. If 'obj' is an array, it will return the index\n\n @param {object} qu The query to execute.\n @returns {array}\n @memberOf module:documents/collector~CollectorBase#\n @name findKeys\n @method\n */","name":"findKeys","kind":"function","longname":"module:ink/collector~ACollector#findKeys","scope":"instance","id":"findKeys","path":"module-ink_collector-ACollector.html#findKeys","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-ACollector.html\">~ACollector</a>#"]},{"comment":"/**\n Returns the first record that matches the query. Aliased as `seek`.\n\n @param {object} qu The query to execute.\n @returns {object}\n @memberOf module:documents/collector~CollectorBase#\n @name findOne\n @method\n */","name":"findOne","kind":"function","longname":"module:ink/collector~ACollector#findOne","scope":"instance","id":"findOne","path":"module-ink_collector-ACollector.html#findOne","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-ACollector.html\">~ACollector</a>#"]},{"comment":"/**\n Returns the first record that matches the query and returns its key or index depending on whether `obj` is an object or array respectively.\n Aliased as `seekKey`.\n\n @param {object} qu The query to execute.\n @returns {object}\n @memberOf module:documents/collector~CollectorBase#\n @name findOneKey\n @method\n */","name":"findOneKey","kind":"function","longname":"module:ink/collector~ACollector#findOneKey","scope":"instance","id":"findOneKey","path":"module-ink_collector-ACollector.html#findOneKey","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-ACollector.html\">~ACollector</a>#"]},{"comment":"/**\n\t\t * Get the size of the collection\n\t\t * @name length\n\t\t * @type {number}\n\t\t * @memberOf module:documents/collector~CollectorBase#\n\t\t */","name":"length","kind":"member","longname":"module:ink/collector~ACollector#length","scope":"instance","id":"length","path":"module-ink_collector-ACollector.html#length","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-ACollector.html\">~ACollector</a>#"]},{"comment":"/**\n Remove all items in the object/array that match the query\n\n @param {object} qu The query to execute. See {@link module:ink/probe.queryOperators} for the operators you can use.\n @return {object|array} The array or object as appropriate without the records.\n @memberOf module:documents/collector~CollectorBase#\n @name remove\n @method\n **/","name":"remove","kind":"function","longname":"module:ink/collector~ACollector#remove","scope":"instance","id":"remove","path":"module-ink_collector-ACollector.html#remove","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-ACollector.html\">~ACollector</a>#"]},{"comment":"/**\n Returns true if any of the items match the query. Aliases as `any`\n @function\n\n @param {object} qu The query to execute\n @returns {boolean}\n @memberOf module:documents/collector~CollectorBase#\n @name some\n */","name":"some","kind":"function","longname":"module:ink/collector~ACollector#some","scope":"instance","id":"some","path":"module-ink_collector-ACollector.html#some","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-ACollector.html\">~ACollector</a>#"]},{"comment":"/**\n Returns the set of unique records that match a query\n\n @param {object} qu The query to execute.\n @return {array}\n @memberOf module:documents/collector~CollectorBase#\n @name unique\n @method\n **/","name":"unique","kind":"function","longname":"module:ink/collector~ACollector#unique","scope":"instance","id":"unique","path":"module-ink_collector-ACollector.html#unique","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-ACollector.html\">~ACollector</a>#"]},{"comment":"/**\n Updates all records in obj that match the query. See {@link module:ink/probe.updateOperators} for the operators that are supported.\n\n @param {object} qu The query which will be used to identify the records to updated\n @param {object} setDocument The update operator. See {@link module:ink/probe.updateOperators}\n @memberOf module:documents/collector~CollectorBase#\n @name update\n @method\n */","name":"update","kind":"function","longname":"module:ink/collector~ACollector#update","scope":"instance","id":"update","path":"module-ink_collector-ACollector.html#update","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-ACollector.html\">~ACollector</a>#"]},{"comment":"/**\n\t * Adds an item to the collection\n\t * @param {*} key The key to use for the item being added.\n\t * @param {*} item The item to add to the collection. The item is not iterated so that you could add bundled items to the collection\n\t */","name":"add","kind":"function","longname":"module:ink/collector~add","scope":"inner","id":"~add","path":"module-ink_collector.html#~add","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t\t * Adds to the top of the collection\n\t\t * @param {*} item The item to add to the collection. Only one item at a time can be added\n\t\t */","name":"add","kind":"function","longname":"module:ink/collector~add","scope":"inner","id":"~add","path":"module-ink_collector.html#~add","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t\t * Add to the bottom of the list\n\t\t * @param {*} item The item to add to the collection.  Only one item at a time can be added\n\t\t */","name":"append","kind":"function","longname":"module:ink/collector~append","scope":"inner","id":"~append","path":"module-ink_collector.html#~append","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t\t * Creates an array of elements from the specified indexes, or keys, of the collection. Indexes may be specified as\n\t\t * individual arguments or as arrays of indexes\n\t\t * @param {indexes} args The indexes to use\n\t\t */","name":"at","kind":"function","longname":"module:ink/collector~at","scope":"inner","id":"~at","path":"module-ink_collector.html#~at","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n * A collector\n * @constructor\n */","name":"CollectorBase","kind":"class","longname":"module:ink/collector~CollectorBase","scope":"inner","id":"CollectorBase","path":"module-ink_collector-CollectorBase.html","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t\t * Modifies the collection with all falsey values of array removed. The values false, null, 0, \"\", undefined and NaN are all falsey.\n\t\t */","name":"compact","kind":"function","longname":"module:ink/collector~compact","scope":"inner","id":"~compact","path":"module-ink_collector.html#~compact","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t\t\t * Creates an array of array elements not present in the other arrays using strict equality for comparisons, i.e. ===.\n\t\t\t * @returns {array}\n\t\t\t */","name":"difference","kind":"member","longname":"module:ink/collector~constructor#difference","scope":"instance","id":"difference","path":"module-ink_collector-constructor.html#difference","ancestors":[]},{"comment":"/**\n\t\t\t * Gets the first n values of the array\n\t\t\t * @param {number=} n The numer of items to return\n\t\t\t * @returns {*}\n\t\t\t */","name":"head","kind":"member","longname":"module:ink/collector~constructor#head","scope":"instance","id":"head","path":"module-ink_collector-constructor.html#head","ancestors":[]},{"comment":"/**\n\t\t * The collection that being managed\n\t\t * @type {object|array}\n\t\t */","name":"heap","kind":"member","longname":"module:ink/collector~constructor#heap","scope":"instance","id":"heap","path":"module-ink_collector-constructor.html#heap","ancestors":[]},{"comment":"/**\n\t\t\t * This method gets all but the first values of array\n\t\t\t * @param {number=} n The numer of items to return\n\t\t\t * @returns {*}\n\t\t\t */","name":"tail","kind":"member","longname":"module:ink/collector~constructor#tail","scope":"instance","id":"tail","path":"module-ink_collector-constructor.html#tail","ancestors":[]},{"comment":"/**\n\t * Creates an object composed of keys returned from running each element\n\t * of the collection through the given callback. The corresponding value of each key\n\t * is the number of times the key was returned by the callback.\n\t * @param {object=} query A query to evaluate. If you pass in a query, only the items that match the query\n\t * are iterated over.\n\t * @param  {function(value, key, collection)} iterator\n\t * @param {object=} thisobj The value of `this`\n\t * @return {object}\n\t */","name":"countBy","kind":"function","longname":"module:ink/collector~countBy","scope":"inner","id":"~countBy","path":"module-ink_collector.html#~countBy","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t * Destructor called when the object is destroyed.\n\t */","name":"destroy","kind":"function","longname":"module:ink/collector~destroy","scope":"inner","id":"~destroy","path":"module-ink_collector.html#~destroy","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t * Iterate over each item in the collection, or a subset that matches a query. This supports two signatures:\n\t * `.each(query, function)` and `.each(function)`. If you pass in a query, only the items that match the query\n\t * are iterated over.\n\t * @param {object=} query A query to evaluate\n\t * @param {function(val, key)} iterator Function to execute against each item in the collection\n\t * @param {object=} thisobj The value of `this`\n\t */","name":"each","kind":"function","longname":"module:ink/collector~each","scope":"inner","id":"~each","path":"module-ink_collector.html#~each","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t\t * Flattens a nested array (the nesting can be to any depth). If isShallow is truthy, array will only be flattened a single level.\n\t\t * If callback is passed, each element of array is passed through a callback before flattening.\n\t\t * @param {object=} query A query to evaluate . If you pass in a query, only the items that match the query\n\t\t * are iterated over.\n\t\t * @param {function(value, key, collection)} iterator,\n\t\t * @param {object=} thisobj The value of `this`\n\t\t * @return {number}\n\t\t */","name":"flatten","kind":"function","longname":"module:ink/collector~flatten","scope":"inner","id":"~flatten","path":"module-ink_collector.html#~flatten","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t * Creates an object composed of keys returned from running each element of the collection through the callback.\n\t * The corresponding value of each key is an array of elements passed to callback that returned the key.\n\t * The callback is invoked with three arguments: (value, index|key, collection).\n\t * @param {object=} query A query to evaluate . If you pass in a query, only the items that match the query\n\t * are iterated over.\n\t * @param {function(value, key, collection)} iterator\n\t * @param {object=} thisobj The value of `this`\n\t * @return {object}\n\t */","name":"groupBy","kind":"function","longname":"module:ink/collector~groupBy","scope":"inner","id":"~groupBy","path":"module-ink_collector.html#~groupBy","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t\t * Gets an items by its index\n\t\t * @param {number} key The index to get\n\t\t * @return {*}\n\t\t */","name":"index","kind":"function","longname":"module:ink/collector~index","scope":"inner","id":"~index","path":"module-ink_collector.html#~index","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t * Get a record by key\n\t * @param {*} key The key of the record to get\n\t * @return {*}\n\t */","name":"key","kind":"function","longname":"module:ink/collector~key","scope":"inner","id":"~key","path":"module-ink_collector.html#~key","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t * Maps the contents to an array by iterating over it and transforming it. You supply the iterator. Supports two signatures:\n\t * `.map(query, function)` and `.map(function)`. If you pass in a query, only the items that match the query\n\t * are iterated over.\n\t * @param {object=} query A query to evaluate\n\t * @param {function(val, key)} iterator Function to execute against each item in the collection\n\t * @param {object=} thisobj The value of `this`\n\t */","name":"map","kind":"function","longname":"module:ink/collector~map","scope":"inner","id":"~map","path":"module-ink_collector.html#~map","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t * Retrieves the maximum value of an array. If callback is passed,\n\t * it will be executed for each value in the array to generate the criterion by which the value is ranked.\n\t * @param {object=} query A query to evaluate . If you pass in a query, only the items that match the query\n\t * are iterated over.\n\t * @param {function(value, key, collection)} iterator\n\t * @param {object=} thisobj The value of `this`\n\t * @return {number}\n\t */","name":"max","kind":"function","longname":"module:ink/collector~max","scope":"inner","id":"~max","path":"module-ink_collector.html#~max","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t * Retrieves the minimum value of an array. If callback is passed,\n\t * it will be executed for each value in the array to generate the criterion by which the value is ranked.\n\t * @param {object=} query A query to evaluate . If you pass in a query, only the items that match the query\n\t * are iterated over.\n\t * @param {function(value, key, collection)} iterator\n\t * @param {object=} thisobj The value of `this`\n\t * @return {number}\n\t */","name":"min","kind":"function","longname":"module:ink/collector~min","scope":"inner","id":"~min","path":"module-ink_collector.html#~min","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n * An object based collector\n * @extends module:documents/collector~CollectorBase\n * @constructor\n */","name":"OCollector","kind":"class","longname":"module:ink/collector~OCollector","scope":"inner","id":"OCollector","path":"module-ink_collector-OCollector.html","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n Returns true if all items match the query. Aliases as `every`\n @function\n\n @param {object} qu The query to execute\n @returns {boolean}\n @name all\n @memberOf module:documents/collector~CollectorBase#\n */","name":"all","kind":"function","longname":"module:ink/collector~OCollector#all","scope":"instance","id":"all","path":"module-ink_collector-OCollector.html#all","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-OCollector.html\">~OCollector</a>#"]},{"comment":"/**\n Returns true if any of the items match the query. Aliases as `all`\n @function\n\n @param {object} qu The query to execute\n @returns {boolean}\n @memberOf module:documents/collector~CollectorBase#\n @name any\n */","name":"any","kind":"function","longname":"module:ink/collector~OCollector#any","scope":"instance","id":"any","path":"module-ink_collector-OCollector.html#any","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-OCollector.html\">~OCollector</a>#"]},{"comment":"/**\n Returns true if all items match the query. Aliases as `all`\n @function\n\n @param {object} qu The query to execute\n @returns {boolean}\n @name every\n @memberOf module:documents/collector~CollectorBase#\n */","name":"every","kind":"function","longname":"module:ink/collector~OCollector#every","scope":"instance","id":"every","path":"module-ink_collector-OCollector.html#every","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-OCollector.html\">~OCollector</a>#"]},{"comment":"/**\n Find all records that match a query\n\n @param {object} qu The query to execute.\n @returns {array} The results\n @memberOf module:documents/collector~CollectorBase#\n @name find\n @method\n **/","name":"find","kind":"function","longname":"module:ink/collector~OCollector#find","scope":"instance","id":"find","path":"module-ink_collector-OCollector.html#find","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-OCollector.html\">~OCollector</a>#"]},{"comment":"/**\n Find all records that match a query and returns the keys for those items. This is similar to {@link module:ink/probe.find} but instead of returning\n records, returns the keys. If `obj` is an object it will return the hash key. If 'obj' is an array, it will return the index\n\n @param {object} qu The query to execute.\n @returns {array}\n @memberOf module:documents/collector~CollectorBase#\n @name findKeys\n @method\n */","name":"findKeys","kind":"function","longname":"module:ink/collector~OCollector#findKeys","scope":"instance","id":"findKeys","path":"module-ink_collector-OCollector.html#findKeys","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-OCollector.html\">~OCollector</a>#"]},{"comment":"/**\n Returns the first record that matches the query. Aliased as `seek`.\n\n @param {object} qu The query to execute.\n @returns {object}\n @memberOf module:documents/collector~CollectorBase#\n @name findOne\n @method\n */","name":"findOne","kind":"function","longname":"module:ink/collector~OCollector#findOne","scope":"instance","id":"findOne","path":"module-ink_collector-OCollector.html#findOne","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-OCollector.html\">~OCollector</a>#"]},{"comment":"/**\n Returns the first record that matches the query and returns its key or index depending on whether `obj` is an object or array respectively.\n Aliased as `seekKey`.\n\n @param {object} qu The query to execute.\n @returns {object}\n @memberOf module:documents/collector~CollectorBase#\n @name findOneKey\n @method\n */","name":"findOneKey","kind":"function","longname":"module:ink/collector~OCollector#findOneKey","scope":"instance","id":"findOneKey","path":"module-ink_collector-OCollector.html#findOneKey","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-OCollector.html\">~OCollector</a>#"]},{"comment":"/**\n\t\t * Get the size of the collection\n\t\t * @name length\n\t\t * @type {number}\n\t\t * @memberOf module:documents/collector~CollectorBase#\n\t\t */","name":"length","kind":"member","longname":"module:ink/collector~OCollector#length","scope":"instance","id":"length","path":"module-ink_collector-OCollector.html#length","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-OCollector.html\">~OCollector</a>#"]},{"comment":"/**\n Remove all items in the object/array that match the query\n\n @param {object} qu The query to execute. See {@link module:ink/probe.queryOperators} for the operators you can use.\n @return {object|array} The array or object as appropriate without the records.\n @memberOf module:documents/collector~CollectorBase#\n @name remove\n @method\n **/","name":"remove","kind":"function","longname":"module:ink/collector~OCollector#remove","scope":"instance","id":"remove","path":"module-ink_collector-OCollector.html#remove","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-OCollector.html\">~OCollector</a>#"]},{"comment":"/**\n Returns true if any of the items match the query. Aliases as `any`\n @function\n\n @param {object} qu The query to execute\n @returns {boolean}\n @memberOf module:documents/collector~CollectorBase#\n @name some\n */","name":"some","kind":"function","longname":"module:ink/collector~OCollector#some","scope":"instance","id":"some","path":"module-ink_collector-OCollector.html#some","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-OCollector.html\">~OCollector</a>#"]},{"comment":"/**\n Returns the set of unique records that match a query\n\n @param {object} qu The query to execute.\n @return {array}\n @memberOf module:documents/collector~CollectorBase#\n @name unique\n @method\n **/","name":"unique","kind":"function","longname":"module:ink/collector~OCollector#unique","scope":"instance","id":"unique","path":"module-ink_collector-OCollector.html#unique","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-OCollector.html\">~OCollector</a>#"]},{"comment":"/**\n Updates all records in obj that match the query. See {@link module:ink/probe.updateOperators} for the operators that are supported.\n\n @param {object} qu The query which will be used to identify the records to updated\n @param {object} setDocument The update operator. See {@link module:ink/probe.updateOperators}\n @memberOf module:documents/collector~CollectorBase#\n @name update\n @method\n */","name":"update","kind":"function","longname":"module:ink/collector~OCollector#update","scope":"instance","id":"update","path":"module-ink_collector-OCollector.html#update","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>","<a href=\"module-ink_collector-OCollector.html\">~OCollector</a>#"]},{"comment":"/**\n\t * Reduce the collection to a single value. Supports two signatures:\n\t * `.pluck(query, function)` and `.pluck(function)`\n\t * @param {object=} query The query to evaluate. If you pass in a query, only the items that match the query\n\t * are iterated over.\n\t * @param {string} property The property that will be 'plucked' from the contents of the collection\n\t * @return {*}\n\t */","name":"pluck","kind":"function","longname":"module:ink/collector~pluck","scope":"inner","id":"~pluck","path":"module-ink_collector.html#~pluck","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t\t * Add an item to the top of the list. This is identical to `add`, but is provided for stack semantics\n\t\t * @param {*} item The item to add to the collection. Only one item at a time can be added\n\t\t */","name":"push","kind":"function","longname":"module:ink/collector~push","scope":"inner","id":"~push","path":"module-ink_collector.html#~push","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t * Reduces a collection to a value which is the accumulated result of running each element in the collection through the\n\t * callback, where each successive callback execution consumes the return value of the previous execution. If accumulator\n\t * is not passed, the first element of the collection will be used as the initial accumulator value.\n\t * are iterated over.\n\t * @param {object=} query A query to evaluate\n\t * @param {function(result, val, key)} iterator The function that will be executed in each item in the collection\n\t * @param {*=} accumulator Initial value of the accumulator.\n\t * @param {object=} thisobj The value of `this`\n\t * @return {*}\n\t */","name":"reduce","kind":"function","longname":"module:ink/collector~reduce","scope":"inner","id":"~reduce","path":"module-ink_collector.html#~reduce","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t * Returns a sorted copy of the collection.\n\t * @param {object=} query The query to evaluate. If you pass in a query, only the items that match the query\n\t * are iterated over.\n\t * @param {function(value, key)} iterator\n\t * @param {object=} thisobj The value of `this`\n\t * @return {array}\n\t */","name":"sortBy","kind":"function","longname":"module:ink/collector~sortBy","scope":"inner","id":"~sortBy","path":"module-ink_collector.html#~sortBy","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t * Returns the collection as an array. If it is already an array, it just returns that.\n\t * @return {array}\n\t */","name":"toArray","kind":"function","longname":"module:ink/collector~toArray","scope":"inner","id":"~toArray","path":"module-ink_collector.html#~toArray","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n\t * Supports conversion to a JSON string or for passing over the wire\n\t * @return {object}\n\t * @returns {Object|array}\n\t */","name":"toJSON","kind":"function","longname":"module:ink/collector~toJSON","scope":"inner","id":"~toJSON","path":"module-ink_collector.html#~toJSON","ancestors":["<a href=\"module-ink_collector.html\">ink/collector</a>~"]},{"comment":"/**\n * @fileOverview Provides easy access to the system bus and provides some helper methods for doing so\n * @module mixins/bussable\n * @requires postal\n * @requires lodash\n * @requires base\n */","name":"mixins/bussable","kind":"module","longname":"module:mixins/bussable","id":"mixins/bussable","path":"module-mixins_bussable.html","ancestors":[]},{"comment":"/**\n * @fileOverview Add the ability to fire signals on your objects. Signals are events, but hard coded into the object\n * and don't rely on strings like other events and `eventables`\n * @module mixins/signalable\n * @requires base\n * @requires signals\n * @requires base/logger\n */","name":"mixins/signalable","kind":"module","longname":"module:mixins/signalable","id":"mixins/signalable","path":"module-mixins_signalable.html","ancestors":[]},{"comment":"/**\n * @typedef\n * @property {boolean=} memorize If Signal should keep record of previously dispatched parameters and automatically execute listener. Defaults to `false`\n * @property {array=} params Default parameters passed to listener during `Signal.raise`/`Signal.fire`/`Signal.trigger` and SignalBinding.execute. (curried parameters). Defaults to `null`\n * @property {object=} context When provided the signal will be raised in the context of this object. Defaults to `this` - the signal host\n * @name SignalOptions\n * @memberOf module:mixins/signalable\n * @example\n *\n *  signals:{\n *      opened: null,\n *      twisted: { memorize:true },\n *      applied: { memorize: false, params:[one, two] }\n *  }\n *\n *  // Setting the context initially can be a hassle, so this also supports a function that returns a hash\n *\n *  signals: function(){\n *      return {\n *      opened: null,\n *      twisted: { memorize:true },\n *      applied: { memorize: false, params:[one, two] },\n *      reversed: {context: someOtherRuntimeObject}\n *      };\n *  }\n *\n */","name":"SignalOptions","kind":"typedef","longname":"module:mixins/signalable.SignalOptions","scope":"static","id":".SignalOptions","path":"module-mixins_signalable.html#.SignalOptions","ancestors":["<a href=\"module-mixins_signalable.html\">mixins/signalable</a>."]},{"comment":"/**\n * @classDesc A signal that can be raised on an object. When you deploy the `Signalable` mixin, it\n * creates instances of these for you.\n *\n * @constructor\n * @param {?object} host If hosted, you can identify the host here.\n * @param {?string} name The name of the signal\n * @type module:mixins/signalable.SignalOptions\n */","name":"Signal","kind":"class","longname":"module:mixins/signalable~Signal","scope":"inner","id":"Signal","path":"module-mixins_signalable-Signal.html","ancestors":["<a href=\"module-mixins_signalable.html\">mixins/signalable</a>~"]},{"comment":"/**\n\t * Check if listener was attached to Signal.\n\t * @param {function} listener The function to check\n\t * @param {?object} listenerContext The context that was bound\n\t * @returns {boolean}\n\t */","name":"has","kind":"function","longname":"module:mixins/signalable~Signal#has","scope":"instance","id":"has","path":"module-mixins_signalable-Signal.html#has","ancestors":["<a href=\"module-mixins_signalable.html\">mixins/signalable</a>","<a href=\"module-mixins_signalable-Signal.html\">~Signal</a>#"]},{"comment":"/**\n\t * Unbinds a listener to a signal.\n\t * @param {function} listener The function to unbind\n\t * @param {?object} listenerContext The context that was bound\n\t * @returns {function}\n\t */","name":"off","kind":"function","longname":"module:mixins/signalable~Signal#off","scope":"instance","id":"off","path":"module-mixins_signalable-Signal.html#off","ancestors":["<a href=\"module-mixins_signalable.html\">mixins/signalable</a>","<a href=\"module-mixins_signalable-Signal.html\">~Signal</a>#"]},{"comment":"/**\n\t * Ties a listener to a signal.\n\t * @param {function} listener The function to call when the signal is raised\n\t * @param {?object} listenerContext A context to set for the listener. The event host may set a default for this value, but you may override that here.\n\t * @param {?number} priority A priority for the listener.\n\t * @returns {SignalBinding}\n\t */","name":"on","kind":"function","longname":"module:mixins/signalable~Signal#on","scope":"instance","id":"on","path":"module-mixins_signalable-Signal.html#on","ancestors":["<a href=\"module-mixins_signalable.html\">mixins/signalable</a>","<a href=\"module-mixins_signalable-Signal.html\">~Signal</a>#"]},{"comment":"/**\n\t * Ties a listener to for a signal for one execution.\n\t * @param {function} listener The function to call when the signal is raised\n\t * @param {?object} listenerContext A context to set for the listener. The event host may set a default for this value, but you may override that here.\n\t * @param {?number} priority A priority for the listener.\n\t * @returns {SignalBinding}\n\t */","name":"once","kind":"function","longname":"module:mixins/signalable~Signal#once","scope":"instance","id":"once","path":"module-mixins_signalable-Signal.html#once","ancestors":["<a href=\"module-mixins_signalable.html\">mixins/signalable</a>","<a href=\"module-mixins_signalable-Signal.html\">~Signal</a>#"]},{"comment":"/**\n\t * Strings!\n\t */","name":"toString","kind":"function","longname":"module:mixins/signalable~Signal#toString","scope":"instance","id":"toString","path":"module-mixins_signalable-Signal.html#toString","ancestors":["<a href=\"module-mixins_signalable.html\">mixins/signalable</a>","<a href=\"module-mixins_signalable-Signal.html\">~Signal</a>#"]},{"comment":"/**\n * @fileOverview String helper methods\n *\n * @module strings/format\n */","name":"strings/format","kind":"module","longname":"module:strings/format","id":"strings/format","path":"module-strings_format.html","ancestors":[]},{"comment":"/**\n * Format a string quickly and easily using .net style format strings\n * @param {string} format A string format like \"Hello {0}, now take off your {1}!\"\n * @param {...?} args One argument per `{}` in the string, positionally replaced\n * @returns {string}\n *\n * @example\n * var strings = require(\"papyrus/strings\");\n * var s = strings.format(\"Hello {0}\", \"Madame Vastra\");\n * // s = \"Hello Madame Vastra\"\n *\n * @example {@lang xml}\n * <span>\n *      <%= strings.format(\"Hello {0}\", \"Madame Vastra\") %>\n * </span>\n */","name":"module:strings/format","kind":"function","longname":"module:strings/format","id":"module:strings/format","path":"module-strings_format.html","ancestors":[]},{"comment":"/**\n * @fileOverview The logging system for papyrus is based on [http://pimterry.github.io/loglevel/](loglevel) and slightly decorated\n * @module utils/logger\n * @requires dcl\n * @requires loglevel\n */","name":"utils/logger","kind":"module","longname":"module:utils/logger","id":"utils/logger","path":"module-utils_logger.html","ancestors":[]},{"comment":"/**\n * The system global, cross-platform logger\n * @name utils/logger\n * @static\n * @type {utils/logger.Logger}\n */","name":"utils/logger","kind":"member","longname":"module:utils/logger.utils/logger","scope":"static","id":".utils/logger","path":"module-utils_logger.html#.utils/logger","ancestors":["<a href=\"module-utils_logger.html\">utils/logger</a>."]},{"kind":"package","longname":"package:undefined","id":"package:","path":"global.html#package:","ancestors":[]},{"comment":"/**\n * A logger class that you can mix into your classes to handle logging settings and state at an object level.\n * See {@link utils/logger} for the members of this class\n *\n * @exports utils/logger.Logger\n * @class\n * @see utils/logger\n */","name":"Logger","alias":"utils/logger.Logger","kind":"class","longname":"utils/logger.Logger","scope":"static","id":"Logger","path":"utils_logger.Logger.html","ancestors":[]},{"comment":"/**\n\t * Turns on all logging levels\n\t *\n\t */","name":"all","kind":"function","longname":"utils/logger.Logger#all","scope":"instance","id":"all","path":"utils_logger.Logger.html#all","ancestors":["<a href=\"utils_logger.Logger.html\">.Logger</a>#"]},{"comment":"/**\n\t * Log a `debug` call\n\t * @method\n\t * @param {string} The value to log\n\t */","name":"debug","kind":"function","longname":"utils/logger.Logger#debug","scope":"instance","id":"debug","path":"utils_logger.Logger.html#debug","ancestors":["<a href=\"utils_logger.Logger.html\">.Logger</a>#"]},{"comment":"/**\n\t * Log a `error` call\n\t * @method\n\t * @param {string} The value to log\n\t */","name":"error","kind":"function","longname":"utils/logger.Logger#error","scope":"instance","id":"error","path":"utils_logger.Logger.html#error","ancestors":["<a href=\"utils_logger.Logger.html\">.Logger</a>#"]},{"comment":"/**\n\t * Log a `info` call\n\t * @method\n\t * @param {string} The value to log\n\t */","name":"info","kind":"function","longname":"utils/logger.Logger#info","scope":"instance","id":"info","path":"utils_logger.Logger.html#info","ancestors":["<a href=\"utils_logger.Logger.html\">.Logger</a>#"]},{"comment":"/**\n\t * Sets the logging level to one of `trace`, `debug`, `info`, `warn`, `error`.\n\t * @param {string} lvl The level to set it to. Can be  one of `trace`, `debug`, `info`, `warn`, `error`.\n\t *\n\t */","name":"level","kind":"function","longname":"utils/logger.Logger#level","scope":"instance","id":"level","path":"utils_logger.Logger.html#level","ancestors":["<a href=\"utils_logger.Logger.html\">.Logger</a>#"]},{"comment":"/**\n\t * Turn off all logging. If you log something, it will not error, but will not do anything either\n\t * and the cycles are minimal.\n\t *\n\t */","name":"silent","kind":"function","longname":"utils/logger.Logger#silent","scope":"instance","id":"silent","path":"utils_logger.Logger.html#silent","ancestors":["<a href=\"utils_logger.Logger.html\">.Logger</a>#"]},{"comment":"/**\n\t * Log a `trace` call\n\t * @method\n\t * @param {string} The value to log\n\t */","name":"trace","kind":"function","longname":"utils/logger.Logger#trace","scope":"instance","id":"trace","path":"utils_logger.Logger.html#trace","ancestors":["<a href=\"utils_logger.Logger.html\">.Logger</a>#"]},{"comment":"/**\n\t * Log a `warn` call\n\t * @method\n\t * @param {string} The value to log\n\t */","name":"warn","kind":"function","longname":"utils/logger.Logger#warn","scope":"instance","id":"warn","path":"utils_logger.Logger.html#warn","ancestors":["<a href=\"utils_logger.Logger.html\">.Logger</a>#"]}]